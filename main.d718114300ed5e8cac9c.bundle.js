(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[function(module,exports){module.exports=storybook_docs_dll},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ERkP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("1t7P")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("IAdD")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ho0z")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("+KXO")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("jQ/y")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("vrRf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("7x/C")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("plBw")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("M+/F")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("z84I")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("lTEL")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("87if")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("kYxP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("2G9S")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("DZ+c")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("aLgo")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("cARO")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("UvmB")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("KqXw")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("hCOa")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("NyMY")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("jwue")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("+oxZ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("aokA")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("EgRP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("lN5B")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("LW0h")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("yH/f")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Ysgh")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("A3UQ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("1Iuc")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("7xRU")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Yct5")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ZVkB")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("KOtZ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("vbDw")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("MvUL")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("1IsZ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("jQ3i")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("aYSr")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("WNMA")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("x4t0")},,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("JtPf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("P2aG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("hBpG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ax0f")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("tVqn")},,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("fRV1")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("3yYM")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("5o43")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ct80")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("6U7i")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Cm4o")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("sVFb")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("CUMQ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Blm6")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("1Mu/")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("+kY7")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("9JhN")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("5BYb")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("/Qos")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("DfhM")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("5878")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("LqLs")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("LJOr")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("pu3o")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("l1C2")},,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("j4Sf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("LUwd")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("OZaJ")},,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("S3pA")},,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("N4z3")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("GFpt")},,,function(module,exports,__webpack_require__){__webpack_require__(160),__webpack_require__(184),__webpack_require__(185),__webpack_require__(233),__webpack_require__(371),__webpack_require__(383),__webpack_require__(397),__webpack_require__(400),__webpack_require__(403),module.exports=__webpack_require__(409)},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ARua")},,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("PjZX")},,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(104)},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("JY+C")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ZUdG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("PuIx")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("hpdy")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("N9G2")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("f4p7")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("nsO7")},,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("dSaG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("hQin")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("iu90")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("OtWY")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("7nmT")},,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("LJ7e")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("I2fK")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("DY47")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("3kp9")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("/bc2")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("/JuR")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("+Bxv")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("muFx")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Wci6")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("WoRU")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("o3fS")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("JmTi")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("xaiR")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("SlD/")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Monn")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("A/2O")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("uFXj")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("mmUj")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("OCSl")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("kA4r")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ssvU")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("lZm3")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Ee2X")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("BGTi")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("b2e3")},,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("maj8")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("F63i")},,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("wC3K")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("zKkv")},,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("3voH")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("H87J")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("O1Sc")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("zF5n")},,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("66wQ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("j6nH")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("q9+l")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ZdBB")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("jl0/")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("q/0V")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("L2rT")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("uLp7")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("zc29")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Ch6y")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("fVMg")},,,,,,,function(module,exports,__webpack_require__){"use strict";__webpack_require__(2),__webpack_require__(32),__webpack_require__(26),__webpack_require__(29),__webpack_require__(21),__webpack_require__(62),__webpack_require__(63),__webpack_require__(7),__webpack_require__(27);var _clientApi=__webpack_require__(33),_clientLogger=__webpack_require__(31),_configFilename=__webpack_require__(406);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator)})),(_configFilename.parameters||_configFilename.globalArgs||_configFilename.globalArgTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globalArgs:_configFilename.globalArgs,globalArgTypes:_configFilename.globalArgTypes})),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("oD4t")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("2sZ7")},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _storybook_client_api__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(33);Object(_storybook_client_api__WEBPACK_IMPORTED_MODULE_0__.addParameters)({options:{showRoots:!0},dependencies:{withStoriesOnly:!0,hideEmpty:!0}}),Object(_storybook_client_api__WEBPACK_IMPORTED_MODULE_0__.addParameters)({options:{storySort:function storySort(a,b){return a[1].kind===b[1].kind?0:a[1].id.localeCompare(b[1].id,void 0,{numeric:!0})}}});Object(_storybook_client_api__WEBPACK_IMPORTED_MODULE_0__.addDecorator)((function(story){var tale=story();return"string"==typeof tale?function storyAsString(story){return"<div class='container m-5'>".concat(story,"</div>")}(tale):function storyAsNode(story){var head=document.head||document.getElementsByTagName("head")[0],style=document.createElement("style"),css=__webpack_require__(407);head.appendChild(style),style.type="text/css",style.appendChild(document.createTextNode(css));var wrapper=document.createElement("div");return wrapper.className="container m-5",wrapper.appendChild(story),wrapper}(tale)}))},function(module,exports,__webpack_require__){var styles=__webpack_require__(408);module.exports="string"==typeof styles?styles:styles.toString()},function(module,exports,__webpack_require__){(exports=__webpack_require__(157)(!1)).push([module.i,"body,\nhtml {\n    height: 100%;\n    width: 100%;\n    padding: 0 !important;\n    margin: 0 !important;\n}\n\n#root {\n    height: 100%;\n}\n\n.grid-component {\n    display: block;\n    width: 100%;\n    height: 100%;\n    position: absolute;\n}\n",""]),module.exports=exports},function(module,exports,__webpack_require__){"use strict";(function(module){var _framework=__webpack_require__(104);module._StorybookPreserveDecorators=!0,(0,_framework.configure)([__webpack_require__(410),__webpack_require__(419)],module)}).call(this,__webpack_require__(52)(module))},function(module,exports,__webpack_require__){var map={"./js-grid.stories.js":411,"./ts-grid.stories.ts":413,"./vuejs.stories.js":414};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=410},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"basicSample",(function(){return basicSample}));__webpack_require__(20),__webpack_require__(21),__webpack_require__(10),__webpack_require__(94),__webpack_require__(18);var _require=__webpack_require__(64),applyPolyfills=_require.applyPolyfills,defineCustomElements=_require.defineCustomElements;__webpack_exports__.default={parameters:function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}({storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "const {applyPolyfills, defineCustomElements} = require(\'@revolist/revogrid/loader\');\\n\\n\\nexport default {\\n    title: \'Source Api/JavaScript\'\\n};\\n\\nexport const basicSample = () => {\\n    // define custom element \'<revo-grid/>\', we can ignore applyPolyfills if we are not supporting IE11\\n    applyPolyfills().then(() => {\\n        defineCustomElements();\\n    });\\n\\n    // header labels generation\\n    function generateHeader(index) {\\n        let dividend = index + 1;\\n        let columnLabel = \'\';\\n        let modulo;\\n        while (dividend > 0) {\\n            modulo = (dividend - 1) % 26;\\n            columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\\n            dividend = parseInt(((dividend - modulo) / 26).toString(), 10);\\n        }\\n        return columnLabel;\\n    }\\n\\n    // fake data generation as Array input source\\n    function generateFakeData(rowsNumber, colsNumber) {\\n        const result = [];\\n        const rowMin = [];\\n        const headers = [];\\n        for (let j = 0; j < colsNumber; j++) {\\n            rowMin.push(j);\\n            headers.push({\\n                prop: j,\\n                name: generateHeader(j),\\n                cellTemplate: (h, props) => {\\n                    const text = props.model[props.prop];\\n                    return h(\'div\', {\\n                        style: {\\n                            backgroundColor: j%4 ? undefined : \'gray\'\\n                        },\\n                        class: \'inner-cell\'\\n                    },  text);\\n                }\\n            });\\n        }\\n        for (let i = 0; i < rowsNumber; i++) {\\n            result.push(rowMin);\\n        }\\n        return {\\n            rows: result,\\n            headers: headers\\n        };\\n    }\\n\\n    const div = document.createElement(\'div\');\\n    div.innerHTML = \'<revo-grid class=\\"grid-component\\"></revo-grid>\';\\n    const grid = div.querySelector(\'revo-grid\');\\n\\n    if (grid) {\\n        const data = generateFakeData(1000, 100);\\n        grid.columns = data.headers;\\n        grid.source = data.rows;\\n    }\\n\\n    return div;\\n};\\n\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"source-api-javascript--basic-sample":{"startLoc":{"col":27,"line":8},"endLoc":{"col":1,"line":68},"startBody":{"col":27,"line":8},"endBody":{"col":1,"line":68}}};\n    \nconst {applyPolyfills, defineCustomElements} = require(\'@revolist/revogrid/loader\');\n\n\nexport default {parameters: {"storySource":{"source":"const {applyPolyfills, defineCustomElements} = require(\'@revolist/revogrid/loader\');\\n\\n\\nexport default {\\n    title: \'Source Api/JavaScript\'\\n};\\n\\nexport const basicSample = () => {\\n    // define custom element \'<revo-grid/>\', we can ignore applyPolyfills if we are not supporting IE11\\n    applyPolyfills().then(() => {\\n        defineCustomElements();\\n    });\\n\\n    // header labels generation\\n    function generateHeader(index) {\\n        let dividend = index + 1;\\n        let columnLabel = \'\';\\n        let modulo;\\n        while (dividend > 0) {\\n            modulo = (dividend - 1) % 26;\\n            columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\\n            dividend = parseInt(((dividend - modulo) / 26).toString(), 10);\\n        }\\n        return columnLabel;\\n    }\\n\\n    // fake data generation as Array input source\\n    function generateFakeData(rowsNumber, colsNumber) {\\n        const result = [];\\n        const rowMin = [];\\n        const headers = [];\\n        for (let j = 0; j < colsNumber; j++) {\\n            rowMin.push(j);\\n            headers.push({\\n                prop: j,\\n                name: generateHeader(j),\\n                cellTemplate: (h, props) => {\\n                    const text = props.model[props.prop];\\n                    return h(\'div\', {\\n                        style: {\\n                            backgroundColor: j%4 ? undefined : \'gray\'\\n                        },\\n                        class: \'inner-cell\'\\n                    },  text);\\n                }\\n            });\\n        }\\n        for (let i = 0; i < rowsNumber; i++) {\\n            result.push(rowMin);\\n        }\\n        return {\\n            rows: result,\\n            headers: headers\\n        };\\n    }\\n\\n    const div = document.createElement(\'div\');\\n    div.innerHTML = \'<revo-grid class=\\"grid-component\\"></revo-grid>\';\\n    const grid = div.querySelector(\'revo-grid\');\\n\\n    if (grid) {\\n        const data = generateFakeData(1000, 100);\\n        grid.columns = data.headers;\\n        grid.source = data.rows;\\n    }\\n\\n    return div;\\n};\\n\\n","locationsMap":{"source-api-javascript--basic-sample":{"startLoc":{"col":27,"line":8},"endLoc":{"col":1,"line":68},"startBody":{"col":27,"line":8},"endBody":{"col":1,"line":68}}}},},\n    title: \'Source Api/JavaScript\'\n};\n\nexport const basicSample = () => {\n    // define custom element \'<revo-grid/>\', we can ignore applyPolyfills if we are not supporting IE11\n    applyPolyfills().then(() => {\n        defineCustomElements();\n    });\n\n    // header labels generation\n    function generateHeader(index) {\n        let dividend = index + 1;\n        let columnLabel = \'\';\n        let modulo;\n        while (dividend > 0) {\n            modulo = (dividend - 1) % 26;\n            columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\n            dividend = parseInt(((dividend - modulo) / 26).toString(), 10);\n        }\n        return columnLabel;\n    }\n\n    // fake data generation as Array input source\n    function generateFakeData(rowsNumber, colsNumber) {\n        const result = [];\n        const rowMin = [];\n        const headers = [];\n        for (let j = 0; j < colsNumber; j++) {\n            rowMin.push(j);\n            headers.push({\n                prop: j,\n                name: generateHeader(j),\n                cellTemplate: (h, props) => {\n                    const text = props.model[props.prop];\n                    return h(\'div\', {\n                        style: {\n                            backgroundColor: j%4 ? undefined : \'gray\'\n                        },\n                        class: \'inner-cell\'\n                    },  text);\n                }\n            });\n        }\n        for (let i = 0; i < rowsNumber; i++) {\n            result.push(rowMin);\n        }\n        return {\n            rows: result,\n            headers: headers\n        };\n    }\n\n    const div = document.createElement(\'div\');\n    div.innerHTML = \'<revo-grid class="grid-component"></revo-grid>\';\n    const grid = div.querySelector(\'revo-grid\');\n\n    if (grid) {\n        const data = generateFakeData(1000, 100);\n        grid.columns = data.headers;\n        grid.source = data.rows;\n    }\n\n    return div;\n};\n\n',locationsMap:{"source-api-javascript--basic-sample":{startLoc:{col:27,line:16},endLoc:{col:1,line:76},startBody:{col:27,line:16},endBody:{col:1,line:76}}}}},"storySource",{source:"const {applyPolyfills, defineCustomElements} = require('@revolist/revogrid/loader');\n\n\nexport default {\n    title: 'Source Api/JavaScript'\n};\n\nexport const basicSample = () => {\n    // define custom element '<revo-grid/>', we can ignore applyPolyfills if we are not supporting IE11\n    applyPolyfills().then(() => {\n        defineCustomElements();\n    });\n\n    // header labels generation\n    function generateHeader(index) {\n        let dividend = index + 1;\n        let columnLabel = '';\n        let modulo;\n        while (dividend > 0) {\n            modulo = (dividend - 1) % 26;\n            columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\n            dividend = parseInt(((dividend - modulo) / 26).toString(), 10);\n        }\n        return columnLabel;\n    }\n\n    // fake data generation as Array input source\n    function generateFakeData(rowsNumber, colsNumber) {\n        const result = [];\n        const rowMin = [];\n        const headers = [];\n        for (let j = 0; j < colsNumber; j++) {\n            rowMin.push(j);\n            headers.push({\n                prop: j,\n                name: generateHeader(j),\n                cellTemplate: (h, props) => {\n                    const text = props.model[props.prop];\n                    return h('div', {\n                        style: {\n                            backgroundColor: j%4 ? undefined : 'gray'\n                        },\n                        class: 'inner-cell'\n                    },  text);\n                }\n            });\n        }\n        for (let i = 0; i < rowsNumber; i++) {\n            result.push(rowMin);\n        }\n        return {\n            rows: result,\n            headers: headers\n        };\n    }\n\n    const div = document.createElement('div');\n    div.innerHTML = '<revo-grid class=\"grid-component\"></revo-grid>';\n    const grid = div.querySelector('revo-grid');\n\n    if (grid) {\n        const data = generateFakeData(1000, 100);\n        grid.columns = data.headers;\n        grid.source = data.rows;\n    }\n\n    return div;\n};\n\n",locationsMap:{"source-api-javascript--basic-sample":{startLoc:{col:27,line:8},endLoc:{col:1,line:68},startBody:{col:27,line:8},endBody:{col:1,line:68}}}}),title:"Source Api/JavaScript"};var basicSample=function basicSample(){function generateHeader(index){for(var modulo,dividend=index+1,columnLabel="";dividend>0;)modulo=(dividend-1)%26,columnLabel=String.fromCharCode(65+modulo)+columnLabel,dividend=parseInt(((dividend-modulo)/26).toString(),10);return columnLabel}applyPolyfills().then((function(){defineCustomElements()}));var div=document.createElement("div");div.innerHTML='<revo-grid class="grid-component"></revo-grid>';var grid=div.querySelector("revo-grid");if(grid){var data=function generateFakeData(rowsNumber,colsNumber){for(var result=[],rowMin=[],headers=[],_loop=function _loop(j){rowMin.push(j),headers.push({prop:j,name:generateHeader(j),cellTemplate:function cellTemplate(h,props){var text=props.model[props.prop];return h("div",{style:{backgroundColor:j%4?void 0:"gray"},class:"inner-cell"},text)}})},j=0;j<colsNumber;j++)_loop(j);for(var i=0;i<rowsNumber;i++)result.push(rowMin);return{rows:result,headers:headers}}(1e3,100);grid.columns=data.headers,grid.source=data.rows}return div}},function(module,exports,__webpack_require__){var map={"./revo-grid_4.entry.js":[427,7]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((function(){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return __webpack_require__.e(ids[1]).then((function(){return __webpack_require__(id)}))}webpackAsyncContext.keys=function webpackAsyncContextKeys(){return Object.keys(map)},webpackAsyncContext.id=412,module.exports=webpackAsyncContext},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"basicSample",(function(){return basicSample}));__webpack_require__(20),__webpack_require__(21),__webpack_require__(10),__webpack_require__(94),__webpack_require__(18);var _revolist_revogrid_loader__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(64);__webpack_exports__.default={parameters:function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}({storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import { applyPolyfills, defineCustomElements } from \'@revolist/revogrid/loader\';\\nimport {ColumnDataSchema, DataType} from \\"@revolist/revogrid/dist/types/interfaces\\";\\n\\nexport default {\\n    title: \'Source Api/Typescript\'\\n};\\n\\n\\nexport const basicSample = () => {\\n    // define custom element \'<revo-grid/>\', we can ignore applyPolyfills if we are not supporting IE11\\n    applyPolyfills().then(() => {\\n        defineCustomElements();\\n    });\\n\\n    // header labels generation\\n    function generateHeader(index: number) {\\n        let dividend: number = index + 1;\\n        let columnLabel = \'\';\\n        let modulo;\\n        while (dividend > 0) {\\n            modulo = (dividend - 1) % 26;\\n            columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\\n            dividend = parseInt(((dividend - modulo) / 26).toString(), 10);\\n        }\\n        return columnLabel;\\n    }\\n\\n    // fake data generation as Object input source\\n    function generateFakeDataObject(rowsNumber: number, colsNumber: number) {\\n        const result: DataType[] = [];\\n        const headers: ColumnDataSchema[] = [];\\n        const all = colsNumber * rowsNumber;\\n        for (let j: number = 0; j < all; j++) {\\n            let col: number = j%colsNumber;\\n            let row: number = j/colsNumber|0;\\n            if (!result[row]) {\\n                result[row] = {};\\n            }\\n            result[row][col] = row + \':\' + col;\\n            if (!headers[col]) {\\n                headers[col] = {\\n                    name: generateHeader(col),\\n                    prop: col.toString()\\n                }\\n            }\\n        }\\n        return {\\n            rows: result,\\n            headers: headers\\n        };\\n    }\\n\\n\\n    const div: HTMLDivElement = document.createElement(\'div\');\\n    div.innerHTML = \'<revo-grid class=\\"grid-component\\"></revo-grid>\';\\n\\n\\n    const grid: HTMLRevoGridElement|null = div.querySelector(\'revo-grid\');\\n    if (grid) {\\n        const data = generateFakeDataObject(1000, 100);\\n        grid.columns = data.headers;\\n        grid.source = data.rows;\\n    }\\n    return div;\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"source-api-typescript--basic-sample":{"startLoc":{"col":27,"line":9},"endLoc":{"col":1,"line":65},"startBody":{"col":27,"line":9},"endBody":{"col":1,"line":65}}};\n    \nimport { applyPolyfills, defineCustomElements } from \'@revolist/revogrid/loader\';\nimport {ColumnDataSchema, DataType} from "@revolist/revogrid/dist/types/interfaces";\n\nexport default {parameters: {"storySource":{"source":"import { applyPolyfills, defineCustomElements } from \'@revolist/revogrid/loader\';\\nimport {ColumnDataSchema, DataType} from \\"@revolist/revogrid/dist/types/interfaces\\";\\n\\nexport default {\\n    title: \'Source Api/Typescript\'\\n};\\n\\n\\nexport const basicSample = () => {\\n    // define custom element \'<revo-grid/>\', we can ignore applyPolyfills if we are not supporting IE11\\n    applyPolyfills().then(() => {\\n        defineCustomElements();\\n    });\\n\\n    // header labels generation\\n    function generateHeader(index: number) {\\n        let dividend: number = index + 1;\\n        let columnLabel = \'\';\\n        let modulo;\\n        while (dividend > 0) {\\n            modulo = (dividend - 1) % 26;\\n            columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\\n            dividend = parseInt(((dividend - modulo) / 26).toString(), 10);\\n        }\\n        return columnLabel;\\n    }\\n\\n    // fake data generation as Object input source\\n    function generateFakeDataObject(rowsNumber: number, colsNumber: number) {\\n        const result: DataType[] = [];\\n        const headers: ColumnDataSchema[] = [];\\n        const all = colsNumber * rowsNumber;\\n        for (let j: number = 0; j < all; j++) {\\n            let col: number = j%colsNumber;\\n            let row: number = j/colsNumber|0;\\n            if (!result[row]) {\\n                result[row] = {};\\n            }\\n            result[row][col] = row + \':\' + col;\\n            if (!headers[col]) {\\n                headers[col] = {\\n                    name: generateHeader(col),\\n                    prop: col.toString()\\n                }\\n            }\\n        }\\n        return {\\n            rows: result,\\n            headers: headers\\n        };\\n    }\\n\\n\\n    const div: HTMLDivElement = document.createElement(\'div\');\\n    div.innerHTML = \'<revo-grid class=\\"grid-component\\"></revo-grid>\';\\n\\n\\n    const grid: HTMLRevoGridElement|null = div.querySelector(\'revo-grid\');\\n    if (grid) {\\n        const data = generateFakeDataObject(1000, 100);\\n        grid.columns = data.headers;\\n        grid.source = data.rows;\\n    }\\n    return div;\\n};\\n","locationsMap":{"source-api-typescript--basic-sample":{"startLoc":{"col":27,"line":9},"endLoc":{"col":1,"line":65},"startBody":{"col":27,"line":9},"endBody":{"col":1,"line":65}}}},},\n    title: \'Source Api/Typescript\'\n};\n\n\nexport const basicSample = () => {\n    // define custom element \'<revo-grid/>\', we can ignore applyPolyfills if we are not supporting IE11\n    applyPolyfills().then(() => {\n        defineCustomElements();\n    });\n\n    // header labels generation\n    function generateHeader(index: number) {\n        let dividend: number = index + 1;\n        let columnLabel = \'\';\n        let modulo;\n        while (dividend > 0) {\n            modulo = (dividend - 1) % 26;\n            columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\n            dividend = parseInt(((dividend - modulo) / 26).toString(), 10);\n        }\n        return columnLabel;\n    }\n\n    // fake data generation as Object input source\n    function generateFakeDataObject(rowsNumber: number, colsNumber: number) {\n        const result: DataType[] = [];\n        const headers: ColumnDataSchema[] = [];\n        const all = colsNumber * rowsNumber;\n        for (let j: number = 0; j < all; j++) {\n            let col: number = j%colsNumber;\n            let row: number = j/colsNumber|0;\n            if (!result[row]) {\n                result[row] = {};\n            }\n            result[row][col] = row + \':\' + col;\n            if (!headers[col]) {\n                headers[col] = {\n                    name: generateHeader(col),\n                    prop: col.toString()\n                }\n            }\n        }\n        return {\n            rows: result,\n            headers: headers\n        };\n    }\n\n\n    const div: HTMLDivElement = document.createElement(\'div\');\n    div.innerHTML = \'<revo-grid class="grid-component"></revo-grid>\';\n\n\n    const grid: HTMLRevoGridElement|null = div.querySelector(\'revo-grid\');\n    if (grid) {\n        const data = generateFakeDataObject(1000, 100);\n        grid.columns = data.headers;\n        grid.source = data.rows;\n    }\n    return div;\n};\n',locationsMap:{"source-api-typescript--basic-sample":{startLoc:{col:27,line:17},endLoc:{col:1,line:73},startBody:{col:27,line:17},endBody:{col:1,line:73}}}}},"storySource",{source:"import { applyPolyfills, defineCustomElements } from '@revolist/revogrid/loader';\nimport {ColumnDataSchema, DataType} from \"@revolist/revogrid/dist/types/interfaces\";\n\nexport default {\n    title: 'Source Api/Typescript'\n};\n\n\nexport const basicSample = () => {\n    // define custom element '<revo-grid/>', we can ignore applyPolyfills if we are not supporting IE11\n    applyPolyfills().then(() => {\n        defineCustomElements();\n    });\n\n    // header labels generation\n    function generateHeader(index: number) {\n        let dividend: number = index + 1;\n        let columnLabel = '';\n        let modulo;\n        while (dividend > 0) {\n            modulo = (dividend - 1) % 26;\n            columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\n            dividend = parseInt(((dividend - modulo) / 26).toString(), 10);\n        }\n        return columnLabel;\n    }\n\n    // fake data generation as Object input source\n    function generateFakeDataObject(rowsNumber: number, colsNumber: number) {\n        const result: DataType[] = [];\n        const headers: ColumnDataSchema[] = [];\n        const all = colsNumber * rowsNumber;\n        for (let j: number = 0; j < all; j++) {\n            let col: number = j%colsNumber;\n            let row: number = j/colsNumber|0;\n            if (!result[row]) {\n                result[row] = {};\n            }\n            result[row][col] = row + ':' + col;\n            if (!headers[col]) {\n                headers[col] = {\n                    name: generateHeader(col),\n                    prop: col.toString()\n                }\n            }\n        }\n        return {\n            rows: result,\n            headers: headers\n        };\n    }\n\n\n    const div: HTMLDivElement = document.createElement('div');\n    div.innerHTML = '<revo-grid class=\"grid-component\"></revo-grid>';\n\n\n    const grid: HTMLRevoGridElement|null = div.querySelector('revo-grid');\n    if (grid) {\n        const data = generateFakeDataObject(1000, 100);\n        grid.columns = data.headers;\n        grid.source = data.rows;\n    }\n    return div;\n};\n",locationsMap:{"source-api-typescript--basic-sample":{startLoc:{col:27,line:9},endLoc:{col:1,line:65},startBody:{col:27,line:9},endBody:{col:1,line:65}}}}),title:"Source Api/Typescript"};var basicSample=function basicSample(){function generateHeader(index){for(var modulo,dividend=index+1,columnLabel="";dividend>0;)modulo=(dividend-1)%26,columnLabel=String.fromCharCode(65+modulo)+columnLabel,dividend=parseInt(((dividend-modulo)/26).toString(),10);return columnLabel}Object(_revolist_revogrid_loader__WEBPACK_IMPORTED_MODULE_5__.applyPolyfills)().then((function(){Object(_revolist_revogrid_loader__WEBPACK_IMPORTED_MODULE_5__.defineCustomElements)()}));var div=document.createElement("div");div.innerHTML='<revo-grid class="grid-component"></revo-grid>';var grid=div.querySelector("revo-grid");if(grid){var data=function generateFakeDataObject(rowsNumber,colsNumber){for(var result=[],headers=[],all=colsNumber*rowsNumber,j=0;j<all;j++){var col=j%colsNumber,row=j/colsNumber|0;result[row]||(result[row]={}),result[row][col]=row+":"+col,headers[col]||(headers[col]={name:generateHeader(col),prop:col.toString()})}return{rows:result,headers:headers}}(1e3,100);grid.columns=data.headers,grid.source=data.rows}return div}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"basicSample",(function(){return basicSample}));__webpack_require__(21),__webpack_require__(87);var vue__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(158);__webpack_require__(415);var Vue=vue__WEBPACK_IMPORTED_MODULE_2__.a,_require=__webpack_require__(64),applyPolyfills=_require.applyPolyfills,defineCustomElements=_require.defineCustomElements,people=__webpack_require__(418).default;__webpack_exports__.default={parameters:function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}({storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import VueJs from 'vue';\\nimport '../assets/local.grid.scss';\\nconst Vue = VueJs;\\n\\nconst {applyPolyfills, defineCustomElements} = require('@revolist/revogrid/loader');\\nconst people = require('../assets/people').default;\\n\\nexport default {\\n    title: 'Source Api/VueJs'\\n};\\n\\nexport const basicSample = () => {\\n    // storybook\\n    const div = document.createElement('div');\\n    setTimeout(() => vueJsGs(), 0);\\n    div.setAttribute('id', 'app');\\n    return div;\\n};\\n\\nconst vueJsGs = () => {\\n    // define custom element '<revo-grid/>', we can ignore applyPolyfills if we are not supporting IE11\\n    applyPolyfills().then(() => { defineCustomElements(); });\\n    Vue.config.ignoredElements = [/revo-\\\\w*/]; // Set ignore web-component and avoid parsing it as vuejs\\n\\n    Vue.component('revogrid-vue-wrapper', {\\n        template: '<revo-grid class=\\\"grid-component\\\" :source.prop=\\\"source\\\" :columns.prop=\\\"columns\\\" :dimensions.prop=\\\"dimensions\\\"/>',\\n        data() {\\n            return {\\n                columns: [{\\n                    prop: 'name',\\n                    name: 'Name'\\n                },\\n                {\\n                    prop: 'eyeColor',\\n                    name: 'Eyes',\\n                    cellTemplate: (h, props) => {\\n                        const text = props.model[props.prop];\\n                        return h('div', {\\n                            style: {\\n                                backgroundColor: text\\n                            },\\n                            class: 'inner-cell'\\n                        },  text);\\n                    }\\n                },\\n                {\\n                    prop: 'gender',\\n                    name: 'Gender'\\n                }],\\n                source: people,\\n                dimensions: {\\n                    col: { 0: 500 }\\n                }\\n            };\\n        }\\n    });\\n\\n    new Vue({ render: h => h('revogrid-vue-wrapper') }).$mount('#app');\\n};\\n\\nbasicSample.story = {\\n    parameters: {\\n        docs: { source: { code: vueJsGs } },\\n    },\\n};\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"source-api-vuejs--basic-sample\":{\"startLoc\":{\"col\":27,\"line\":12},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":27,\"line\":12},\"endBody\":{\"col\":1,\"line\":18}}};\n    \nimport VueJs from 'vue';\nimport '../assets/local.grid.scss';\nconst Vue = VueJs;\n\nconst {applyPolyfills, defineCustomElements} = require('@revolist/revogrid/loader');\nconst people = require('../assets/people').default;\n\nexport default {parameters: {\"storySource\":{\"source\":\"import VueJs from 'vue';\\nimport '../assets/local.grid.scss';\\nconst Vue = VueJs;\\n\\nconst {applyPolyfills, defineCustomElements} = require('@revolist/revogrid/loader');\\nconst people = require('../assets/people').default;\\n\\nexport default {\\n    title: 'Source Api/VueJs'\\n};\\n\\nexport const basicSample = () => {\\n    // storybook\\n    const div = document.createElement('div');\\n    setTimeout(() => vueJsGs(), 0);\\n    div.setAttribute('id', 'app');\\n    return div;\\n};\\n\\nconst vueJsGs = () => {\\n    // define custom element '<revo-grid/>', we can ignore applyPolyfills if we are not supporting IE11\\n    applyPolyfills().then(() => { defineCustomElements(); });\\n    Vue.config.ignoredElements = [/revo-\\\\w*/]; // Set ignore web-component and avoid parsing it as vuejs\\n\\n    Vue.component('revogrid-vue-wrapper', {\\n        template: '<revo-grid class=\\\"grid-component\\\" :source.prop=\\\"source\\\" :columns.prop=\\\"columns\\\" :dimensions.prop=\\\"dimensions\\\"/>',\\n        data() {\\n            return {\\n                columns: [{\\n                    prop: 'name',\\n                    name: 'Name'\\n                },\\n                {\\n                    prop: 'eyeColor',\\n                    name: 'Eyes',\\n                    cellTemplate: (h, props) => {\\n                        const text = props.model[props.prop];\\n                        return h('div', {\\n                            style: {\\n                                backgroundColor: text\\n                            },\\n                            class: 'inner-cell'\\n                        },  text);\\n                    }\\n                },\\n                {\\n                    prop: 'gender',\\n                    name: 'Gender'\\n                }],\\n                source: people,\\n                dimensions: {\\n                    col: { 0: 500 }\\n                }\\n            };\\n        }\\n    });\\n\\n    new Vue({ render: h => h('revogrid-vue-wrapper') }).$mount('#app');\\n};\\n\\nbasicSample.story = {\\n    parameters: {\\n        docs: { source: { code: vueJsGs } },\\n    },\\n};\",\"locationsMap\":{\"source-api-vuejs--basic-sample\":{\"startLoc\":{\"col\":27,\"line\":12},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":27,\"line\":12},\"endBody\":{\"col\":1,\"line\":18}}}},},\n    title: 'Source Api/VueJs'\n};\n\nexport const basicSample = () => {\n    // storybook\n    const div = document.createElement('div');\n    setTimeout(() => vueJsGs(), 0);\n    div.setAttribute('id', 'app');\n    return div;\n};\n\nconst vueJsGs = () => {\n    // define custom element '<revo-grid/>', we can ignore applyPolyfills if we are not supporting IE11\n    applyPolyfills().then(() => { defineCustomElements(); });\n    Vue.config.ignoredElements = [/revo-\\w*/]; // Set ignore web-component and avoid parsing it as vuejs\n\n    Vue.component('revogrid-vue-wrapper', {\n        template: '<revo-grid class=\"grid-component\" :source.prop=\"source\" :columns.prop=\"columns\" :dimensions.prop=\"dimensions\"/>',\n        data() {\n            return {\n                columns: [{\n                    prop: 'name',\n                    name: 'Name'\n                },\n                {\n                    prop: 'eyeColor',\n                    name: 'Eyes',\n                    cellTemplate: (h, props) => {\n                        const text = props.model[props.prop];\n                        return h('div', {\n                            style: {\n                                backgroundColor: text\n                            },\n                            class: 'inner-cell'\n                        },  text);\n                    }\n                },\n                {\n                    prop: 'gender',\n                    name: 'Gender'\n                }],\n                source: people,\n                dimensions: {\n                    col: { 0: 500 }\n                }\n            };\n        }\n    });\n\n    new Vue({ render: h => h('revogrid-vue-wrapper') }).$mount('#app');\n};\n\nbasicSample.story = {\n    parameters: {\n        docs: { source: { code: vueJsGs } },\n    },\n};",locationsMap:{"source-api-vuejs--basic-sample":{startLoc:{col:27,line:20},endLoc:{col:1,line:26},startBody:{col:27,line:20},endBody:{col:1,line:26}}}}},"storySource",{source:"import VueJs from 'vue';\nimport '../assets/local.grid.scss';\nconst Vue = VueJs;\n\nconst {applyPolyfills, defineCustomElements} = require('@revolist/revogrid/loader');\nconst people = require('../assets/people').default;\n\nexport default {\n    title: 'Source Api/VueJs'\n};\n\nexport const basicSample = () => {\n    // storybook\n    const div = document.createElement('div');\n    setTimeout(() => vueJsGs(), 0);\n    div.setAttribute('id', 'app');\n    return div;\n};\n\nconst vueJsGs = () => {\n    // define custom element '<revo-grid/>', we can ignore applyPolyfills if we are not supporting IE11\n    applyPolyfills().then(() => { defineCustomElements(); });\n    Vue.config.ignoredElements = [/revo-\\w*/]; // Set ignore web-component and avoid parsing it as vuejs\n\n    Vue.component('revogrid-vue-wrapper', {\n        template: '<revo-grid class=\"grid-component\" :source.prop=\"source\" :columns.prop=\"columns\" :dimensions.prop=\"dimensions\"/>',\n        data() {\n            return {\n                columns: [{\n                    prop: 'name',\n                    name: 'Name'\n                },\n                {\n                    prop: 'eyeColor',\n                    name: 'Eyes',\n                    cellTemplate: (h, props) => {\n                        const text = props.model[props.prop];\n                        return h('div', {\n                            style: {\n                                backgroundColor: text\n                            },\n                            class: 'inner-cell'\n                        },  text);\n                    }\n                },\n                {\n                    prop: 'gender',\n                    name: 'Gender'\n                }],\n                source: people,\n                dimensions: {\n                    col: { 0: 500 }\n                }\n            };\n        }\n    });\n\n    new Vue({ render: h => h('revogrid-vue-wrapper') }).$mount('#app');\n};\n\nbasicSample.story = {\n    parameters: {\n        docs: { source: { code: vueJsGs } },\n    },\n};",locationsMap:{"source-api-vuejs--basic-sample":{startLoc:{col:27,line:12},endLoc:{col:1,line:18},startBody:{col:27,line:12},endBody:{col:1,line:18}}}}),title:"Source Api/VueJs"};var basicSample=function basicSample(){var div=document.createElement("div");return setTimeout((function(){return vueJsGs()}),0),div.setAttribute("id","app"),div},vueJsGs=function vueJsGs(){applyPolyfills().then((function(){defineCustomElements()})),Vue.config.ignoredElements=[/revo-\w*/],Vue.component("revogrid-vue-wrapper",{template:'<revo-grid class="grid-component" :source.prop="source" :columns.prop="columns" :dimensions.prop="dimensions"/>',data:function data(){return{columns:[{prop:"name",name:"Name"},{prop:"eyeColor",name:"Eyes",cellTemplate:function cellTemplate(h,props){var text=props.model[props.prop];return h("div",{style:{backgroundColor:text},class:"inner-cell"},text)}},{prop:"gender",name:"Gender"}],source:people,dimensions:{col:{0:500}}}}}),new Vue({render:function render(h){return h("revogrid-vue-wrapper")}}).$mount("#app")};basicSample.story={parameters:{docs:{source:{code:vueJsGs}}}}},function(module,exports,__webpack_require__){var api=__webpack_require__(416),content=__webpack_require__(417);"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.i,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},,function(module,exports,__webpack_require__){(exports=__webpack_require__(157)(!1)).push([module.i,".grid-component .data-header-cell,.grid-component .data-cell{text-align:left;padding-left:5px;box-sizing:border-box;line-height:30px}.grid-component .data-header-cell{font-weight:600}.grid-component .inner-cell{height:100%;margin-left:-5px}\n",""]),module.exports=exports},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_exports__.default=[{_id:"5ec13c23f162c4666bd7f94b",index:0,guid:"91f71a1a-be91-405d-8188-053018f54b9b",isActive:!0,balance:"$2,881.25",picture:"http://placehold.it/32x32",age:31,eyeColor:"brown",name:"Glenn Joyner",gender:"male",company:"SEALOUD",email:"glennjoyner@sealoud.com",phone:"+1 (920) 550-2198",registered:"2016-05-09T08:53:03 -03:00",latitude:-66.649239,longitude:44.056844,tags:["nulla","nostrud","magna","ullamco","nulla","excepteur","enim"],friends:[{id:0,name:"Johanna Cross"},{id:1,name:"Essie Fields"},{id:2,name:"Elma Holman"}],favoriteFruit:"apple"},{_id:"5ec13c23da1aa2365d9e8a8b",index:1,guid:"0bd64240-7bc4-4729-bbb3-b6c4d4dfbdbc",isActive:!1,balance:"$2,403.11",picture:"http://placehold.it/32x32",age:34,eyeColor:"brown",name:"Louella Walton",gender:"female",company:"SCENTRIC",email:"louellawalton@scentric.com",phone:"+1 (837) 420-2277",registered:"2016-07-17T09:04:29 -03:00",latitude:34.548482,longitude:87.248157,tags:["do","quis","in","cupidatat","ea","et","excepteur"],friends:[{id:0,name:"Mack Montgomery"},{id:1,name:"Kathryn Juarez"},{id:2,name:"Ramos Wagner"}],favoriteFruit:"apple"},{_id:"5ec13c236093d933e66fd9af",index:2,guid:"acbafbea-00ff-491d-aa71-468ee56ca685",isActive:!0,balance:"$3,325.45",picture:"http://placehold.it/32x32",age:31,eyeColor:"green",name:"Tate Arnold",gender:"male",company:"QUORDATE",email:"tatearnold@quordate.com",phone:"+1 (937) 462-3389",registered:"2018-03-22T08:50:19 -03:00",latitude:-28.290562,longitude:124.533512,tags:["occaecat","et","adipisicing","ipsum","non","aute","qui"],friends:[{id:0,name:"Farley Mercado"},{id:1,name:"Ada Moore"},{id:2,name:"Cooke Dunlap"}],favoriteFruit:"banana"},{_id:"5ec13c2344e542d27188179d",index:3,guid:"7077713a-ee13-4d4d-875a-979b8161724b",isActive:!0,balance:"$3,765.15",picture:"http://placehold.it/32x32",age:30,eyeColor:"brown",name:"Roberts Rodriquez",gender:"male",company:"ISOPLEX",email:"robertsrodriquez@isoplex.com",phone:"+1 (967) 407-2369",registered:"2015-02-24T04:27:00 -03:00",latitude:5.220362,longitude:26.106315,tags:["anim","eiusmod","consequat","nostrud","occaecat","consectetur","fugiat"],friends:[{id:0,name:"Tommie Keith"},{id:1,name:"Tracy Morton"},{id:2,name:"Maggie Ray"}],favoriteFruit:"apple"},{_id:"5ec13c23b700b292ab476d90",index:4,guid:"674bad02-176c-423b-981d-6a789f1c2dcb",isActive:!0,balance:"$3,784.68",picture:"http://placehold.it/32x32",age:40,eyeColor:"brown",name:"Castaneda Rush",gender:"male",company:"ZILLANET",email:"castanedarush@zillanet.com",phone:"+1 (846) 540-2685",registered:"2016-07-13T01:51:41 -03:00",latitude:58.671968,longitude:-70.173714,tags:["id","aliqua","reprehenderit","duis","ullamco","dolor","magna"],friends:[{id:0,name:"Cummings Lowe"},{id:1,name:"Warren Collier"},{id:2,name:"Franco House"}],favoriteFruit:"apple"},{_id:"5ec13c2345087059ff07ddf0",index:5,guid:"f41434a6-0257-4484-bf6c-8c560f1f6101",isActive:!0,balance:"$3,314.07",picture:"http://placehold.it/32x32",age:26,eyeColor:"green",name:"Houston Moss",gender:"male",company:"BUGSALL",email:"houstonmoss@bugsall.com",phone:"+1 (821) 470-3852",registered:"2016-11-27T04:57:22 -03:00",latitude:43.074177,longitude:157.809129,tags:["irure","velit","labore","eiusmod","incididunt","incididunt","incididunt"],friends:[{id:0,name:"Stacie Osborne"},{id:1,name:"Frieda Rollins"},{id:2,name:"Jordan Le"}],favoriteFruit:"banana"},{_id:"5ec13c2391510c543d0702a0",index:6,guid:"1a3577c9-a6aa-4ef4-9716-e25e20f7ea81",isActive:!1,balance:"$3,890.90",picture:"http://placehold.it/32x32",age:40,eyeColor:"green",name:"Walsh Wright",gender:"male",company:"AUSTECH",email:"walshwright@austech.com",phone:"+1 (822) 400-2613",registered:"2018-03-23T01:27:34 -03:00",latitude:-81.893187,longitude:-178.126848,tags:["eu","Lorem","dolore","est","mollit","in","proident"],friends:[{id:0,name:"Banks Frost"},{id:1,name:"Morgan Moreno"},{id:2,name:"Mathews Brooks"}],favoriteFruit:"apple"},{_id:"5ec13c23d8605a60a7ad5594",index:7,guid:"027ea26b-919f-4bcb-9cb3-ac9130b8e361",isActive:!0,balance:"$1,279.77",picture:"http://placehold.it/32x32",age:30,eyeColor:"brown",name:"Horn Conley",gender:"male",company:"GORGANIC",email:"hornconley@gorganic.com",phone:"+1 (874) 513-2515",registered:"2015-11-30T08:08:40 -03:00",latitude:-49.10309,longitude:-90.598443,tags:["culpa","enim","est","elit","aliqua","velit","nostrud"],friends:[{id:0,name:"Lancaster Osborn"},{id:1,name:"Stafford Hahn"},{id:2,name:"Doris Barnes"}],favoriteFruit:"strawberry"},{_id:"5ec13c2357bfa3f2018c9064",index:8,guid:"a79a3581-ebe6-4ab1-bb80-1d5177ec7e58",isActive:!1,balance:"$2,189.08",picture:"http://placehold.it/32x32",age:38,eyeColor:"brown",name:"Benton Houston",gender:"male",company:"OPPORTECH",email:"bentonhouston@opportech.com",phone:"+1 (999) 513-3112",registered:"2018-11-25T10:20:47 -03:00",latitude:22.516649,longitude:153.060989,tags:["esse","irure","esse","voluptate","non","laboris","do"],friends:[{id:0,name:"Curry Miles"},{id:1,name:"Bond Church"},{id:2,name:"Diana Spence"}],favoriteFruit:"apple"},{_id:"5ec13c23215e43d3dc60fab6",index:9,guid:"b06d57be-c9bd-4948-97fd-da5586cdecac",isActive:!0,balance:"$1,501.40",picture:"http://placehold.it/32x32",age:31,eyeColor:"green",name:"Maddox Simon",gender:"male",company:"COSMOSIS",email:"maddoxsimon@cosmosis.com",phone:"+1 (878) 490-3431",registered:"2015-03-24T01:04:38 -03:00",latitude:-76.034992,longitude:-10.098835,tags:["minim","Lorem","id","ea","reprehenderit","est","ad"],friends:[{id:0,name:"Klein Rosario"},{id:1,name:"Kelley Golden"},{id:2,name:"Selma Atkins"}],favoriteFruit:"strawberry"},{_id:"5ec13c2348eae42bf93c3e03",index:10,guid:"7b44b9e6-edb2-4922-8252-2798cd8d63ac",isActive:!0,balance:"$2,179.45",picture:"http://placehold.it/32x32",age:29,eyeColor:"green",name:"Adkins Meyer",gender:"male",company:"PLUTORQUE",email:"adkinsmeyer@plutorque.com",phone:"+1 (933) 536-2622",registered:"2015-09-04T02:29:45 -03:00",latitude:54.419076,longitude:-74.965435,tags:["duis","veniam","commodo","magna","proident","cillum","consectetur"],friends:[{id:0,name:"Queen Roach"},{id:1,name:"Roach Day"},{id:2,name:"Roslyn Patel"}],favoriteFruit:"apple"},{_id:"5ec13c23c0ea3d713018b223",index:11,guid:"b42db269-edfd-46bd-8d94-daf8bcde0953",isActive:!0,balance:"$1,247.67",picture:"http://placehold.it/32x32",age:28,eyeColor:"blue",name:"Johnnie Campos",gender:"female",company:"ZINCA",email:"johnniecampos@zinca.com",phone:"+1 (835) 454-2227",registered:"2015-12-14T02:08:15 -03:00",latitude:.735951,longitude:106.783763,tags:["nostrud","dolor","exercitation","dolore","nisi","tempor","dolore"],friends:[{id:0,name:"Fernandez Pugh"},{id:1,name:"Jeannette Navarro"},{id:2,name:"Casandra Finley"}],favoriteFruit:"banana"},{_id:"5ec13c23439276c056d107b5",index:12,guid:"596bc48a-322b-46dd-859b-ed72ff932ba4",isActive:!0,balance:"$1,162.22",picture:"http://placehold.it/32x32",age:35,eyeColor:"green",name:"Kline Griffith",gender:"male",company:"MICRONAUT",email:"klinegriffith@micronaut.com",phone:"+1 (854) 444-3735",registered:"2018-11-01T02:39:59 -03:00",latitude:12.961154,longitude:-92.519371,tags:["amet","irure","ipsum","commodo","sint","consequat","reprehenderit"],friends:[{id:0,name:"Peck Nicholson"},{id:1,name:"Lucinda Morrow"},{id:2,name:"Jodie Bates"}],favoriteFruit:"banana"},{_id:"5ec13c231d921172c47ba8b7",index:13,guid:"d96ac635-dff2-439b-a113-f4b4a269351b",isActive:!0,balance:"$1,382.14",picture:"http://placehold.it/32x32",age:23,eyeColor:"green",name:"Marina Cochran",gender:"female",company:"ECRATER",email:"marinacochran@ecrater.com",phone:"+1 (892) 488-3798",registered:"2014-10-08T05:50:55 -03:00",latitude:-21.500168,longitude:48.107494,tags:["anim","ad","nisi","esse","nisi","Lorem","aliqua"],friends:[{id:0,name:"Burgess Carlson"},{id:1,name:"Carly Franks"},{id:2,name:"Velazquez Hoffman"}],favoriteFruit:"banana"},{_id:"5ec13c23da8c56148019cf1d",index:14,guid:"b4a03b15-65b6-4a95-93d7-188aa36ab4b8",isActive:!0,balance:"$3,317.92",picture:"http://placehold.it/32x32",age:39,eyeColor:"green",name:"Faye Shaffer",gender:"female",company:"PROWASTE",email:"fayeshaffer@prowaste.com",phone:"+1 (866) 571-2922",registered:"2016-11-14T09:04:22 -03:00",latitude:-81.258016,longitude:-163.361102,tags:["elit","labore","excepteur","mollit","laborum","consectetur","deserunt"],friends:[{id:0,name:"Bullock Gilbert"},{id:1,name:"Strong Hendrix"},{id:2,name:"Bird Gentry"}],favoriteFruit:"banana"},{_id:"5ec13c23584fe7c959653b5c",index:15,guid:"e3c8a16d-e0c8-4116-aaff-37e35ad2c4eb",isActive:!1,balance:"$1,018.44",picture:"http://placehold.it/32x32",age:35,eyeColor:"green",name:"Petra Foster",gender:"female",company:"NIPAZ",email:"petrafoster@nipaz.com",phone:"+1 (840) 540-2053",registered:"2018-04-25T08:42:16 -03:00",latitude:69.214496,longitude:106.55659,tags:["esse","sunt","esse","amet","reprehenderit","ex","occaecat"],friends:[{id:0,name:"Ella Caldwell"},{id:1,name:"Deena Holcomb"},{id:2,name:"Brown Dillon"}],favoriteFruit:"apple"}]},function(module,exports,__webpack_require__){var map={"./gs.js.stories.mdx":420,"./gs.ts.stories.mdx":421,"./gs.vue.stories.mdx":422,"./overview.stories.mdx":423};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=419},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(2),__webpack_require__(32),__webpack_require__(26),__webpack_require__(9),__webpack_require__(4),__webpack_require__(29),__webpack_require__(21),__webpack_require__(62),__webpack_require__(63),__webpack_require__(7),__webpack_require__(27),__webpack_require__(1);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(3),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(25);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"Docs/Getting Started/JavaScript",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"getting-started"},"Getting Started"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:""}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"javascript"},"JavaScript"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"Define webcomponent ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"<revo-grid/>")," and you can access it property in natural way.\nCustom cell template as ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"cellTemplate")," provided. Source as an Array.\nCheck Show code for mode details."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{name:"JavaScript",id:"source-api-javascript--basic-sample",mdxType:"Story"})))}MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"Docs/Getting Started/JavaScript",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(2),__webpack_require__(32),__webpack_require__(26),__webpack_require__(9),__webpack_require__(4),__webpack_require__(29),__webpack_require__(21),__webpack_require__(62),__webpack_require__(63),__webpack_require__(7),__webpack_require__(27),__webpack_require__(1);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(3),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(25);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"Docs/Getting Started/TypeScript",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"getting-started"},"Getting Started"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:""}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"typescript"},"TypeScript"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"Define webcomponent ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"<revo-grid/>")," and you can access it property in natural way.\nWorks exactly same way as Vanilla Js, all typings supported from component folder. Source as an Object.\nCheck Show code for mode details."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{name:"TypeScript",id:"source-api-typescript--basic-sample",mdxType:"Story"})))}MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"Docs/Getting Started/TypeScript",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(2),__webpack_require__(32),__webpack_require__(26),__webpack_require__(9),__webpack_require__(4),__webpack_require__(29),__webpack_require__(21),__webpack_require__(62),__webpack_require__(63),__webpack_require__(7),__webpack_require__(27),__webpack_require__(1);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(3),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(25);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"Docs/Getting Started/Vue",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"getting-started"},"Getting Started"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:""}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"vue"},"Vue"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"Set ignore web-component as part of vuejs template: ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"Vue.config.ignoredElements = [/revo-\\w*/];"),".\nDefine webcomponent ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"<revo-grid/>"),' and you can access it in a "Vue way" for example as ',Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},'<revo-grid :source.prop="source"/>'),".\nCheck Show code for mode details."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{name:"JavaScript",id:"source-api-vuejs--basic-sample",mdxType:"Story"})))}MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"Docs/Getting Started/Vue",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(2),__webpack_require__(32),__webpack_require__(26),__webpack_require__(9),__webpack_require__(4),__webpack_require__(29),__webpack_require__(21),__webpack_require__(62),__webpack_require__(63),__webpack_require__(7),__webpack_require__(27),__webpack_require__(1);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(3),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(25);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(Meta,{title:"Docs/Overview",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"about-component"},"About component"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"RevoGrid component is fast virtual based grid developed based on ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"p"},{href:"https://stenciljs.com/docs/introduction",target:"_blank",rel:"nofollow noopener noreferrer"}),"StencilJs framework"),".\nFully reactive component for fast speed data representation which is working with almost every popular framework or without it."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"installing"},"Installing"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"Integrating a component to a project without a JavaScript framework is straight forward.\nIf you're using a simple HTML page, you can add RevoGrid via a script tag."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"For example, we could load the component through unpkg like this:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),'<script src="https://unpkg.com/@revolist/revogrid@latest/dist/revo-grid.js"><\/script>\n')),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"Or you can install RevoGrid with ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"p"},{href:"https://www.npmjs.com/package/@revolist/revogrid",target:"_blank",rel:"nofollow noopener noreferrer"}),"NPM"),":"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"NPM: ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"npm i @revolist/revogrid --save"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"And import it as ES Module or from local node_modules directory:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"import { applyPolyfills, defineCustomElements } from '@revolist/revogrid/loader';\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"Alternatively, if you wanted to take advantage of ES Modules, you could include the components using an import statement.\nNote that in this scenario ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"applyPolyfills")," is needed if you are targeting Edge or IE11."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),'<script type="module">\n    import { applyPolyfills, defineCustomElements } from "https://unpkg.com/@revolist/revogrid@latest/loader";\n    applyPolyfills().then(() => {\n      defineCustomElements();\n    });\n<\/script>\n')))}MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"Docs/Overview",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta}],[[159,2,3]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzdG9yeWJvb2tfZG9jc19kbGxcIiIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2dsb2JhbC93aW5kb3cuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3BvbGlzaGVkL2Rpc3QvcG9saXNoZWQuZXNtLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi90cy1kZWRlbnQvZGlzdC9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJvbGQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vQHN0b3J5Ym9vay9jc2YvZGlzdC9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9tZW1vaXplcmlmaWMvbWVtb2l6ZXJpZmljLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vd2VicGFjay9idWlsZGluL21vZHVsZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL21hcmtkb3duLXRvLWpzeC9kaXN0L2VzbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtaW50LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5ldmVyeS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24uYmluZC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc2V0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3FzL2xpYi9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9AZW1vdGlvbi9jb3JlL2Rpc3QvY29yZS5icm93c2VyLmVzbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuY29uc3RydWN0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9fYmFzZUl0ZXJhdGVlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vYWlyYm5iLWpzLXNoaW1zL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vLi8uc3Rvcnlib29rL3N0b3J5Ym9vay1pbml0LWZyYW1ld29yay1lbnRyeS5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLndlYWstbWFwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9tZXJnZVdpdGguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9sb2Rhc2gvbG9kYXNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi90ZWxlanNvbi9kaXN0L2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QtZG9tL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL0BlbW90aW9uL3N0eWxlZC9kaXN0L3N0eWxlZC5icm93c2VyLmVzbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9lbW90aW9uLXRoZW1pbmcvZGlzdC9lbW90aW9uLXRoZW1pbmcuYnJvd3Nlci5lc20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vQGVtb3Rpb24vaXMtcHJvcC12YWxpZC9kaXN0L2lzLXByb3AtdmFsaWQuYnJvd3Nlci5lc20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vZGVlcC1vYmplY3QtZGlmZi9kaXN0L2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vanN4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vYmFzaC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvbGFuZ3VhZ2VzL3ByaXNtL2Nzcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvbGFuZ3VhZ2VzL3ByaXNtL2pzb24uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS9tYXJrdXAuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS9tYXJrZG93bi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvbGFuZ3VhZ2VzL3ByaXNtL3lhbWwuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS90c3guanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS90eXBlc2NyaXB0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2VzbS9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvY3JlYXRlLWVsZW1lbnQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vb3ZlcmxheXNjcm9sbGJhcnMtcmVhY3QvZGlzdC9vdmVybGF5c2Nyb2xsYmFycy1yZWFjdC5lc20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zbWFsbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS9kaXN0L3JlYWN0LXRleHRhcmVhLWF1dG9zaXplLmVzbS5icm93c2VyLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXBvcHBlci10b29sdGlwL2Rpc3QvZXNtL3JlYWN0LXBvcHBlci10b29sdGlwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LWNvbG9yL2xpYi9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLW5hbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtZmxvYXQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zZWxlY3QvZGlzdC9yZWFjdC1zZWxlY3QuYnJvd3Nlci5lc20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vZmFzdC1kZWVwLWVxdWFsL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL29iamVjdC1hc3NpZ24vaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcHJvY2Vzcy9icm93c2VyLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9fYmFzZUFzc2lnblZhbHVlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9fYmFzZUZvck93bi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9fYXJyYXlNYXAuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbG9kYXNoL19iYXNlUGlja0J5LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9fZ2V0QWxsS2V5c0luLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvaXMtcmVnZXhwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vLi8uc3Rvcnlib29rL3ByZXZpZXcuanMtZ2VuZXJhdGVkLWNvbmZpZy1lbnRyeS5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vLy4vLnN0b3J5Ym9vay9wcmV2aWV3LmpzIiwid2VicGFjazovLy8uL3N0b3JpZXMvZ2xvYmFsLmNzcz9iOWE0Iiwid2VicGFjazovLy8uL3N0b3JpZXMvZ2xvYmFsLmNzcyIsIndlYnBhY2s6Ly8vLi8uc3Rvcnlib29rL2dlbmVyYXRlZC1zdG9yaWVzLWVudHJ5LmpzIiwid2VicGFjazovLy9cXC4pKD82OWVhIiwid2VicGFjazovLy8uL3N0b3JpZXMvanMtZ3JpZC5zdG9yaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmV2b2xpc3QvcmV2b2dyaWQvZGlzdC9lc20tZXM1IGxhenkgXlxcLlxcLy4qXFwuZW50cnlcXC5qcyQgaW5jbHVkZTogXFwuZW50cnlcXC5qcyQgZXhjbHVkZTogXFwuc3lzdGVtXFwuZW50cnlcXC5qcyQgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzL3RzLWdyaWQuc3Rvcmllcy50cyIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzL3Z1ZWpzLnN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2xvY2FsLmdyaWQuc2Nzcz83NDdhIiwid2VicGFjazovLy8uL2Fzc2V0cy9sb2NhbC5ncmlkLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3Blb3BsZS5qcyIsIndlYnBhY2s6Ly8vXFwuKSgiLCJ3ZWJwYWNrOi8vLy4vZG9jcy9ncy5qcy5zdG9yaWVzLm1keCIsIndlYnBhY2s6Ly8vLi9kb2NzL2dzLnRzLnN0b3JpZXMubWR4Iiwid2VicGFjazovLy8uL2RvY3MvZ3MudnVlLnN0b3JpZXMubWR4Iiwid2VicGFjazovLy8uL2RvY3Mvb3ZlcnZpZXcuc3Rvcmllcy5tZHgiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInN0b3J5Ym9va19kb2NzX2RsbCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfY2xpZW50QXBpIiwicmVxdWlyZSIsIl9jbGllbnRMb2dnZXIiLCJfY29uZmlnRmlsZW5hbWUiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImZvckVhY2giLCJrZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5Iiwib2JqIiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZ3MiLCJhcmdUeXBlcyIsImxvZ2dlciIsIndhcm4iLCJKU09OIiwic3RyaW5naWZ5IiwiZGVjb3JhdG9ycyIsImRlY29yYXRvciIsImFkZERlY29yYXRvciIsInBhcmFtZXRlcnMiLCJnbG9iYWxBcmdzIiwiZ2xvYmFsQXJnVHlwZXMiLCJhZGRQYXJhbWV0ZXJzIiwiYXJnVHlwZXNFbmhhbmNlcnMiLCJlbmhhbmNlciIsImFkZEFyZ1R5cGVzRW5oYW5jZXIiLCJvcHRpb25zIiwic2hvd1Jvb3RzIiwiZGVwZW5kZW5jaWVzIiwid2l0aFN0b3JpZXNPbmx5IiwiaGlkZUVtcHR5Iiwic3RvcnlTb3J0IiwiYSIsImIiLCJraW5kIiwiaWQiLCJsb2NhbGVDb21wYXJlIiwidW5kZWZpbmVkIiwibnVtZXJpYyIsInN0b3J5IiwidGFsZSIsInN0b3J5QXNTdHJpbmciLCJzdG9yeUFzTm9kZSIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiY3NzIiwiYXBwZW5kQ2hpbGQiLCJ0eXBlIiwiY3JlYXRlVGV4dE5vZGUiLCJ3cmFwcGVyIiwiY2xhc3NOYW1lIiwic3R5bGVzIiwidG9TdHJpbmciLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJfZnJhbWV3b3JrIiwiX1N0b3J5Ym9va1ByZXNlcnZlRGVjb3JhdG9ycyIsImNvbmZpZ3VyZSIsIm1hcCIsIndlYnBhY2tDb250ZXh0IiwicmVxIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwibyIsImUiLCJFcnJvciIsImNvZGUiLCJ3ZWJwYWNrQ29udGV4dEtleXMiLCJyZXNvbHZlIiwiYXBwbHlQb2x5ZmlsbHMiLCJkZWZpbmVDdXN0b21FbGVtZW50cyIsInRpdGxlIiwiYmFzaWNTYW1wbGUiLCJnZW5lcmF0ZUhlYWRlciIsImluZGV4IiwibW9kdWxvIiwiZGl2aWRlbmQiLCJjb2x1bW5MYWJlbCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInBhcnNlSW50IiwidGhlbiIsImRpdiIsImlubmVySFRNTCIsImdyaWQiLCJxdWVyeVNlbGVjdG9yIiwiZGF0YSIsImdlbmVyYXRlRmFrZURhdGEiLCJyb3dzTnVtYmVyIiwiY29sc051bWJlciIsInJlc3VsdCIsInJvd01pbiIsImhlYWRlcnMiLCJqIiwicHJvcCIsIm5hbWUiLCJjZWxsVGVtcGxhdGUiLCJoIiwicHJvcHMiLCJ0ZXh0IiwibW9kZWwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjbGFzcyIsInJvd3MiLCJjb2x1bW5zIiwid2VicGFja0FzeW5jQ29udGV4dCIsIlByb21pc2UiLCJpZHMiLCJ3ZWJwYWNrQXN5bmNDb250ZXh0S2V5cyIsImdlbmVyYXRlRmFrZURhdGFPYmplY3QiLCJhbGwiLCJjb2wiLCJyb3ciLCJWdWUiLCJWdWVKcyIsInBlb3BsZSIsInNldFRpbWVvdXQiLCJ2dWVKc0dzIiwic2V0QXR0cmlidXRlIiwiY29uZmlnIiwiaWdub3JlZEVsZW1lbnRzIiwiY29tcG9uZW50IiwidGVtcGxhdGUiLCJkaW1lbnNpb25zIiwiMCIsInJlbmRlciIsIiRtb3VudCIsImRvY3MiLCJhcGkiLCJjb250ZW50IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJsb2NhbHMiLCJsYXlvdXRQcm9wcyIsIk1EWENvbnRlbnQiLCJjb21wb25lbnRzIiwibWR4VHlwZSIsInBhcmVudE5hbWUiLCJpc01EWENvbXBvbmVudCIsIl9fcGFnZSIsImRvY3NPbmx5IiwiY29tcG9uZW50TWV0YSIsImluY2x1ZGVTdG9yaWVzIiwibWR4U3RvcnlOYW1lVG9LZXkiLCJwYWdlIiwibWR4Q29tcG9uZW50TWV0YSIsIk1ldGEiLCJtYWtlU2hvcnRjb2RlIiwiTURYRGVmYXVsdFNob3J0Y29kZSIsImNvbnNvbGUiXSwibWFwcGluZ3MiOiJrRkFBQUEsT0FBT0MsUUFBVUMsb0IsNkNDQWpCRixPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDhDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUywrQ0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyx1RENBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsbURDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsK0NDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyxrRENBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsa0RDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDhDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLCtDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLG9EQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLHdEQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsMERDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLHVXQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkRDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw0RUNBMUMscUUsa0RDQUFILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUywrQ0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLHNEQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUywyRENBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDhDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyxrRENBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsK0NDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDRFQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsK0NDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLGtFQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2RENBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUywrQ0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyxrRUNBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkND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cEMsNkRBQVEsQ0FDTixHQUFNLG1CQURSLG1CQUdBLHFJQUF3RSxzRUFBR0MsV0FBVyxLQUFRLENBQzFGLEtBQVEsMENBQ1IsT0FBVSxTQUNWLElBQU8saUNBSDZELHVCQUF4RSxzSUFNQSw2REFBUSxDQUNOLEdBQU0sY0FEUixjQUdBLHlPQUVBLHNJQUNBLG1FQUFLLHlFQUFNQSxXQUFXLE9BQVUsQ0FDNUIsVUFBYSxnQkFEWiw2RkFJTCxxR0FBd0Msc0VBQUdBLFdBQVcsS0FBUSxDQUMxRCxLQUFRLG1EQUNSLE9BQVUsU0FDVixJQUFPLGlDQUg2QixPQUF4QyxLQUtBLGtFQUNFLDhEQUFJQSxXQUFXLE1BQWYsUUFBNkIsc0VBQVlBLFdBQVcsTUFBdkIscUNBRS9CLHFJQUNBLG1FQUFLLHlFQUFNQSxXQUFXLE9BQVUsQ0FDNUIsVUFBYSxnQkFEWix3RkFJTCwwTkFDeUIsc0VBQVlBLFdBQVcsS0FBdkIsa0JBRHpCLGlEQUVBLG1FQUFLLHlFQUFNQSxXQUFXLE9BQVUsQ0FDNUIsVUFBYSxnQkFEWixxT0FhVEgsV0FBV0ksZ0JBQWlCLEVBRXJCLElBQU1DLE9BQVMsU0FBVEEsU0FBaUIsTUFBTSxJQUFJMUUsTUFBTSxvQkFFOUMwRSxPQUFPckcsTUFBUSxDQUFFcEIsV0FBWSxDQUFFMEgsVUFBVSxJQUV6QyxJQUFNQyxjQUFnQixDQUFFdEUsTUFBTyxnQkFBaUJ1RSxlQUFnQixDQUFDLFdBRTNEQyxrQkFBb0IsR0FFMUJGLGNBQWMzSCxXQUFhMkgsY0FBYzNILFlBQWMsR0FDdkQySCxjQUFjM0gsV0FBVzZHLEtBQXpCLCtCQUNNYyxjQUFjM0gsV0FBVzZHLE1BQVEsSUFEdkMsSUFFRWlCLEtBQU0sdUJBQU0sd0RBQUMsc0VBQUQsQ0FBWUQsa0JBQW1CQSxrQkFBbUJFLGlCQUFrQkosZUFBZSx3REFBQ1AsV0FBRCxVQUdsRk8sNEMiLCJmaWxlIjoibWFpbi5kNzE4MTE0MzAwZWQ1ZThjYWM5Yy5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHN0b3J5Ym9va19kb2NzX2RsbDsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkVSa1BcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCIxdDdQXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiSUFkRFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImhvMHpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCIrS1hPXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwialEveVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcInZyUmZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCI3eC9DXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwicGxCd1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIk0rL0ZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJ6ODRJXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwibFRFTFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIjg3aWZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJrWXhQXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiMkc5U1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkRaK2NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJhTGdvXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiY0FST1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIlV2bUJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJLcVh3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiaENPYVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIk55TVlcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJqd3VlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiK294WlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImFva0FcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJFZ1JQXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwibE41QlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkxXMGhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJ5SC9mXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiWXNnaFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkEzVVFcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCIxSXVjXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiN3hSVVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIlljdDVcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJaVmtCXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiS090WlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcInZiRHdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJNdlVMXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiMUlzWlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImpRM2lcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJhWVNyXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiV05NQVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIng0dDBcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJKdFBmXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiUDJhR1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImhCcEdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJheDBmXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwidFZxblwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImZSVjFcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCIzeVlNXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiNW80M1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImN0ODBcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCI2VTdpXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiQ200b1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcInNWRmJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJDVU1RXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiQmxtNlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIjFNdS9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCIra1k3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiOUpoTlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIjVCWWJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCIvUW9zXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiRGZoTVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIjU4NzhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJMcUxzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiTEpPclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcInB1M29cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJsMUMyXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiajRTZlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkxVd2RcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJPWmFKXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiUzNwQVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIk40ejNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJHRnB0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiQVJ1YVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIlBqWlhcIik7IiwiaW1wb3J0ICdAc3Rvcnlib29rL2h0bWwnOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiSlkrQ1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIlpVZEdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJQdUl4XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiaHBkeVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIk45RzJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJmNHA3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwibnNPN1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImRTYUdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJoUWluXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiaXU5MFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIk90V1lcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCI3bm1UXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiTEo3ZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkkyZktcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJEWTQ3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiM2twOVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIi9iYzJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCIvSnVSXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiK0J4dlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIm11RnhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJXY2k2XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiV29SVVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIm8zZlNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJKbVRpXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwieGFpUlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIlNsRC9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJNb25uXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiQS8yT1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcInVGWGpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJtbVVqXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiT0NTbFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImtBNHJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJzc3ZVXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwibFptM1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkVlMlhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJCR1RpXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiYjJlM1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIm1hajhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJGNjNpXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwid0MzS1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcInpLa3ZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCIzdm9IXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiSDg3SlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIk8xU2NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJ6RjVuXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiNjZ3UVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImo2bkhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJxOStsXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiWmRCQlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImpsMC9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJxLzBWXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiTDJyVFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcInVMcDdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJ6YzI5XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiQ2g2eVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImZWTWdcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfY2xpZW50QXBpID0gcmVxdWlyZShcIkBzdG9yeWJvb2svY2xpZW50LWFwaVwiKTtcblxudmFyIF9jbGllbnRMb2dnZXIgPSByZXF1aXJlKFwiQHN0b3J5Ym9vay9jbGllbnQtbG9nZ2VyXCIpO1xuXG52YXIgX2NvbmZpZ0ZpbGVuYW1lID0gcmVxdWlyZShcIi9Vc2Vycy9tYWtzL1Byb2plY3RzL2RlbW8vcmV2b2dyaWRqcy8uc3Rvcnlib29rL3ByZXZpZXcuanNcIik7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pZiAoX2NvbmZpZ0ZpbGVuYW1lLmFyZ3MgfHwgX2NvbmZpZ0ZpbGVuYW1lLmFyZ1R5cGVzKSB7XG4gIF9jbGllbnRMb2dnZXIubG9nZ2VyLndhcm4oJ0ludmFsaWQgYXJncy9hcmdUeXBlcyBpbiBjb25maWcsIGlnbm9yaW5nLicsIEpTT04uc3RyaW5naWZ5KHtcbiAgICBhcmdzOiBfY29uZmlnRmlsZW5hbWUuYXJncyxcbiAgICBhcmdUeXBlczogX2NvbmZpZ0ZpbGVuYW1lLmFyZ1R5cGVzXG4gIH0pKTtcbn1cblxuaWYgKF9jb25maWdGaWxlbmFtZS5kZWNvcmF0b3JzKSB7XG4gIF9jb25maWdGaWxlbmFtZS5kZWNvcmF0b3JzLmZvckVhY2goZnVuY3Rpb24gKGRlY29yYXRvcikge1xuICAgIHJldHVybiAoMCwgX2NsaWVudEFwaS5hZGREZWNvcmF0b3IpKGRlY29yYXRvcik7XG4gIH0pO1xufVxuXG5pZiAoX2NvbmZpZ0ZpbGVuYW1lLnBhcmFtZXRlcnMgfHwgX2NvbmZpZ0ZpbGVuYW1lLmdsb2JhbEFyZ3MgfHwgX2NvbmZpZ0ZpbGVuYW1lLmdsb2JhbEFyZ1R5cGVzKSB7XG4gICgwLCBfY2xpZW50QXBpLmFkZFBhcmFtZXRlcnMpKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX2NvbmZpZ0ZpbGVuYW1lLnBhcmFtZXRlcnMpLCB7fSwge1xuICAgIGdsb2JhbEFyZ3M6IF9jb25maWdGaWxlbmFtZS5nbG9iYWxBcmdzLFxuICAgIGdsb2JhbEFyZ1R5cGVzOiBfY29uZmlnRmlsZW5hbWUuZ2xvYmFsQXJnVHlwZXNcbiAgfSkpO1xufVxuXG5pZiAoX2NvbmZpZ0ZpbGVuYW1lLmFyZ1R5cGVzRW5oYW5jZXJzKSB7XG4gIF9jb25maWdGaWxlbmFtZS5hcmdUeXBlc0VuaGFuY2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChlbmhhbmNlcikge1xuICAgIHJldHVybiAoMCwgX2NsaWVudEFwaS5hZGRBcmdUeXBlc0VuaGFuY2VyKShlbmhhbmNlcik7XG4gIH0pO1xufSIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwib0Q0dFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIjJzWjdcIik7IiwiaW1wb3J0IHthZGREZWNvcmF0b3IsIGFkZFBhcmFtZXRlcnN9IGZyb20gJ0BzdG9yeWJvb2svY2xpZW50LWFwaSc7XG5cbmFkZFBhcmFtZXRlcnMoe1xuICAgIG9wdGlvbnM6IHtcbiAgICAgICAgc2hvd1Jvb3RzOiB0cnVlXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IHtcbiAgICAgICAgLy9kaXNwbGF5IG9ubHkgZGVwZW5kZW5jaWVzL2RlcGVuZGVudHMgdGhhdCBoYXZlIGEgc3RvcnkgaW4gc3Rvcnlib29rXG4gICAgICAgIC8vYnkgZGVmYXVsdCB0aGlzIGlzIGZhbHNlXG4gICAgICAgIHdpdGhTdG9yaWVzT25seTogdHJ1ZSxcblxuICAgICAgICAvL2NvbXBsZXRlbHkgaGlkZSBhIGRlcGVuZGVuY3kvZGVwZW5kZW50cyBibG9jayBpZiBpdCBoYXMgbm8gZWxlbWVudHNcbiAgICAgICAgLy9ieSBkZWZhdWx0IHRoaXMgaXMgZmFsc2VcbiAgICAgICAgaGlkZUVtcHR5OiB0cnVlLFxuICAgIH1cbn0pO1xuXG5hZGRQYXJhbWV0ZXJzKHtcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIHN0b3J5U29ydDogKGEsIGIpID0+XG4gICAgICAgICAgICBhWzFdLmtpbmQgPT09IGJbMV0ua2luZCA/IDAgOiBhWzFdLmlkLmxvY2FsZUNvbXBhcmUoYlsxXS5pZCwgdW5kZWZpbmVkLCB7IG51bWVyaWM6IHRydWUgfSksXG4gICAgfSxcbn0pO1xuXG5jb25zdCBzdG9yeUFzU3RyaW5nID0gKHN0b3J5KSA9PiBgPGRpdiBjbGFzcz0nY29udGFpbmVyIG0tNSc+JHtzdG9yeX08L2Rpdj5gO1xuY29uc3Qgc3RvcnlBc05vZGUgPSAoc3RvcnkpID0+IHtcbiAgICBjb25zdCBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBjb25zdCBjc3MgPSByZXF1aXJlKCchY3NzLXRvLXN0cmluZy1sb2FkZXIhY3NzLWxvYWRlciEuLi9zdG9yaWVzL2dsb2JhbC5jc3MnKTtcbiAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcblxuICAgIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXG5cbiAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgd3JhcHBlci5jbGFzc05hbWUgPSAnY29udGFpbmVyIG0tNSc7XG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChzdG9yeSk7XG4gICAgcmV0dXJuIHdyYXBwZXI7XG59O1xuXG5hZGREZWNvcmF0b3Ioc3RvcnkgPT4ge1xuICAgIGNvbnN0IHRhbGUgPSBzdG9yeSgpO1xuICAgIHJldHVybiB0eXBlb2YgdGFsZSA9PT0gJ3N0cmluZycgPyBzdG9yeUFzU3RyaW5nKHRhbGUpIDogc3RvcnlBc05vZGUodGFsZSk7XG59KTtcbiIsIi8vIGNzcy10by1zdHJpbmctbG9hZGVyOiB0cmFuc2Zvcm1zIHN0eWxlcyBmcm9tIGNzcy1sb2FkZXIgdG8gYSBzdHJpbmcgb3V0cHV0XG5cbi8vIEdldCB0aGUgc3R5bGVzXG52YXIgc3R5bGVzID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9nbG9iYWwuY3NzXCIpO1xuXG5pZiAodHlwZW9mIHN0eWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgLy8gUmV0dXJuIGFuIGV4aXN0aW5nIHN0cmluZ1xuICBtb2R1bGUuZXhwb3J0cyA9IHN0eWxlcztcbn0gZWxzZSB7XG4gIC8vIENhbGwgdGhlIGN1c3RvbSB0b1N0cmluZyBtZXRob2QgZnJvbSBjc3MtbG9hZGVyIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IHN0eWxlcy50b1N0cmluZygpO1xufSIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJib2R5LFxcbmh0bWwge1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XFxuICAgIG1hcmdpbjogMCAhaW1wb3J0YW50O1xcbn1cXG5cXG4jcm9vdCB7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLmdyaWQtY29tcG9uZW50IHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ZyYW1ld29yayA9IHJlcXVpcmUoXCJAc3Rvcnlib29rL2h0bWxcIik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZVxubW9kdWxlLl9TdG9yeWJvb2tQcmVzZXJ2ZURlY29yYXRvcnMgPSB0cnVlO1xuKDAsIF9mcmFtZXdvcmsuY29uZmlndXJlKShbcmVxdWlyZS5jb250ZXh0KCcuLi9zdG9yaWVzJywgdHJ1ZSwgL14oPzooPzpcXC5bXFxcXC9dKD89LikpPyg/Oig/IVxcLikoPzooPyEoPzpbXFxcXC9dfF4pXFwuKS4pKj9bXFxcXC9dKT8oPyFcXC4pKD89LilbXlxcXFwvXSo/XFwuc3Rvcmllc1xcLihbdGpdKHN8c3gpfG1keCkoPzpbXFxcXC9dfCQpKSQvKSxyZXF1aXJlLmNvbnRleHQoJy4uL2RvY3MnLCB0cnVlLCAvXig/Oig/OlxcLltcXFxcL10oPz0uKSk/KD86KD8hXFwuKSg/Oig/ISg/OltcXFxcL118XilcXC4pLikqP1tcXFxcL10pPyg/IVxcLikoPz0uKVteXFxcXC9dKj9cXC5zdG9yaWVzXFwubWR4KD86W1xcXFwvXXwkKSkkLyldLCBtb2R1bGUpOyIsInZhciBtYXAgPSB7XG5cdFwiLi9qcy1ncmlkLnN0b3JpZXMuanNcIjogNDExLFxuXHRcIi4vdHMtZ3JpZC5zdG9yaWVzLnRzXCI6IDQxMyxcblx0XCIuL3Z1ZWpzLnN0b3JpZXMuanNcIjogNDE0XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gNDEwOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImNvbnN0IHthcHBseVBvbHlmaWxscywgZGVmaW5lQ3VzdG9tRWxlbWVudHN9ID0gcmVxdWlyZSgnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcicpO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJ1NvdXJjZSBBcGkvSmF2YVNjcmlwdCdcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcXFxcbiAgICAvLyBkZWZpbmUgY3VzdG9tIGVsZW1lbnQgJzxyZXZvLWdyaWQvPicsIHdlIGNhbiBpZ25vcmUgYXBwbHlQb2x5ZmlsbHMgaWYgd2UgYXJlIG5vdCBzdXBwb3J0aW5nIElFMTFcXFxcbiAgICBhcHBseVBvbHlmaWxscygpLnRoZW4oKCkgPT4ge1xcXFxuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50cygpO1xcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgLy8gaGVhZGVyIGxhYmVscyBnZW5lcmF0aW9uXFxcXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVIZWFkZXIoaW5kZXgpIHtcXFxcbiAgICAgICAgbGV0IGRpdmlkZW5kID0gaW5kZXggKyAxO1xcXFxuICAgICAgICBsZXQgY29sdW1uTGFiZWwgPSAnJztcXFxcbiAgICAgICAgbGV0IG1vZHVsbztcXFxcbiAgICAgICAgd2hpbGUgKGRpdmlkZW5kID4gMCkge1xcXFxuICAgICAgICAgICAgbW9kdWxvID0gKGRpdmlkZW5kIC0gMSkgJSAyNjtcXFxcbiAgICAgICAgICAgIGNvbHVtbkxhYmVsID0gU3RyaW5nLmZyb21DaGFyQ29kZSg2NSArIG1vZHVsbykgKyBjb2x1bW5MYWJlbDtcXFxcbiAgICAgICAgICAgIGRpdmlkZW5kID0gcGFyc2VJbnQoKChkaXZpZGVuZCAtIG1vZHVsbykgLyAyNikudG9TdHJpbmcoKSwgMTApO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiBjb2x1bW5MYWJlbDtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICAvLyBmYWtlIGRhdGEgZ2VuZXJhdGlvbiBhcyBBcnJheSBpbnB1dCBzb3VyY2VcXFxcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUZha2VEYXRhKHJvd3NOdW1iZXIsIGNvbHNOdW1iZXIpIHtcXFxcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XFxcXG4gICAgICAgIGNvbnN0IHJvd01pbiA9IFtdO1xcXFxuICAgICAgICBjb25zdCBoZWFkZXJzID0gW107XFxcXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sc051bWJlcjsgaisrKSB7XFxcXG4gICAgICAgICAgICByb3dNaW4ucHVzaChqKTtcXFxcbiAgICAgICAgICAgIGhlYWRlcnMucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgcHJvcDogaixcXFxcbiAgICAgICAgICAgICAgICBuYW1lOiBnZW5lcmF0ZUhlYWRlcihqKSxcXFxcbiAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6IChoLCBwcm9wcykgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gcHJvcHMubW9kZWxbcHJvcHMucHJvcF07XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoKCdkaXYnLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaiU0ID8gdW5kZWZpbmVkIDogJ2dyYXknXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdpbm5lci1jZWxsJ1xcXFxuICAgICAgICAgICAgICAgICAgICB9LCAgdGV4dCk7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dzTnVtYmVyOyBpKyspIHtcXFxcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJvd01pbik7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgIHJvd3M6IHJlc3VsdCxcXFxcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcXFxcbiAgICAgICAgfTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcXFxcbiAgICBkaXYuaW5uZXJIVE1MID0gJzxyZXZvLWdyaWQgY2xhc3M9XFxcXFxcXCJncmlkLWNvbXBvbmVudFxcXFxcXFwiPjwvcmV2by1ncmlkPic7XFxcXG4gICAgY29uc3QgZ3JpZCA9IGRpdi5xdWVyeVNlbGVjdG9yKCdyZXZvLWdyaWQnKTtcXFxcblxcXFxuICAgIGlmIChncmlkKSB7XFxcXG4gICAgICAgIGNvbnN0IGRhdGEgPSBnZW5lcmF0ZUZha2VEYXRhKDEwMDAsIDEwMCk7XFxcXG4gICAgICAgIGdyaWQuY29sdW1ucyA9IGRhdGEuaGVhZGVycztcXFxcbiAgICAgICAgZ3JpZC5zb3VyY2UgPSBkYXRhLnJvd3M7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgcmV0dXJuIGRpdjtcXFxcbn07XFxcXG5cXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwic291cmNlLWFwaS1qYXZhc2NyaXB0LS1iYXNpYy1zYW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjoyNyxcXFwibGluZVxcXCI6OH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY4fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MjcsXFxcImxpbmVcXFwiOjh9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6Njh9fX07XFxuICAgIFxcbmNvbnN0IHthcHBseVBvbHlmaWxscywgZGVmaW5lQ3VzdG9tRWxlbWVudHN9ID0gcmVxdWlyZSgnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcicpO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImNvbnN0IHthcHBseVBvbHlmaWxscywgZGVmaW5lQ3VzdG9tRWxlbWVudHN9ID0gcmVxdWlyZSgnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcicpO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJ1NvdXJjZSBBcGkvSmF2YVNjcmlwdCdcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcXFxcbiAgICAvLyBkZWZpbmUgY3VzdG9tIGVsZW1lbnQgJzxyZXZvLWdyaWQvPicsIHdlIGNhbiBpZ25vcmUgYXBwbHlQb2x5ZmlsbHMgaWYgd2UgYXJlIG5vdCBzdXBwb3J0aW5nIElFMTFcXFxcbiAgICBhcHBseVBvbHlmaWxscygpLnRoZW4oKCkgPT4ge1xcXFxuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50cygpO1xcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgLy8gaGVhZGVyIGxhYmVscyBnZW5lcmF0aW9uXFxcXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVIZWFkZXIoaW5kZXgpIHtcXFxcbiAgICAgICAgbGV0IGRpdmlkZW5kID0gaW5kZXggKyAxO1xcXFxuICAgICAgICBsZXQgY29sdW1uTGFiZWwgPSAnJztcXFxcbiAgICAgICAgbGV0IG1vZHVsbztcXFxcbiAgICAgICAgd2hpbGUgKGRpdmlkZW5kID4gMCkge1xcXFxuICAgICAgICAgICAgbW9kdWxvID0gKGRpdmlkZW5kIC0gMSkgJSAyNjtcXFxcbiAgICAgICAgICAgIGNvbHVtbkxhYmVsID0gU3RyaW5nLmZyb21DaGFyQ29kZSg2NSArIG1vZHVsbykgKyBjb2x1bW5MYWJlbDtcXFxcbiAgICAgICAgICAgIGRpdmlkZW5kID0gcGFyc2VJbnQoKChkaXZpZGVuZCAtIG1vZHVsbykgLyAyNikudG9TdHJpbmcoKSwgMTApO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiBjb2x1bW5MYWJlbDtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICAvLyBmYWtlIGRhdGEgZ2VuZXJhdGlvbiBhcyBBcnJheSBpbnB1dCBzb3VyY2VcXFxcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUZha2VEYXRhKHJvd3NOdW1iZXIsIGNvbHNOdW1iZXIpIHtcXFxcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XFxcXG4gICAgICAgIGNvbnN0IHJvd01pbiA9IFtdO1xcXFxuICAgICAgICBjb25zdCBoZWFkZXJzID0gW107XFxcXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sc051bWJlcjsgaisrKSB7XFxcXG4gICAgICAgICAgICByb3dNaW4ucHVzaChqKTtcXFxcbiAgICAgICAgICAgIGhlYWRlcnMucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgcHJvcDogaixcXFxcbiAgICAgICAgICAgICAgICBuYW1lOiBnZW5lcmF0ZUhlYWRlcihqKSxcXFxcbiAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6IChoLCBwcm9wcykgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gcHJvcHMubW9kZWxbcHJvcHMucHJvcF07XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoKCdkaXYnLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaiU0ID8gdW5kZWZpbmVkIDogJ2dyYXknXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdpbm5lci1jZWxsJ1xcXFxuICAgICAgICAgICAgICAgICAgICB9LCAgdGV4dCk7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dzTnVtYmVyOyBpKyspIHtcXFxcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJvd01pbik7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgIHJvd3M6IHJlc3VsdCxcXFxcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcXFxcbiAgICAgICAgfTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcXFxcbiAgICBkaXYuaW5uZXJIVE1MID0gJzxyZXZvLWdyaWQgY2xhc3M9XFxcXFxcXCJncmlkLWNvbXBvbmVudFxcXFxcXFwiPjwvcmV2by1ncmlkPic7XFxcXG4gICAgY29uc3QgZ3JpZCA9IGRpdi5xdWVyeVNlbGVjdG9yKCdyZXZvLWdyaWQnKTtcXFxcblxcXFxuICAgIGlmIChncmlkKSB7XFxcXG4gICAgICAgIGNvbnN0IGRhdGEgPSBnZW5lcmF0ZUZha2VEYXRhKDEwMDAsIDEwMCk7XFxcXG4gICAgICAgIGdyaWQuY29sdW1ucyA9IGRhdGEuaGVhZGVycztcXFxcbiAgICAgICAgZ3JpZC5zb3VyY2UgPSBkYXRhLnJvd3M7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgcmV0dXJuIGRpdjtcXFxcbn07XFxcXG5cXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJzb3VyY2UtYXBpLWphdmFzY3JpcHQtLWJhc2ljLXNhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjI3LFxcXCJsaW5lXFxcIjo4fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6Njh9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjoyNyxcXFwibGluZVxcXCI6OH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2OH19fX0sfSxcXG4gICAgdGl0bGU6ICdTb3VyY2UgQXBpL0phdmFTY3JpcHQnXFxufTtcXG5cXG5leHBvcnQgY29uc3QgYmFzaWNTYW1wbGUgPSAoKSA9PiB7XFxuICAgIC8vIGRlZmluZSBjdXN0b20gZWxlbWVudCAnPHJldm8tZ3JpZC8+Jywgd2UgY2FuIGlnbm9yZSBhcHBseVBvbHlmaWxscyBpZiB3ZSBhcmUgbm90IHN1cHBvcnRpbmcgSUUxMVxcbiAgICBhcHBseVBvbHlmaWxscygpLnRoZW4oKCkgPT4ge1xcbiAgICAgICAgZGVmaW5lQ3VzdG9tRWxlbWVudHMoKTtcXG4gICAgfSk7XFxuXFxuICAgIC8vIGhlYWRlciBsYWJlbHMgZ2VuZXJhdGlvblxcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUhlYWRlcihpbmRleCkge1xcbiAgICAgICAgbGV0IGRpdmlkZW5kID0gaW5kZXggKyAxO1xcbiAgICAgICAgbGV0IGNvbHVtbkxhYmVsID0gJyc7XFxuICAgICAgICBsZXQgbW9kdWxvO1xcbiAgICAgICAgd2hpbGUgKGRpdmlkZW5kID4gMCkge1xcbiAgICAgICAgICAgIG1vZHVsbyA9IChkaXZpZGVuZCAtIDEpICUgMjY7XFxuICAgICAgICAgICAgY29sdW1uTGFiZWwgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDY1ICsgbW9kdWxvKSArIGNvbHVtbkxhYmVsO1xcbiAgICAgICAgICAgIGRpdmlkZW5kID0gcGFyc2VJbnQoKChkaXZpZGVuZCAtIG1vZHVsbykgLyAyNikudG9TdHJpbmcoKSwgMTApO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIGNvbHVtbkxhYmVsO1xcbiAgICB9XFxuXFxuICAgIC8vIGZha2UgZGF0YSBnZW5lcmF0aW9uIGFzIEFycmF5IGlucHV0IHNvdXJjZVxcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUZha2VEYXRhKHJvd3NOdW1iZXIsIGNvbHNOdW1iZXIpIHtcXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xcbiAgICAgICAgY29uc3Qgcm93TWluID0gW107XFxuICAgICAgICBjb25zdCBoZWFkZXJzID0gW107XFxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHNOdW1iZXI7IGorKykge1xcbiAgICAgICAgICAgIHJvd01pbi5wdXNoKGopO1xcbiAgICAgICAgICAgIGhlYWRlcnMucHVzaCh7XFxuICAgICAgICAgICAgICAgIHByb3A6IGosXFxuICAgICAgICAgICAgICAgIG5hbWU6IGdlbmVyYXRlSGVhZGVyKGopLFxcbiAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6IChoLCBwcm9wcykgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHByb3BzLm1vZGVsW3Byb3BzLnByb3BdO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGolNCA/IHVuZGVmaW5lZCA6ICdncmF5J1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdpbm5lci1jZWxsJ1xcbiAgICAgICAgICAgICAgICAgICAgfSwgIHRleHQpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3NOdW1iZXI7IGkrKykge1xcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJvd01pbik7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIHJvd3M6IHJlc3VsdCxcXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzXFxuICAgICAgICB9O1xcbiAgICB9XFxuXFxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xcbiAgICBkaXYuaW5uZXJIVE1MID0gJzxyZXZvLWdyaWQgY2xhc3M9XFxcImdyaWQtY29tcG9uZW50XFxcIj48L3Jldm8tZ3JpZD4nO1xcbiAgICBjb25zdCBncmlkID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3Jldm8tZ3JpZCcpO1xcblxcbiAgICBpZiAoZ3JpZCkge1xcbiAgICAgICAgY29uc3QgZGF0YSA9IGdlbmVyYXRlRmFrZURhdGEoMTAwMCwgMTAwKTtcXG4gICAgICAgIGdyaWQuY29sdW1ucyA9IGRhdGEuaGVhZGVycztcXG4gICAgICAgIGdyaWQuc291cmNlID0gZGF0YS5yb3dzO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBkaXY7XFxufTtcXG5cXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcInNvdXJjZS1hcGktamF2YXNjcmlwdC0tYmFzaWMtc2FtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNyxcImxpbmVcIjoxNn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjc2fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjI3LFwibGluZVwiOjE2fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjc2fX19O1xuICAgIFxuXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcImNvbnN0IHthcHBseVBvbHlmaWxscywgZGVmaW5lQ3VzdG9tRWxlbWVudHN9ID0gcmVxdWlyZSgnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcicpO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICdTb3VyY2UgQXBpL0phdmFTY3JpcHQnXFxufTtcXG5cXG5leHBvcnQgY29uc3QgYmFzaWNTYW1wbGUgPSAoKSA9PiB7XFxuICAgIC8vIGRlZmluZSBjdXN0b20gZWxlbWVudCAnPHJldm8tZ3JpZC8+Jywgd2UgY2FuIGlnbm9yZSBhcHBseVBvbHlmaWxscyBpZiB3ZSBhcmUgbm90IHN1cHBvcnRpbmcgSUUxMVxcbiAgICBhcHBseVBvbHlmaWxscygpLnRoZW4oKCkgPT4ge1xcbiAgICAgICAgZGVmaW5lQ3VzdG9tRWxlbWVudHMoKTtcXG4gICAgfSk7XFxuXFxuICAgIC8vIGhlYWRlciBsYWJlbHMgZ2VuZXJhdGlvblxcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUhlYWRlcihpbmRleCkge1xcbiAgICAgICAgbGV0IGRpdmlkZW5kID0gaW5kZXggKyAxO1xcbiAgICAgICAgbGV0IGNvbHVtbkxhYmVsID0gJyc7XFxuICAgICAgICBsZXQgbW9kdWxvO1xcbiAgICAgICAgd2hpbGUgKGRpdmlkZW5kID4gMCkge1xcbiAgICAgICAgICAgIG1vZHVsbyA9IChkaXZpZGVuZCAtIDEpICUgMjY7XFxuICAgICAgICAgICAgY29sdW1uTGFiZWwgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDY1ICsgbW9kdWxvKSArIGNvbHVtbkxhYmVsO1xcbiAgICAgICAgICAgIGRpdmlkZW5kID0gcGFyc2VJbnQoKChkaXZpZGVuZCAtIG1vZHVsbykgLyAyNikudG9TdHJpbmcoKSwgMTApO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIGNvbHVtbkxhYmVsO1xcbiAgICB9XFxuXFxuICAgIC8vIGZha2UgZGF0YSBnZW5lcmF0aW9uIGFzIEFycmF5IGlucHV0IHNvdXJjZVxcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUZha2VEYXRhKHJvd3NOdW1iZXIsIGNvbHNOdW1iZXIpIHtcXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xcbiAgICAgICAgY29uc3Qgcm93TWluID0gW107XFxuICAgICAgICBjb25zdCBoZWFkZXJzID0gW107XFxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHNOdW1iZXI7IGorKykge1xcbiAgICAgICAgICAgIHJvd01pbi5wdXNoKGopO1xcbiAgICAgICAgICAgIGhlYWRlcnMucHVzaCh7XFxuICAgICAgICAgICAgICAgIHByb3A6IGosXFxuICAgICAgICAgICAgICAgIG5hbWU6IGdlbmVyYXRlSGVhZGVyKGopLFxcbiAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6IChoLCBwcm9wcykgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHByb3BzLm1vZGVsW3Byb3BzLnByb3BdO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGolNCA/IHVuZGVmaW5lZCA6ICdncmF5J1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdpbm5lci1jZWxsJ1xcbiAgICAgICAgICAgICAgICAgICAgfSwgIHRleHQpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3NOdW1iZXI7IGkrKykge1xcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJvd01pbik7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIHJvd3M6IHJlc3VsdCxcXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzXFxuICAgICAgICB9O1xcbiAgICB9XFxuXFxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xcbiAgICBkaXYuaW5uZXJIVE1MID0gJzxyZXZvLWdyaWQgY2xhc3M9XFxcImdyaWQtY29tcG9uZW50XFxcIj48L3Jldm8tZ3JpZD4nO1xcbiAgICBjb25zdCBncmlkID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3Jldm8tZ3JpZCcpO1xcblxcbiAgICBpZiAoZ3JpZCkge1xcbiAgICAgICAgY29uc3QgZGF0YSA9IGdlbmVyYXRlRmFrZURhdGEoMTAwMCwgMTAwKTtcXG4gICAgICAgIGdyaWQuY29sdW1ucyA9IGRhdGEuaGVhZGVycztcXG4gICAgICAgIGdyaWQuc291cmNlID0gZGF0YS5yb3dzO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBkaXY7XFxufTtcXG5cXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcInNvdXJjZS1hcGktamF2YXNjcmlwdC0tYmFzaWMtc2FtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNyxcImxpbmVcIjo4fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6Njh9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjcsXCJsaW5lXCI6OH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2OH19fTtcbiAgICBcbmNvbnN0IHthcHBseVBvbHlmaWxscywgZGVmaW5lQ3VzdG9tRWxlbWVudHN9ID0gcmVxdWlyZSgnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcicpO1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJjb25zdCB7YXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzfSA9IHJlcXVpcmUoJ0ByZXZvbGlzdC9yZXZvZ3JpZC9sb2FkZXInKTtcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICdTb3VyY2UgQXBpL0phdmFTY3JpcHQnXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgYmFzaWNTYW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgLy8gZGVmaW5lIGN1c3RvbSBlbGVtZW50ICc8cmV2by1ncmlkLz4nLCB3ZSBjYW4gaWdub3JlIGFwcGx5UG9seWZpbGxzIGlmIHdlIGFyZSBub3Qgc3VwcG9ydGluZyBJRTExXFxcXG4gICAgYXBwbHlQb2x5ZmlsbHMoKS50aGVuKCgpID0+IHtcXFxcbiAgICAgICAgZGVmaW5lQ3VzdG9tRWxlbWVudHMoKTtcXFxcbiAgICB9KTtcXFxcblxcXFxuICAgIC8vIGhlYWRlciBsYWJlbHMgZ2VuZXJhdGlvblxcXFxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlSGVhZGVyKGluZGV4KSB7XFxcXG4gICAgICAgIGxldCBkaXZpZGVuZCA9IGluZGV4ICsgMTtcXFxcbiAgICAgICAgbGV0IGNvbHVtbkxhYmVsID0gJyc7XFxcXG4gICAgICAgIGxldCBtb2R1bG87XFxcXG4gICAgICAgIHdoaWxlIChkaXZpZGVuZCA+IDApIHtcXFxcbiAgICAgICAgICAgIG1vZHVsbyA9IChkaXZpZGVuZCAtIDEpICUgMjY7XFxcXG4gICAgICAgICAgICBjb2x1bW5MYWJlbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoNjUgKyBtb2R1bG8pICsgY29sdW1uTGFiZWw7XFxcXG4gICAgICAgICAgICBkaXZpZGVuZCA9IHBhcnNlSW50KCgoZGl2aWRlbmQgLSBtb2R1bG8pIC8gMjYpLnRvU3RyaW5nKCksIDEwKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4gY29sdW1uTGFiZWw7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgLy8gZmFrZSBkYXRhIGdlbmVyYXRpb24gYXMgQXJyYXkgaW5wdXQgc291cmNlXFxcXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVGYWtlRGF0YShyb3dzTnVtYmVyLCBjb2xzTnVtYmVyKSB7XFxcXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xcXFxuICAgICAgICBjb25zdCByb3dNaW4gPSBbXTtcXFxcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IFtdO1xcXFxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHNOdW1iZXI7IGorKykge1xcXFxuICAgICAgICAgICAgcm93TWluLnB1c2goaik7XFxcXG4gICAgICAgICAgICBoZWFkZXJzLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHByb3A6IGosXFxcXG4gICAgICAgICAgICAgICAgbmFtZTogZ2VuZXJhdGVIZWFkZXIoaiksXFxcXG4gICAgICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAoaCwgcHJvcHMpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHByb3BzLm1vZGVsW3Byb3BzLnByb3BdO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCgnZGl2Jywge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGolNCA/IHVuZGVmaW5lZCA6ICdncmF5J1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnaW5uZXItY2VsbCdcXFxcbiAgICAgICAgICAgICAgICAgICAgfSwgIHRleHQpO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93c051bWJlcjsgaSsrKSB7XFxcXG4gICAgICAgICAgICByZXN1bHQucHVzaChyb3dNaW4pO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiB7XFxcXG4gICAgICAgICAgICByb3dzOiByZXN1bHQsXFxcXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzXFxcXG4gICAgICAgIH07XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XFxcXG4gICAgZGl2LmlubmVySFRNTCA9ICc8cmV2by1ncmlkIGNsYXNzPVxcXFxcXFwiZ3JpZC1jb21wb25lbnRcXFxcXFxcIj48L3Jldm8tZ3JpZD4nO1xcXFxuICAgIGNvbnN0IGdyaWQgPSBkaXYucXVlcnlTZWxlY3RvcigncmV2by1ncmlkJyk7XFxcXG5cXFxcbiAgICBpZiAoZ3JpZCkge1xcXFxuICAgICAgICBjb25zdCBkYXRhID0gZ2VuZXJhdGVGYWtlRGF0YSgxMDAwLCAxMDApO1xcXFxuICAgICAgICBncmlkLmNvbHVtbnMgPSBkYXRhLmhlYWRlcnM7XFxcXG4gICAgICAgIGdyaWQuc291cmNlID0gZGF0YS5yb3dzO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIHJldHVybiBkaXY7XFxcXG59O1xcXFxuXFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcInNvdXJjZS1hcGktamF2YXNjcmlwdC0tYmFzaWMtc2FtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MjcsXFxcImxpbmVcXFwiOjh9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2OH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjI3LFxcXCJsaW5lXFxcIjo4fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY4fX19O1xcbiAgICBcXG5jb25zdCB7YXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzfSA9IHJlcXVpcmUoJ0ByZXZvbGlzdC9yZXZvZ3JpZC9sb2FkZXInKTtcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7cGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJjb25zdCB7YXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzfSA9IHJlcXVpcmUoJ0ByZXZvbGlzdC9yZXZvZ3JpZC9sb2FkZXInKTtcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICdTb3VyY2UgQXBpL0phdmFTY3JpcHQnXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgYmFzaWNTYW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgLy8gZGVmaW5lIGN1c3RvbSBlbGVtZW50ICc8cmV2by1ncmlkLz4nLCB3ZSBjYW4gaWdub3JlIGFwcGx5UG9seWZpbGxzIGlmIHdlIGFyZSBub3Qgc3VwcG9ydGluZyBJRTExXFxcXG4gICAgYXBwbHlQb2x5ZmlsbHMoKS50aGVuKCgpID0+IHtcXFxcbiAgICAgICAgZGVmaW5lQ3VzdG9tRWxlbWVudHMoKTtcXFxcbiAgICB9KTtcXFxcblxcXFxuICAgIC8vIGhlYWRlciBsYWJlbHMgZ2VuZXJhdGlvblxcXFxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlSGVhZGVyKGluZGV4KSB7XFxcXG4gICAgICAgIGxldCBkaXZpZGVuZCA9IGluZGV4ICsgMTtcXFxcbiAgICAgICAgbGV0IGNvbHVtbkxhYmVsID0gJyc7XFxcXG4gICAgICAgIGxldCBtb2R1bG87XFxcXG4gICAgICAgIHdoaWxlIChkaXZpZGVuZCA+IDApIHtcXFxcbiAgICAgICAgICAgIG1vZHVsbyA9IChkaXZpZGVuZCAtIDEpICUgMjY7XFxcXG4gICAgICAgICAgICBjb2x1bW5MYWJlbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoNjUgKyBtb2R1bG8pICsgY29sdW1uTGFiZWw7XFxcXG4gICAgICAgICAgICBkaXZpZGVuZCA9IHBhcnNlSW50KCgoZGl2aWRlbmQgLSBtb2R1bG8pIC8gMjYpLnRvU3RyaW5nKCksIDEwKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4gY29sdW1uTGFiZWw7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgLy8gZmFrZSBkYXRhIGdlbmVyYXRpb24gYXMgQXJyYXkgaW5wdXQgc291cmNlXFxcXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVGYWtlRGF0YShyb3dzTnVtYmVyLCBjb2xzTnVtYmVyKSB7XFxcXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xcXFxuICAgICAgICBjb25zdCByb3dNaW4gPSBbXTtcXFxcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IFtdO1xcXFxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHNOdW1iZXI7IGorKykge1xcXFxuICAgICAgICAgICAgcm93TWluLnB1c2goaik7XFxcXG4gICAgICAgICAgICBoZWFkZXJzLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHByb3A6IGosXFxcXG4gICAgICAgICAgICAgICAgbmFtZTogZ2VuZXJhdGVIZWFkZXIoaiksXFxcXG4gICAgICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAoaCwgcHJvcHMpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHByb3BzLm1vZGVsW3Byb3BzLnByb3BdO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCgnZGl2Jywge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGolNCA/IHVuZGVmaW5lZCA6ICdncmF5J1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnaW5uZXItY2VsbCdcXFxcbiAgICAgICAgICAgICAgICAgICAgfSwgIHRleHQpO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93c051bWJlcjsgaSsrKSB7XFxcXG4gICAgICAgICAgICByZXN1bHQucHVzaChyb3dNaW4pO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiB7XFxcXG4gICAgICAgICAgICByb3dzOiByZXN1bHQsXFxcXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzXFxcXG4gICAgICAgIH07XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XFxcXG4gICAgZGl2LmlubmVySFRNTCA9ICc8cmV2by1ncmlkIGNsYXNzPVxcXFxcXFwiZ3JpZC1jb21wb25lbnRcXFxcXFxcIj48L3Jldm8tZ3JpZD4nO1xcXFxuICAgIGNvbnN0IGdyaWQgPSBkaXYucXVlcnlTZWxlY3RvcigncmV2by1ncmlkJyk7XFxcXG5cXFxcbiAgICBpZiAoZ3JpZCkge1xcXFxuICAgICAgICBjb25zdCBkYXRhID0gZ2VuZXJhdGVGYWtlRGF0YSgxMDAwLCAxMDApO1xcXFxuICAgICAgICBncmlkLmNvbHVtbnMgPSBkYXRhLmhlYWRlcnM7XFxcXG4gICAgICAgIGdyaWQuc291cmNlID0gZGF0YS5yb3dzO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIHJldHVybiBkaXY7XFxcXG59O1xcXFxuXFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwic291cmNlLWFwaS1qYXZhc2NyaXB0LS1iYXNpYy1zYW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjoyNyxcXFwibGluZVxcXCI6OH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY4fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MjcsXFxcImxpbmVcXFwiOjh9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6Njh9fX19LH0sXFxuICAgIHRpdGxlOiAnU291cmNlIEFwaS9KYXZhU2NyaXB0J1xcbn07XFxuXFxuZXhwb3J0IGNvbnN0IGJhc2ljU2FtcGxlID0gKCkgPT4ge1xcbiAgICAvLyBkZWZpbmUgY3VzdG9tIGVsZW1lbnQgJzxyZXZvLWdyaWQvPicsIHdlIGNhbiBpZ25vcmUgYXBwbHlQb2x5ZmlsbHMgaWYgd2UgYXJlIG5vdCBzdXBwb3J0aW5nIElFMTFcXG4gICAgYXBwbHlQb2x5ZmlsbHMoKS50aGVuKCgpID0+IHtcXG4gICAgICAgIGRlZmluZUN1c3RvbUVsZW1lbnRzKCk7XFxuICAgIH0pO1xcblxcbiAgICAvLyBoZWFkZXIgbGFiZWxzIGdlbmVyYXRpb25cXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVIZWFkZXIoaW5kZXgpIHtcXG4gICAgICAgIGxldCBkaXZpZGVuZCA9IGluZGV4ICsgMTtcXG4gICAgICAgIGxldCBjb2x1bW5MYWJlbCA9ICcnO1xcbiAgICAgICAgbGV0IG1vZHVsbztcXG4gICAgICAgIHdoaWxlIChkaXZpZGVuZCA+IDApIHtcXG4gICAgICAgICAgICBtb2R1bG8gPSAoZGl2aWRlbmQgLSAxKSAlIDI2O1xcbiAgICAgICAgICAgIGNvbHVtbkxhYmVsID0gU3RyaW5nLmZyb21DaGFyQ29kZSg2NSArIG1vZHVsbykgKyBjb2x1bW5MYWJlbDtcXG4gICAgICAgICAgICBkaXZpZGVuZCA9IHBhcnNlSW50KCgoZGl2aWRlbmQgLSBtb2R1bG8pIC8gMjYpLnRvU3RyaW5nKCksIDEwKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBjb2x1bW5MYWJlbDtcXG4gICAgfVxcblxcbiAgICAvLyBmYWtlIGRhdGEgZ2VuZXJhdGlvbiBhcyBBcnJheSBpbnB1dCBzb3VyY2VcXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVGYWtlRGF0YShyb3dzTnVtYmVyLCBjb2xzTnVtYmVyKSB7XFxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcXG4gICAgICAgIGNvbnN0IHJvd01pbiA9IFtdO1xcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IFtdO1xcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xzTnVtYmVyOyBqKyspIHtcXG4gICAgICAgICAgICByb3dNaW4ucHVzaChqKTtcXG4gICAgICAgICAgICBoZWFkZXJzLnB1c2goe1xcbiAgICAgICAgICAgICAgICBwcm9wOiBqLFxcbiAgICAgICAgICAgICAgICBuYW1lOiBnZW5lcmF0ZUhlYWRlcihqKSxcXG4gICAgICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAoaCwgcHJvcHMpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBwcm9wcy5tb2RlbFtwcm9wcy5wcm9wXTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoKCdkaXYnLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBqJTQgPyB1bmRlZmluZWQgOiAnZ3JheSdcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnaW5uZXItY2VsbCdcXG4gICAgICAgICAgICAgICAgICAgIH0sICB0ZXh0KTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dzTnVtYmVyOyBpKyspIHtcXG4gICAgICAgICAgICByZXN1bHQucHVzaChyb3dNaW4pO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICByb3dzOiByZXN1bHQsXFxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyc1xcbiAgICAgICAgfTtcXG4gICAgfVxcblxcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcXG4gICAgZGl2LmlubmVySFRNTCA9ICc8cmV2by1ncmlkIGNsYXNzPVxcXCJncmlkLWNvbXBvbmVudFxcXCI+PC9yZXZvLWdyaWQ+JztcXG4gICAgY29uc3QgZ3JpZCA9IGRpdi5xdWVyeVNlbGVjdG9yKCdyZXZvLWdyaWQnKTtcXG5cXG4gICAgaWYgKGdyaWQpIHtcXG4gICAgICAgIGNvbnN0IGRhdGEgPSBnZW5lcmF0ZUZha2VEYXRhKDEwMDAsIDEwMCk7XFxuICAgICAgICBncmlkLmNvbHVtbnMgPSBkYXRhLmhlYWRlcnM7XFxuICAgICAgICBncmlkLnNvdXJjZSA9IGRhdGEucm93cztcXG4gICAgfVxcblxcbiAgICByZXR1cm4gZGl2O1xcbn07XFxuXFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCJzb3VyY2UtYXBpLWphdmFzY3JpcHQtLWJhc2ljLXNhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjcsXCJsaW5lXCI6MTZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Nn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNyxcImxpbmVcIjoxNn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Nn19fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiY29uc3Qge2FwcGx5UG9seWZpbGxzLCBkZWZpbmVDdXN0b21FbGVtZW50c30gPSByZXF1aXJlKCdAcmV2b2xpc3QvcmV2b2dyaWQvbG9hZGVyJyk7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJ1NvdXJjZSBBcGkvSmF2YVNjcmlwdCdcXG59O1xcblxcbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcXG4gICAgLy8gZGVmaW5lIGN1c3RvbSBlbGVtZW50ICc8cmV2by1ncmlkLz4nLCB3ZSBjYW4gaWdub3JlIGFwcGx5UG9seWZpbGxzIGlmIHdlIGFyZSBub3Qgc3VwcG9ydGluZyBJRTExXFxuICAgIGFwcGx5UG9seWZpbGxzKCkudGhlbigoKSA9PiB7XFxuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50cygpO1xcbiAgICB9KTtcXG5cXG4gICAgLy8gaGVhZGVyIGxhYmVscyBnZW5lcmF0aW9uXFxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlSGVhZGVyKGluZGV4KSB7XFxuICAgICAgICBsZXQgZGl2aWRlbmQgPSBpbmRleCArIDE7XFxuICAgICAgICBsZXQgY29sdW1uTGFiZWwgPSAnJztcXG4gICAgICAgIGxldCBtb2R1bG87XFxuICAgICAgICB3aGlsZSAoZGl2aWRlbmQgPiAwKSB7XFxuICAgICAgICAgICAgbW9kdWxvID0gKGRpdmlkZW5kIC0gMSkgJSAyNjtcXG4gICAgICAgICAgICBjb2x1bW5MYWJlbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoNjUgKyBtb2R1bG8pICsgY29sdW1uTGFiZWw7XFxuICAgICAgICAgICAgZGl2aWRlbmQgPSBwYXJzZUludCgoKGRpdmlkZW5kIC0gbW9kdWxvKSAvIDI2KS50b1N0cmluZygpLCAxMCk7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gY29sdW1uTGFiZWw7XFxuICAgIH1cXG5cXG4gICAgLy8gZmFrZSBkYXRhIGdlbmVyYXRpb24gYXMgQXJyYXkgaW5wdXQgc291cmNlXFxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlRmFrZURhdGEocm93c051bWJlciwgY29sc051bWJlcikge1xcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XFxuICAgICAgICBjb25zdCByb3dNaW4gPSBbXTtcXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBbXTtcXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sc051bWJlcjsgaisrKSB7XFxuICAgICAgICAgICAgcm93TWluLnB1c2goaik7XFxuICAgICAgICAgICAgaGVhZGVycy5wdXNoKHtcXG4gICAgICAgICAgICAgICAgcHJvcDogaixcXG4gICAgICAgICAgICAgICAgbmFtZTogZ2VuZXJhdGVIZWFkZXIoaiksXFxuICAgICAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogKGgsIHByb3BzKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gcHJvcHMubW9kZWxbcHJvcHMucHJvcF07XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCgnZGl2Jywge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaiU0ID8gdW5kZWZpbmVkIDogJ2dyYXknXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2lubmVyLWNlbGwnXFxuICAgICAgICAgICAgICAgICAgICB9LCAgdGV4dCk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93c051bWJlcjsgaSsrKSB7XFxuICAgICAgICAgICAgcmVzdWx0LnB1c2gocm93TWluKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgcm93czogcmVzdWx0LFxcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcXG4gICAgICAgIH07XFxuICAgIH1cXG5cXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XFxuICAgIGRpdi5pbm5lckhUTUwgPSAnPHJldm8tZ3JpZCBjbGFzcz1cXFwiZ3JpZC1jb21wb25lbnRcXFwiPjwvcmV2by1ncmlkPic7XFxuICAgIGNvbnN0IGdyaWQgPSBkaXYucXVlcnlTZWxlY3RvcigncmV2by1ncmlkJyk7XFxuXFxuICAgIGlmIChncmlkKSB7XFxuICAgICAgICBjb25zdCBkYXRhID0gZ2VuZXJhdGVGYWtlRGF0YSgxMDAwLCAxMDApO1xcbiAgICAgICAgZ3JpZC5jb2x1bW5zID0gZGF0YS5oZWFkZXJzO1xcbiAgICAgICAgZ3JpZC5zb3VyY2UgPSBkYXRhLnJvd3M7XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIGRpdjtcXG59O1xcblxcblwiLFwibG9jYXRpb25zTWFwXCI6e1wic291cmNlLWFwaS1qYXZhc2NyaXB0LS1iYXNpYy1zYW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI3LFwibGluZVwiOjh9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2OH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNyxcImxpbmVcIjo4fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjY4fX19fSx9LFxuICAgIHRpdGxlOiAnU291cmNlIEFwaS9KYXZhU2NyaXB0J1xufTtcblxuZXhwb3J0IGNvbnN0IGJhc2ljU2FtcGxlID0gKCkgPT4ge1xuICAgIC8vIGRlZmluZSBjdXN0b20gZWxlbWVudCAnPHJldm8tZ3JpZC8+Jywgd2UgY2FuIGlnbm9yZSBhcHBseVBvbHlmaWxscyBpZiB3ZSBhcmUgbm90IHN1cHBvcnRpbmcgSUUxMVxuICAgIGFwcGx5UG9seWZpbGxzKCkudGhlbigoKSA9PiB7XG4gICAgICAgIGRlZmluZUN1c3RvbUVsZW1lbnRzKCk7XG4gICAgfSk7XG5cbiAgICAvLyBoZWFkZXIgbGFiZWxzIGdlbmVyYXRpb25cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUhlYWRlcihpbmRleCkge1xuICAgICAgICBsZXQgZGl2aWRlbmQgPSBpbmRleCArIDE7XG4gICAgICAgIGxldCBjb2x1bW5MYWJlbCA9ICcnO1xuICAgICAgICBsZXQgbW9kdWxvO1xuICAgICAgICB3aGlsZSAoZGl2aWRlbmQgPiAwKSB7XG4gICAgICAgICAgICBtb2R1bG8gPSAoZGl2aWRlbmQgLSAxKSAlIDI2O1xuICAgICAgICAgICAgY29sdW1uTGFiZWwgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDY1ICsgbW9kdWxvKSArIGNvbHVtbkxhYmVsO1xuICAgICAgICAgICAgZGl2aWRlbmQgPSBwYXJzZUludCgoKGRpdmlkZW5kIC0gbW9kdWxvKSAvIDI2KS50b1N0cmluZygpLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbHVtbkxhYmVsO1xuICAgIH1cblxuICAgIC8vIGZha2UgZGF0YSBnZW5lcmF0aW9uIGFzIEFycmF5IGlucHV0IHNvdXJjZVxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlRmFrZURhdGEocm93c051bWJlciwgY29sc051bWJlcikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgY29uc3Qgcm93TWluID0gW107XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xzTnVtYmVyOyBqKyspIHtcbiAgICAgICAgICAgIHJvd01pbi5wdXNoKGopO1xuICAgICAgICAgICAgaGVhZGVycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBwcm9wOiBqLFxuICAgICAgICAgICAgICAgIG5hbWU6IGdlbmVyYXRlSGVhZGVyKGopLFxuICAgICAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogKGgsIHByb3BzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBwcm9wcy5tb2RlbFtwcm9wcy5wcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBqJTQgPyB1bmRlZmluZWQgOiAnZ3JheSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2lubmVyLWNlbGwnXG4gICAgICAgICAgICAgICAgICAgIH0sICB0ZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3NOdW1iZXI7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocm93TWluKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcm93czogcmVzdWx0LFxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyc1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdi5pbm5lckhUTUwgPSAnPHJldm8tZ3JpZCBjbGFzcz1cImdyaWQtY29tcG9uZW50XCI+PC9yZXZvLWdyaWQ+JztcbiAgICBjb25zdCBncmlkID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3Jldm8tZ3JpZCcpO1xuXG4gICAgaWYgKGdyaWQpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGdlbmVyYXRlRmFrZURhdGEoMTAwMCwgMTAwKTtcbiAgICAgICAgZ3JpZC5jb2x1bW5zID0gZGF0YS5oZWFkZXJzO1xuICAgICAgICBncmlkLnNvdXJjZSA9IGRhdGEucm93cztcbiAgICB9XG5cbiAgICByZXR1cm4gZGl2O1xufTtcblxuIiwidmFyIG1hcCA9IHtcblx0XCIuL3Jldm8tZ3JpZF80LmVudHJ5LmpzXCI6IFtcblx0XHQ0MjcsXG5cdFx0N1xuXHRdXG59O1xuZnVuY3Rpb24gd2VicGFja0FzeW5jQ29udGV4dChyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHRcdHRocm93IGU7XG5cdFx0fSk7XG5cdH1cblxuXHR2YXIgaWRzID0gbWFwW3JlcV0sIGlkID0gaWRzWzBdO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKGlkc1sxXSkudGhlbihmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG5cdH0pO1xufVxud2VicGFja0FzeW5jQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0FzeW5jQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tBc3luY0NvbnRleHQuaWQgPSA0MTI7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tBc3luY0NvbnRleHQ7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0IHsgYXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzIH0gZnJvbSAnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcic7XFxcXG5pbXBvcnQge0NvbHVtbkRhdGFTY2hlbWEsIERhdGFUeXBlfSBmcm9tIFxcXFxcXFwiQHJldm9saXN0L3Jldm9ncmlkL2Rpc3QvdHlwZXMvaW50ZXJmYWNlc1xcXFxcXFwiO1xcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICdTb3VyY2UgQXBpL1R5cGVzY3JpcHQnXFxcXG59O1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcXFxcbiAgICAvLyBkZWZpbmUgY3VzdG9tIGVsZW1lbnQgJzxyZXZvLWdyaWQvPicsIHdlIGNhbiBpZ25vcmUgYXBwbHlQb2x5ZmlsbHMgaWYgd2UgYXJlIG5vdCBzdXBwb3J0aW5nIElFMTFcXFxcbiAgICBhcHBseVBvbHlmaWxscygpLnRoZW4oKCkgPT4ge1xcXFxuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50cygpO1xcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgLy8gaGVhZGVyIGxhYmVscyBnZW5lcmF0aW9uXFxcXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVIZWFkZXIoaW5kZXg6IG51bWJlcikge1xcXFxuICAgICAgICBsZXQgZGl2aWRlbmQ6IG51bWJlciA9IGluZGV4ICsgMTtcXFxcbiAgICAgICAgbGV0IGNvbHVtbkxhYmVsID0gJyc7XFxcXG4gICAgICAgIGxldCBtb2R1bG87XFxcXG4gICAgICAgIHdoaWxlIChkaXZpZGVuZCA+IDApIHtcXFxcbiAgICAgICAgICAgIG1vZHVsbyA9IChkaXZpZGVuZCAtIDEpICUgMjY7XFxcXG4gICAgICAgICAgICBjb2x1bW5MYWJlbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoNjUgKyBtb2R1bG8pICsgY29sdW1uTGFiZWw7XFxcXG4gICAgICAgICAgICBkaXZpZGVuZCA9IHBhcnNlSW50KCgoZGl2aWRlbmQgLSBtb2R1bG8pIC8gMjYpLnRvU3RyaW5nKCksIDEwKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4gY29sdW1uTGFiZWw7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgLy8gZmFrZSBkYXRhIGdlbmVyYXRpb24gYXMgT2JqZWN0IGlucHV0IHNvdXJjZVxcXFxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlRmFrZURhdGFPYmplY3Qocm93c051bWJlcjogbnVtYmVyLCBjb2xzTnVtYmVyOiBudW1iZXIpIHtcXFxcbiAgICAgICAgY29uc3QgcmVzdWx0OiBEYXRhVHlwZVtdID0gW107XFxcXG4gICAgICAgIGNvbnN0IGhlYWRlcnM6IENvbHVtbkRhdGFTY2hlbWFbXSA9IFtdO1xcXFxuICAgICAgICBjb25zdCBhbGwgPSBjb2xzTnVtYmVyICogcm93c051bWJlcjtcXFxcbiAgICAgICAgZm9yIChsZXQgajogbnVtYmVyID0gMDsgaiA8IGFsbDsgaisrKSB7XFxcXG4gICAgICAgICAgICBsZXQgY29sOiBudW1iZXIgPSBqJWNvbHNOdW1iZXI7XFxcXG4gICAgICAgICAgICBsZXQgcm93OiBudW1iZXIgPSBqL2NvbHNOdW1iZXJ8MDtcXFxcbiAgICAgICAgICAgIGlmICghcmVzdWx0W3Jvd10pIHtcXFxcbiAgICAgICAgICAgICAgICByZXN1bHRbcm93XSA9IHt9O1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmVzdWx0W3Jvd11bY29sXSA9IHJvdyArICc6JyArIGNvbDtcXFxcbiAgICAgICAgICAgIGlmICghaGVhZGVyc1tjb2xdKSB7XFxcXG4gICAgICAgICAgICAgICAgaGVhZGVyc1tjb2xdID0ge1xcXFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBnZW5lcmF0ZUhlYWRlcihjb2wpLFxcXFxuICAgICAgICAgICAgICAgICAgICBwcm9wOiBjb2wudG9TdHJpbmcoKVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4ge1xcXFxuICAgICAgICAgICAgcm93czogcmVzdWx0LFxcXFxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyc1xcXFxuICAgICAgICB9O1xcXFxuICAgIH1cXFxcblxcXFxuXFxcXG4gICAgY29uc3QgZGl2OiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xcXFxuICAgIGRpdi5pbm5lckhUTUwgPSAnPHJldm8tZ3JpZCBjbGFzcz1cXFxcXFxcImdyaWQtY29tcG9uZW50XFxcXFxcXCI+PC9yZXZvLWdyaWQ+JztcXFxcblxcXFxuXFxcXG4gICAgY29uc3QgZ3JpZDogSFRNTFJldm9HcmlkRWxlbWVudHxudWxsID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3Jldm8tZ3JpZCcpO1xcXFxuICAgIGlmIChncmlkKSB7XFxcXG4gICAgICAgIGNvbnN0IGRhdGEgPSBnZW5lcmF0ZUZha2VEYXRhT2JqZWN0KDEwMDAsIDEwMCk7XFxcXG4gICAgICAgIGdyaWQuY29sdW1ucyA9IGRhdGEuaGVhZGVycztcXFxcbiAgICAgICAgZ3JpZC5zb3VyY2UgPSBkYXRhLnJvd3M7XFxcXG4gICAgfVxcXFxuICAgIHJldHVybiBkaXY7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCJzb3VyY2UtYXBpLXR5cGVzY3JpcHQtLWJhc2ljLXNhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjI3LFxcXCJsaW5lXFxcIjo5fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjV9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjoyNyxcXFwibGluZVxcXCI6OX0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2NX19fTtcXG4gICAgXFxuaW1wb3J0IHsgYXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzIH0gZnJvbSAnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcic7XFxuaW1wb3J0IHtDb2x1bW5EYXRhU2NoZW1hLCBEYXRhVHlwZX0gZnJvbSBcXFwiQHJldm9saXN0L3Jldm9ncmlkL2Rpc3QvdHlwZXMvaW50ZXJmYWNlc1xcXCI7XFxuXFxuZXhwb3J0IGRlZmF1bHQge3BhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0IHsgYXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzIH0gZnJvbSAnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcic7XFxcXG5pbXBvcnQge0NvbHVtbkRhdGFTY2hlbWEsIERhdGFUeXBlfSBmcm9tIFxcXFxcXFwiQHJldm9saXN0L3Jldm9ncmlkL2Rpc3QvdHlwZXMvaW50ZXJmYWNlc1xcXFxcXFwiO1xcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICdTb3VyY2UgQXBpL1R5cGVzY3JpcHQnXFxcXG59O1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcXFxcbiAgICAvLyBkZWZpbmUgY3VzdG9tIGVsZW1lbnQgJzxyZXZvLWdyaWQvPicsIHdlIGNhbiBpZ25vcmUgYXBwbHlQb2x5ZmlsbHMgaWYgd2UgYXJlIG5vdCBzdXBwb3J0aW5nIElFMTFcXFxcbiAgICBhcHBseVBvbHlmaWxscygpLnRoZW4oKCkgPT4ge1xcXFxuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50cygpO1xcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgLy8gaGVhZGVyIGxhYmVscyBnZW5lcmF0aW9uXFxcXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVIZWFkZXIoaW5kZXg6IG51bWJlcikge1xcXFxuICAgICAgICBsZXQgZGl2aWRlbmQ6IG51bWJlciA9IGluZGV4ICsgMTtcXFxcbiAgICAgICAgbGV0IGNvbHVtbkxhYmVsID0gJyc7XFxcXG4gICAgICAgIGxldCBtb2R1bG87XFxcXG4gICAgICAgIHdoaWxlIChkaXZpZGVuZCA+IDApIHtcXFxcbiAgICAgICAgICAgIG1vZHVsbyA9IChkaXZpZGVuZCAtIDEpICUgMjY7XFxcXG4gICAgICAgICAgICBjb2x1bW5MYWJlbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoNjUgKyBtb2R1bG8pICsgY29sdW1uTGFiZWw7XFxcXG4gICAgICAgICAgICBkaXZpZGVuZCA9IHBhcnNlSW50KCgoZGl2aWRlbmQgLSBtb2R1bG8pIC8gMjYpLnRvU3RyaW5nKCksIDEwKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4gY29sdW1uTGFiZWw7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgLy8gZmFrZSBkYXRhIGdlbmVyYXRpb24gYXMgT2JqZWN0IGlucHV0IHNvdXJjZVxcXFxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlRmFrZURhdGFPYmplY3Qocm93c051bWJlcjogbnVtYmVyLCBjb2xzTnVtYmVyOiBudW1iZXIpIHtcXFxcbiAgICAgICAgY29uc3QgcmVzdWx0OiBEYXRhVHlwZVtdID0gW107XFxcXG4gICAgICAgIGNvbnN0IGhlYWRlcnM6IENvbHVtbkRhdGFTY2hlbWFbXSA9IFtdO1xcXFxuICAgICAgICBjb25zdCBhbGwgPSBjb2xzTnVtYmVyICogcm93c051bWJlcjtcXFxcbiAgICAgICAgZm9yIChsZXQgajogbnVtYmVyID0gMDsgaiA8IGFsbDsgaisrKSB7XFxcXG4gICAgICAgICAgICBsZXQgY29sOiBudW1iZXIgPSBqJWNvbHNOdW1iZXI7XFxcXG4gICAgICAgICAgICBsZXQgcm93OiBudW1iZXIgPSBqL2NvbHNOdW1iZXJ8MDtcXFxcbiAgICAgICAgICAgIGlmICghcmVzdWx0W3Jvd10pIHtcXFxcbiAgICAgICAgICAgICAgICByZXN1bHRbcm93XSA9IHt9O1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmVzdWx0W3Jvd11bY29sXSA9IHJvdyArICc6JyArIGNvbDtcXFxcbiAgICAgICAgICAgIGlmICghaGVhZGVyc1tjb2xdKSB7XFxcXG4gICAgICAgICAgICAgICAgaGVhZGVyc1tjb2xdID0ge1xcXFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBnZW5lcmF0ZUhlYWRlcihjb2wpLFxcXFxuICAgICAgICAgICAgICAgICAgICBwcm9wOiBjb2wudG9TdHJpbmcoKVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4ge1xcXFxuICAgICAgICAgICAgcm93czogcmVzdWx0LFxcXFxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyc1xcXFxuICAgICAgICB9O1xcXFxuICAgIH1cXFxcblxcXFxuXFxcXG4gICAgY29uc3QgZGl2OiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xcXFxuICAgIGRpdi5pbm5lckhUTUwgPSAnPHJldm8tZ3JpZCBjbGFzcz1cXFxcXFxcImdyaWQtY29tcG9uZW50XFxcXFxcXCI+PC9yZXZvLWdyaWQ+JztcXFxcblxcXFxuXFxcXG4gICAgY29uc3QgZ3JpZDogSFRNTFJldm9HcmlkRWxlbWVudHxudWxsID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3Jldm8tZ3JpZCcpO1xcXFxuICAgIGlmIChncmlkKSB7XFxcXG4gICAgICAgIGNvbnN0IGRhdGEgPSBnZW5lcmF0ZUZha2VEYXRhT2JqZWN0KDEwMDAsIDEwMCk7XFxcXG4gICAgICAgIGdyaWQuY29sdW1ucyA9IGRhdGEuaGVhZGVycztcXFxcbiAgICAgICAgZ3JpZC5zb3VyY2UgPSBkYXRhLnJvd3M7XFxcXG4gICAgfVxcXFxuICAgIHJldHVybiBkaXY7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcInNvdXJjZS1hcGktdHlwZXNjcmlwdC0tYmFzaWMtc2FtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MjcsXFxcImxpbmVcXFwiOjl9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2NX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjI3LFxcXCJsaW5lXFxcIjo5fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY1fX19fSx9LFxcbiAgICB0aXRsZTogJ1NvdXJjZSBBcGkvVHlwZXNjcmlwdCdcXG59O1xcblxcblxcbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcXG4gICAgLy8gZGVmaW5lIGN1c3RvbSBlbGVtZW50ICc8cmV2by1ncmlkLz4nLCB3ZSBjYW4gaWdub3JlIGFwcGx5UG9seWZpbGxzIGlmIHdlIGFyZSBub3Qgc3VwcG9ydGluZyBJRTExXFxuICAgIGFwcGx5UG9seWZpbGxzKCkudGhlbigoKSA9PiB7XFxuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50cygpO1xcbiAgICB9KTtcXG5cXG4gICAgLy8gaGVhZGVyIGxhYmVscyBnZW5lcmF0aW9uXFxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlSGVhZGVyKGluZGV4OiBudW1iZXIpIHtcXG4gICAgICAgIGxldCBkaXZpZGVuZDogbnVtYmVyID0gaW5kZXggKyAxO1xcbiAgICAgICAgbGV0IGNvbHVtbkxhYmVsID0gJyc7XFxuICAgICAgICBsZXQgbW9kdWxvO1xcbiAgICAgICAgd2hpbGUgKGRpdmlkZW5kID4gMCkge1xcbiAgICAgICAgICAgIG1vZHVsbyA9IChkaXZpZGVuZCAtIDEpICUgMjY7XFxuICAgICAgICAgICAgY29sdW1uTGFiZWwgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDY1ICsgbW9kdWxvKSArIGNvbHVtbkxhYmVsO1xcbiAgICAgICAgICAgIGRpdmlkZW5kID0gcGFyc2VJbnQoKChkaXZpZGVuZCAtIG1vZHVsbykgLyAyNikudG9TdHJpbmcoKSwgMTApO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIGNvbHVtbkxhYmVsO1xcbiAgICB9XFxuXFxuICAgIC8vIGZha2UgZGF0YSBnZW5lcmF0aW9uIGFzIE9iamVjdCBpbnB1dCBzb3VyY2VcXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVGYWtlRGF0YU9iamVjdChyb3dzTnVtYmVyOiBudW1iZXIsIGNvbHNOdW1iZXI6IG51bWJlcikge1xcbiAgICAgICAgY29uc3QgcmVzdWx0OiBEYXRhVHlwZVtdID0gW107XFxuICAgICAgICBjb25zdCBoZWFkZXJzOiBDb2x1bW5EYXRhU2NoZW1hW10gPSBbXTtcXG4gICAgICAgIGNvbnN0IGFsbCA9IGNvbHNOdW1iZXIgKiByb3dzTnVtYmVyO1xcbiAgICAgICAgZm9yIChsZXQgajogbnVtYmVyID0gMDsgaiA8IGFsbDsgaisrKSB7XFxuICAgICAgICAgICAgbGV0IGNvbDogbnVtYmVyID0gaiVjb2xzTnVtYmVyO1xcbiAgICAgICAgICAgIGxldCByb3c6IG51bWJlciA9IGovY29sc051bWJlcnwwO1xcbiAgICAgICAgICAgIGlmICghcmVzdWx0W3Jvd10pIHtcXG4gICAgICAgICAgICAgICAgcmVzdWx0W3Jvd10gPSB7fTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmVzdWx0W3Jvd11bY29sXSA9IHJvdyArICc6JyArIGNvbDtcXG4gICAgICAgICAgICBpZiAoIWhlYWRlcnNbY29sXSkge1xcbiAgICAgICAgICAgICAgICBoZWFkZXJzW2NvbF0gPSB7XFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBnZW5lcmF0ZUhlYWRlcihjb2wpLFxcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogY29sLnRvU3RyaW5nKClcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgcm93czogcmVzdWx0LFxcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcXG4gICAgICAgIH07XFxuICAgIH1cXG5cXG5cXG4gICAgY29uc3QgZGl2OiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xcbiAgICBkaXYuaW5uZXJIVE1MID0gJzxyZXZvLWdyaWQgY2xhc3M9XFxcImdyaWQtY29tcG9uZW50XFxcIj48L3Jldm8tZ3JpZD4nO1xcblxcblxcbiAgICBjb25zdCBncmlkOiBIVE1MUmV2b0dyaWRFbGVtZW50fG51bGwgPSBkaXYucXVlcnlTZWxlY3RvcigncmV2by1ncmlkJyk7XFxuICAgIGlmIChncmlkKSB7XFxuICAgICAgICBjb25zdCBkYXRhID0gZ2VuZXJhdGVGYWtlRGF0YU9iamVjdCgxMDAwLCAxMDApO1xcbiAgICAgICAgZ3JpZC5jb2x1bW5zID0gZGF0YS5oZWFkZXJzO1xcbiAgICAgICAgZ3JpZC5zb3VyY2UgPSBkYXRhLnJvd3M7XFxuICAgIH1cXG4gICAgcmV0dXJuIGRpdjtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wic291cmNlLWFwaS10eXBlc2NyaXB0LS1iYXNpYy1zYW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI3LFwibGluZVwiOjE3fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NzN9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjcsXCJsaW5lXCI6MTd9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NzN9fX07XG4gICAgXG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHsgYXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzIH0gZnJvbSAnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcic7XFxuaW1wb3J0IHtDb2x1bW5EYXRhU2NoZW1hLCBEYXRhVHlwZX0gZnJvbSBcXFwiQHJldm9saXN0L3Jldm9ncmlkL2Rpc3QvdHlwZXMvaW50ZXJmYWNlc1xcXCI7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJ1NvdXJjZSBBcGkvVHlwZXNjcmlwdCdcXG59O1xcblxcblxcbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcXG4gICAgLy8gZGVmaW5lIGN1c3RvbSBlbGVtZW50ICc8cmV2by1ncmlkLz4nLCB3ZSBjYW4gaWdub3JlIGFwcGx5UG9seWZpbGxzIGlmIHdlIGFyZSBub3Qgc3VwcG9ydGluZyBJRTExXFxuICAgIGFwcGx5UG9seWZpbGxzKCkudGhlbigoKSA9PiB7XFxuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50cygpO1xcbiAgICB9KTtcXG5cXG4gICAgLy8gaGVhZGVyIGxhYmVscyBnZW5lcmF0aW9uXFxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlSGVhZGVyKGluZGV4OiBudW1iZXIpIHtcXG4gICAgICAgIGxldCBkaXZpZGVuZDogbnVtYmVyID0gaW5kZXggKyAxO1xcbiAgICAgICAgbGV0IGNvbHVtbkxhYmVsID0gJyc7XFxuICAgICAgICBsZXQgbW9kdWxvO1xcbiAgICAgICAgd2hpbGUgKGRpdmlkZW5kID4gMCkge1xcbiAgICAgICAgICAgIG1vZHVsbyA9IChkaXZpZGVuZCAtIDEpICUgMjY7XFxuICAgICAgICAgICAgY29sdW1uTGFiZWwgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDY1ICsgbW9kdWxvKSArIGNvbHVtbkxhYmVsO1xcbiAgICAgICAgICAgIGRpdmlkZW5kID0gcGFyc2VJbnQoKChkaXZpZGVuZCAtIG1vZHVsbykgLyAyNikudG9TdHJpbmcoKSwgMTApO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIGNvbHVtbkxhYmVsO1xcbiAgICB9XFxuXFxuICAgIC8vIGZha2UgZGF0YSBnZW5lcmF0aW9uIGFzIE9iamVjdCBpbnB1dCBzb3VyY2VcXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVGYWtlRGF0YU9iamVjdChyb3dzTnVtYmVyOiBudW1iZXIsIGNvbHNOdW1iZXI6IG51bWJlcikge1xcbiAgICAgICAgY29uc3QgcmVzdWx0OiBEYXRhVHlwZVtdID0gW107XFxuICAgICAgICBjb25zdCBoZWFkZXJzOiBDb2x1bW5EYXRhU2NoZW1hW10gPSBbXTtcXG4gICAgICAgIGNvbnN0IGFsbCA9IGNvbHNOdW1iZXIgKiByb3dzTnVtYmVyO1xcbiAgICAgICAgZm9yIChsZXQgajogbnVtYmVyID0gMDsgaiA8IGFsbDsgaisrKSB7XFxuICAgICAgICAgICAgbGV0IGNvbDogbnVtYmVyID0gaiVjb2xzTnVtYmVyO1xcbiAgICAgICAgICAgIGxldCByb3c6IG51bWJlciA9IGovY29sc051bWJlcnwwO1xcbiAgICAgICAgICAgIGlmICghcmVzdWx0W3Jvd10pIHtcXG4gICAgICAgICAgICAgICAgcmVzdWx0W3Jvd10gPSB7fTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmVzdWx0W3Jvd11bY29sXSA9IHJvdyArICc6JyArIGNvbDtcXG4gICAgICAgICAgICBpZiAoIWhlYWRlcnNbY29sXSkge1xcbiAgICAgICAgICAgICAgICBoZWFkZXJzW2NvbF0gPSB7XFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBnZW5lcmF0ZUhlYWRlcihjb2wpLFxcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogY29sLnRvU3RyaW5nKClcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgcm93czogcmVzdWx0LFxcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcXG4gICAgICAgIH07XFxuICAgIH1cXG5cXG5cXG4gICAgY29uc3QgZGl2OiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xcbiAgICBkaXYuaW5uZXJIVE1MID0gJzxyZXZvLWdyaWQgY2xhc3M9XFxcImdyaWQtY29tcG9uZW50XFxcIj48L3Jldm8tZ3JpZD4nO1xcblxcblxcbiAgICBjb25zdCBncmlkOiBIVE1MUmV2b0dyaWRFbGVtZW50fG51bGwgPSBkaXYucXVlcnlTZWxlY3RvcigncmV2by1ncmlkJyk7XFxuICAgIGlmIChncmlkKSB7XFxuICAgICAgICBjb25zdCBkYXRhID0gZ2VuZXJhdGVGYWtlRGF0YU9iamVjdCgxMDAwLCAxMDApO1xcbiAgICAgICAgZ3JpZC5jb2x1bW5zID0gZGF0YS5oZWFkZXJzO1xcbiAgICAgICAgZ3JpZC5zb3VyY2UgPSBkYXRhLnJvd3M7XFxuICAgIH1cXG4gICAgcmV0dXJuIGRpdjtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wic291cmNlLWFwaS10eXBlc2NyaXB0LS1iYXNpYy1zYW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI3LFwibGluZVwiOjl9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2NX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNyxcImxpbmVcIjo5fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjY1fX19O1xuICAgIFxuaW1wb3J0IHsgYXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzIH0gZnJvbSAnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcic7XG5pbXBvcnQge0NvbHVtbkRhdGFTY2hlbWEsIERhdGFUeXBlfSBmcm9tIFwiQHJldm9saXN0L3Jldm9ncmlkL2Rpc3QvdHlwZXMvaW50ZXJmYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7cGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0IHsgYXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzIH0gZnJvbSAnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcic7XFxcXG5pbXBvcnQge0NvbHVtbkRhdGFTY2hlbWEsIERhdGFUeXBlfSBmcm9tIFxcXFxcXFwiQHJldm9saXN0L3Jldm9ncmlkL2Rpc3QvdHlwZXMvaW50ZXJmYWNlc1xcXFxcXFwiO1xcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICdTb3VyY2UgQXBpL1R5cGVzY3JpcHQnXFxcXG59O1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcXFxcbiAgICAvLyBkZWZpbmUgY3VzdG9tIGVsZW1lbnQgJzxyZXZvLWdyaWQvPicsIHdlIGNhbiBpZ25vcmUgYXBwbHlQb2x5ZmlsbHMgaWYgd2UgYXJlIG5vdCBzdXBwb3J0aW5nIElFMTFcXFxcbiAgICBhcHBseVBvbHlmaWxscygpLnRoZW4oKCkgPT4ge1xcXFxuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50cygpO1xcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgLy8gaGVhZGVyIGxhYmVscyBnZW5lcmF0aW9uXFxcXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVIZWFkZXIoaW5kZXg6IG51bWJlcikge1xcXFxuICAgICAgICBsZXQgZGl2aWRlbmQ6IG51bWJlciA9IGluZGV4ICsgMTtcXFxcbiAgICAgICAgbGV0IGNvbHVtbkxhYmVsID0gJyc7XFxcXG4gICAgICAgIGxldCBtb2R1bG87XFxcXG4gICAgICAgIHdoaWxlIChkaXZpZGVuZCA+IDApIHtcXFxcbiAgICAgICAgICAgIG1vZHVsbyA9IChkaXZpZGVuZCAtIDEpICUgMjY7XFxcXG4gICAgICAgICAgICBjb2x1bW5MYWJlbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoNjUgKyBtb2R1bG8pICsgY29sdW1uTGFiZWw7XFxcXG4gICAgICAgICAgICBkaXZpZGVuZCA9IHBhcnNlSW50KCgoZGl2aWRlbmQgLSBtb2R1bG8pIC8gMjYpLnRvU3RyaW5nKCksIDEwKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4gY29sdW1uTGFiZWw7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgLy8gZmFrZSBkYXRhIGdlbmVyYXRpb24gYXMgT2JqZWN0IGlucHV0IHNvdXJjZVxcXFxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlRmFrZURhdGFPYmplY3Qocm93c051bWJlcjogbnVtYmVyLCBjb2xzTnVtYmVyOiBudW1iZXIpIHtcXFxcbiAgICAgICAgY29uc3QgcmVzdWx0OiBEYXRhVHlwZVtdID0gW107XFxcXG4gICAgICAgIGNvbnN0IGhlYWRlcnM6IENvbHVtbkRhdGFTY2hlbWFbXSA9IFtdO1xcXFxuICAgICAgICBjb25zdCBhbGwgPSBjb2xzTnVtYmVyICogcm93c051bWJlcjtcXFxcbiAgICAgICAgZm9yIChsZXQgajogbnVtYmVyID0gMDsgaiA8IGFsbDsgaisrKSB7XFxcXG4gICAgICAgICAgICBsZXQgY29sOiBudW1iZXIgPSBqJWNvbHNOdW1iZXI7XFxcXG4gICAgICAgICAgICBsZXQgcm93OiBudW1iZXIgPSBqL2NvbHNOdW1iZXJ8MDtcXFxcbiAgICAgICAgICAgIGlmICghcmVzdWx0W3Jvd10pIHtcXFxcbiAgICAgICAgICAgICAgICByZXN1bHRbcm93XSA9IHt9O1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmVzdWx0W3Jvd11bY29sXSA9IHJvdyArICc6JyArIGNvbDtcXFxcbiAgICAgICAgICAgIGlmICghaGVhZGVyc1tjb2xdKSB7XFxcXG4gICAgICAgICAgICAgICAgaGVhZGVyc1tjb2xdID0ge1xcXFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBnZW5lcmF0ZUhlYWRlcihjb2wpLFxcXFxuICAgICAgICAgICAgICAgICAgICBwcm9wOiBjb2wudG9TdHJpbmcoKVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4ge1xcXFxuICAgICAgICAgICAgcm93czogcmVzdWx0LFxcXFxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyc1xcXFxuICAgICAgICB9O1xcXFxuICAgIH1cXFxcblxcXFxuXFxcXG4gICAgY29uc3QgZGl2OiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xcXFxuICAgIGRpdi5pbm5lckhUTUwgPSAnPHJldm8tZ3JpZCBjbGFzcz1cXFxcXFxcImdyaWQtY29tcG9uZW50XFxcXFxcXCI+PC9yZXZvLWdyaWQ+JztcXFxcblxcXFxuXFxcXG4gICAgY29uc3QgZ3JpZDogSFRNTFJldm9HcmlkRWxlbWVudHxudWxsID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3Jldm8tZ3JpZCcpO1xcXFxuICAgIGlmIChncmlkKSB7XFxcXG4gICAgICAgIGNvbnN0IGRhdGEgPSBnZW5lcmF0ZUZha2VEYXRhT2JqZWN0KDEwMDAsIDEwMCk7XFxcXG4gICAgICAgIGdyaWQuY29sdW1ucyA9IGRhdGEuaGVhZGVycztcXFxcbiAgICAgICAgZ3JpZC5zb3VyY2UgPSBkYXRhLnJvd3M7XFxcXG4gICAgfVxcXFxuICAgIHJldHVybiBkaXY7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCJzb3VyY2UtYXBpLXR5cGVzY3JpcHQtLWJhc2ljLXNhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjI3LFxcXCJsaW5lXFxcIjo5fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjV9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjoyNyxcXFwibGluZVxcXCI6OX0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2NX19fTtcXG4gICAgXFxuaW1wb3J0IHsgYXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzIH0gZnJvbSAnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcic7XFxuaW1wb3J0IHtDb2x1bW5EYXRhU2NoZW1hLCBEYXRhVHlwZX0gZnJvbSBcXFwiQHJldm9saXN0L3Jldm9ncmlkL2Rpc3QvdHlwZXMvaW50ZXJmYWNlc1xcXCI7XFxuXFxuZXhwb3J0IGRlZmF1bHQge3BhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0IHsgYXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzIH0gZnJvbSAnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcic7XFxcXG5pbXBvcnQge0NvbHVtbkRhdGFTY2hlbWEsIERhdGFUeXBlfSBmcm9tIFxcXFxcXFwiQHJldm9saXN0L3Jldm9ncmlkL2Rpc3QvdHlwZXMvaW50ZXJmYWNlc1xcXFxcXFwiO1xcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICdTb3VyY2UgQXBpL1R5cGVzY3JpcHQnXFxcXG59O1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcXFxcbiAgICAvLyBkZWZpbmUgY3VzdG9tIGVsZW1lbnQgJzxyZXZvLWdyaWQvPicsIHdlIGNhbiBpZ25vcmUgYXBwbHlQb2x5ZmlsbHMgaWYgd2UgYXJlIG5vdCBzdXBwb3J0aW5nIElFMTFcXFxcbiAgICBhcHBseVBvbHlmaWxscygpLnRoZW4oKCkgPT4ge1xcXFxuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50cygpO1xcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgLy8gaGVhZGVyIGxhYmVscyBnZW5lcmF0aW9uXFxcXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVIZWFkZXIoaW5kZXg6IG51bWJlcikge1xcXFxuICAgICAgICBsZXQgZGl2aWRlbmQ6IG51bWJlciA9IGluZGV4ICsgMTtcXFxcbiAgICAgICAgbGV0IGNvbHVtbkxhYmVsID0gJyc7XFxcXG4gICAgICAgIGxldCBtb2R1bG87XFxcXG4gICAgICAgIHdoaWxlIChkaXZpZGVuZCA+IDApIHtcXFxcbiAgICAgICAgICAgIG1vZHVsbyA9IChkaXZpZGVuZCAtIDEpICUgMjY7XFxcXG4gICAgICAgICAgICBjb2x1bW5MYWJlbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoNjUgKyBtb2R1bG8pICsgY29sdW1uTGFiZWw7XFxcXG4gICAgICAgICAgICBkaXZpZGVuZCA9IHBhcnNlSW50KCgoZGl2aWRlbmQgLSBtb2R1bG8pIC8gMjYpLnRvU3RyaW5nKCksIDEwKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4gY29sdW1uTGFiZWw7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgLy8gZmFrZSBkYXRhIGdlbmVyYXRpb24gYXMgT2JqZWN0IGlucHV0IHNvdXJjZVxcXFxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlRmFrZURhdGFPYmplY3Qocm93c051bWJlcjogbnVtYmVyLCBjb2xzTnVtYmVyOiBudW1iZXIpIHtcXFxcbiAgICAgICAgY29uc3QgcmVzdWx0OiBEYXRhVHlwZVtdID0gW107XFxcXG4gICAgICAgIGNvbnN0IGhlYWRlcnM6IENvbHVtbkRhdGFTY2hlbWFbXSA9IFtdO1xcXFxuICAgICAgICBjb25zdCBhbGwgPSBjb2xzTnVtYmVyICogcm93c051bWJlcjtcXFxcbiAgICAgICAgZm9yIChsZXQgajogbnVtYmVyID0gMDsgaiA8IGFsbDsgaisrKSB7XFxcXG4gICAgICAgICAgICBsZXQgY29sOiBudW1iZXIgPSBqJWNvbHNOdW1iZXI7XFxcXG4gICAgICAgICAgICBsZXQgcm93OiBudW1iZXIgPSBqL2NvbHNOdW1iZXJ8MDtcXFxcbiAgICAgICAgICAgIGlmICghcmVzdWx0W3Jvd10pIHtcXFxcbiAgICAgICAgICAgICAgICByZXN1bHRbcm93XSA9IHt9O1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmVzdWx0W3Jvd11bY29sXSA9IHJvdyArICc6JyArIGNvbDtcXFxcbiAgICAgICAgICAgIGlmICghaGVhZGVyc1tjb2xdKSB7XFxcXG4gICAgICAgICAgICAgICAgaGVhZGVyc1tjb2xdID0ge1xcXFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBnZW5lcmF0ZUhlYWRlcihjb2wpLFxcXFxuICAgICAgICAgICAgICAgICAgICBwcm9wOiBjb2wudG9TdHJpbmcoKVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4ge1xcXFxuICAgICAgICAgICAgcm93czogcmVzdWx0LFxcXFxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyc1xcXFxuICAgICAgICB9O1xcXFxuICAgIH1cXFxcblxcXFxuXFxcXG4gICAgY29uc3QgZGl2OiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xcXFxuICAgIGRpdi5pbm5lckhUTUwgPSAnPHJldm8tZ3JpZCBjbGFzcz1cXFxcXFxcImdyaWQtY29tcG9uZW50XFxcXFxcXCI+PC9yZXZvLWdyaWQ+JztcXFxcblxcXFxuXFxcXG4gICAgY29uc3QgZ3JpZDogSFRNTFJldm9HcmlkRWxlbWVudHxudWxsID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3Jldm8tZ3JpZCcpO1xcXFxuICAgIGlmIChncmlkKSB7XFxcXG4gICAgICAgIGNvbnN0IGRhdGEgPSBnZW5lcmF0ZUZha2VEYXRhT2JqZWN0KDEwMDAsIDEwMCk7XFxcXG4gICAgICAgIGdyaWQuY29sdW1ucyA9IGRhdGEuaGVhZGVycztcXFxcbiAgICAgICAgZ3JpZC5zb3VyY2UgPSBkYXRhLnJvd3M7XFxcXG4gICAgfVxcXFxuICAgIHJldHVybiBkaXY7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcInNvdXJjZS1hcGktdHlwZXNjcmlwdC0tYmFzaWMtc2FtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MjcsXFxcImxpbmVcXFwiOjl9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2NX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjI3LFxcXCJsaW5lXFxcIjo5fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY1fX19fSx9LFxcbiAgICB0aXRsZTogJ1NvdXJjZSBBcGkvVHlwZXNjcmlwdCdcXG59O1xcblxcblxcbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcXG4gICAgLy8gZGVmaW5lIGN1c3RvbSBlbGVtZW50ICc8cmV2by1ncmlkLz4nLCB3ZSBjYW4gaWdub3JlIGFwcGx5UG9seWZpbGxzIGlmIHdlIGFyZSBub3Qgc3VwcG9ydGluZyBJRTExXFxuICAgIGFwcGx5UG9seWZpbGxzKCkudGhlbigoKSA9PiB7XFxuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50cygpO1xcbiAgICB9KTtcXG5cXG4gICAgLy8gaGVhZGVyIGxhYmVscyBnZW5lcmF0aW9uXFxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlSGVhZGVyKGluZGV4OiBudW1iZXIpIHtcXG4gICAgICAgIGxldCBkaXZpZGVuZDogbnVtYmVyID0gaW5kZXggKyAxO1xcbiAgICAgICAgbGV0IGNvbHVtbkxhYmVsID0gJyc7XFxuICAgICAgICBsZXQgbW9kdWxvO1xcbiAgICAgICAgd2hpbGUgKGRpdmlkZW5kID4gMCkge1xcbiAgICAgICAgICAgIG1vZHVsbyA9IChkaXZpZGVuZCAtIDEpICUgMjY7XFxuICAgICAgICAgICAgY29sdW1uTGFiZWwgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDY1ICsgbW9kdWxvKSArIGNvbHVtbkxhYmVsO1xcbiAgICAgICAgICAgIGRpdmlkZW5kID0gcGFyc2VJbnQoKChkaXZpZGVuZCAtIG1vZHVsbykgLyAyNikudG9TdHJpbmcoKSwgMTApO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIGNvbHVtbkxhYmVsO1xcbiAgICB9XFxuXFxuICAgIC8vIGZha2UgZGF0YSBnZW5lcmF0aW9uIGFzIE9iamVjdCBpbnB1dCBzb3VyY2VcXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVGYWtlRGF0YU9iamVjdChyb3dzTnVtYmVyOiBudW1iZXIsIGNvbHNOdW1iZXI6IG51bWJlcikge1xcbiAgICAgICAgY29uc3QgcmVzdWx0OiBEYXRhVHlwZVtdID0gW107XFxuICAgICAgICBjb25zdCBoZWFkZXJzOiBDb2x1bW5EYXRhU2NoZW1hW10gPSBbXTtcXG4gICAgICAgIGNvbnN0IGFsbCA9IGNvbHNOdW1iZXIgKiByb3dzTnVtYmVyO1xcbiAgICAgICAgZm9yIChsZXQgajogbnVtYmVyID0gMDsgaiA8IGFsbDsgaisrKSB7XFxuICAgICAgICAgICAgbGV0IGNvbDogbnVtYmVyID0gaiVjb2xzTnVtYmVyO1xcbiAgICAgICAgICAgIGxldCByb3c6IG51bWJlciA9IGovY29sc051bWJlcnwwO1xcbiAgICAgICAgICAgIGlmICghcmVzdWx0W3Jvd10pIHtcXG4gICAgICAgICAgICAgICAgcmVzdWx0W3Jvd10gPSB7fTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmVzdWx0W3Jvd11bY29sXSA9IHJvdyArICc6JyArIGNvbDtcXG4gICAgICAgICAgICBpZiAoIWhlYWRlcnNbY29sXSkge1xcbiAgICAgICAgICAgICAgICBoZWFkZXJzW2NvbF0gPSB7XFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBnZW5lcmF0ZUhlYWRlcihjb2wpLFxcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogY29sLnRvU3RyaW5nKClcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgcm93czogcmVzdWx0LFxcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcXG4gICAgICAgIH07XFxuICAgIH1cXG5cXG5cXG4gICAgY29uc3QgZGl2OiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xcbiAgICBkaXYuaW5uZXJIVE1MID0gJzxyZXZvLWdyaWQgY2xhc3M9XFxcImdyaWQtY29tcG9uZW50XFxcIj48L3Jldm8tZ3JpZD4nO1xcblxcblxcbiAgICBjb25zdCBncmlkOiBIVE1MUmV2b0dyaWRFbGVtZW50fG51bGwgPSBkaXYucXVlcnlTZWxlY3RvcigncmV2by1ncmlkJyk7XFxuICAgIGlmIChncmlkKSB7XFxuICAgICAgICBjb25zdCBkYXRhID0gZ2VuZXJhdGVGYWtlRGF0YU9iamVjdCgxMDAwLCAxMDApO1xcbiAgICAgICAgZ3JpZC5jb2x1bW5zID0gZGF0YS5oZWFkZXJzO1xcbiAgICAgICAgZ3JpZC5zb3VyY2UgPSBkYXRhLnJvd3M7XFxuICAgIH1cXG4gICAgcmV0dXJuIGRpdjtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wic291cmNlLWFwaS10eXBlc2NyaXB0LS1iYXNpYy1zYW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI3LFwibGluZVwiOjE3fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NzN9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjcsXCJsaW5lXCI6MTd9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NzN9fX19LFwic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcImltcG9ydCB7IGFwcGx5UG9seWZpbGxzLCBkZWZpbmVDdXN0b21FbGVtZW50cyB9IGZyb20gJ0ByZXZvbGlzdC9yZXZvZ3JpZC9sb2FkZXInO1xcbmltcG9ydCB7Q29sdW1uRGF0YVNjaGVtYSwgRGF0YVR5cGV9IGZyb20gXFxcIkByZXZvbGlzdC9yZXZvZ3JpZC9kaXN0L3R5cGVzL2ludGVyZmFjZXNcXFwiO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICdTb3VyY2UgQXBpL1R5cGVzY3JpcHQnXFxufTtcXG5cXG5cXG5leHBvcnQgY29uc3QgYmFzaWNTYW1wbGUgPSAoKSA9PiB7XFxuICAgIC8vIGRlZmluZSBjdXN0b20gZWxlbWVudCAnPHJldm8tZ3JpZC8+Jywgd2UgY2FuIGlnbm9yZSBhcHBseVBvbHlmaWxscyBpZiB3ZSBhcmUgbm90IHN1cHBvcnRpbmcgSUUxMVxcbiAgICBhcHBseVBvbHlmaWxscygpLnRoZW4oKCkgPT4ge1xcbiAgICAgICAgZGVmaW5lQ3VzdG9tRWxlbWVudHMoKTtcXG4gICAgfSk7XFxuXFxuICAgIC8vIGhlYWRlciBsYWJlbHMgZ2VuZXJhdGlvblxcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUhlYWRlcihpbmRleDogbnVtYmVyKSB7XFxuICAgICAgICBsZXQgZGl2aWRlbmQ6IG51bWJlciA9IGluZGV4ICsgMTtcXG4gICAgICAgIGxldCBjb2x1bW5MYWJlbCA9ICcnO1xcbiAgICAgICAgbGV0IG1vZHVsbztcXG4gICAgICAgIHdoaWxlIChkaXZpZGVuZCA+IDApIHtcXG4gICAgICAgICAgICBtb2R1bG8gPSAoZGl2aWRlbmQgLSAxKSAlIDI2O1xcbiAgICAgICAgICAgIGNvbHVtbkxhYmVsID0gU3RyaW5nLmZyb21DaGFyQ29kZSg2NSArIG1vZHVsbykgKyBjb2x1bW5MYWJlbDtcXG4gICAgICAgICAgICBkaXZpZGVuZCA9IHBhcnNlSW50KCgoZGl2aWRlbmQgLSBtb2R1bG8pIC8gMjYpLnRvU3RyaW5nKCksIDEwKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBjb2x1bW5MYWJlbDtcXG4gICAgfVxcblxcbiAgICAvLyBmYWtlIGRhdGEgZ2VuZXJhdGlvbiBhcyBPYmplY3QgaW5wdXQgc291cmNlXFxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlRmFrZURhdGFPYmplY3Qocm93c051bWJlcjogbnVtYmVyLCBjb2xzTnVtYmVyOiBudW1iZXIpIHtcXG4gICAgICAgIGNvbnN0IHJlc3VsdDogRGF0YVR5cGVbXSA9IFtdO1xcbiAgICAgICAgY29uc3QgaGVhZGVyczogQ29sdW1uRGF0YVNjaGVtYVtdID0gW107XFxuICAgICAgICBjb25zdCBhbGwgPSBjb2xzTnVtYmVyICogcm93c051bWJlcjtcXG4gICAgICAgIGZvciAobGV0IGo6IG51bWJlciA9IDA7IGogPCBhbGw7IGorKykge1xcbiAgICAgICAgICAgIGxldCBjb2w6IG51bWJlciA9IGolY29sc051bWJlcjtcXG4gICAgICAgICAgICBsZXQgcm93OiBudW1iZXIgPSBqL2NvbHNOdW1iZXJ8MDtcXG4gICAgICAgICAgICBpZiAoIXJlc3VsdFtyb3ddKSB7XFxuICAgICAgICAgICAgICAgIHJlc3VsdFtyb3ddID0ge307XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJlc3VsdFtyb3ddW2NvbF0gPSByb3cgKyAnOicgKyBjb2w7XFxuICAgICAgICAgICAgaWYgKCFoZWFkZXJzW2NvbF0pIHtcXG4gICAgICAgICAgICAgICAgaGVhZGVyc1tjb2xdID0ge1xcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZ2VuZXJhdGVIZWFkZXIoY29sKSxcXG4gICAgICAgICAgICAgICAgICAgIHByb3A6IGNvbC50b1N0cmluZygpXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIHJvd3M6IHJlc3VsdCxcXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzXFxuICAgICAgICB9O1xcbiAgICB9XFxuXFxuXFxuICAgIGNvbnN0IGRpdjogSFRNTERpdkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcXG4gICAgZGl2LmlubmVySFRNTCA9ICc8cmV2by1ncmlkIGNsYXNzPVxcXCJncmlkLWNvbXBvbmVudFxcXCI+PC9yZXZvLWdyaWQ+JztcXG5cXG5cXG4gICAgY29uc3QgZ3JpZDogSFRNTFJldm9HcmlkRWxlbWVudHxudWxsID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3Jldm8tZ3JpZCcpO1xcbiAgICBpZiAoZ3JpZCkge1xcbiAgICAgICAgY29uc3QgZGF0YSA9IGdlbmVyYXRlRmFrZURhdGFPYmplY3QoMTAwMCwgMTAwKTtcXG4gICAgICAgIGdyaWQuY29sdW1ucyA9IGRhdGEuaGVhZGVycztcXG4gICAgICAgIGdyaWQuc291cmNlID0gZGF0YS5yb3dzO1xcbiAgICB9XFxuICAgIHJldHVybiBkaXY7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcInNvdXJjZS1hcGktdHlwZXNjcmlwdC0tYmFzaWMtc2FtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNyxcImxpbmVcIjo5fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NjV9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjcsXCJsaW5lXCI6OX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2NX19fX0sfSxcbiAgICB0aXRsZTogJ1NvdXJjZSBBcGkvVHlwZXNjcmlwdCdcbn07XG5cblxuZXhwb3J0IGNvbnN0IGJhc2ljU2FtcGxlID0gKCkgPT4ge1xuICAgIC8vIGRlZmluZSBjdXN0b20gZWxlbWVudCAnPHJldm8tZ3JpZC8+Jywgd2UgY2FuIGlnbm9yZSBhcHBseVBvbHlmaWxscyBpZiB3ZSBhcmUgbm90IHN1cHBvcnRpbmcgSUUxMVxuICAgIGFwcGx5UG9seWZpbGxzKCkudGhlbigoKSA9PiB7XG4gICAgICAgIGRlZmluZUN1c3RvbUVsZW1lbnRzKCk7XG4gICAgfSk7XG5cbiAgICAvLyBoZWFkZXIgbGFiZWxzIGdlbmVyYXRpb25cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUhlYWRlcihpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGxldCBkaXZpZGVuZDogbnVtYmVyID0gaW5kZXggKyAxO1xuICAgICAgICBsZXQgY29sdW1uTGFiZWwgPSAnJztcbiAgICAgICAgbGV0IG1vZHVsbztcbiAgICAgICAgd2hpbGUgKGRpdmlkZW5kID4gMCkge1xuICAgICAgICAgICAgbW9kdWxvID0gKGRpdmlkZW5kIC0gMSkgJSAyNjtcbiAgICAgICAgICAgIGNvbHVtbkxhYmVsID0gU3RyaW5nLmZyb21DaGFyQ29kZSg2NSArIG1vZHVsbykgKyBjb2x1bW5MYWJlbDtcbiAgICAgICAgICAgIGRpdmlkZW5kID0gcGFyc2VJbnQoKChkaXZpZGVuZCAtIG1vZHVsbykgLyAyNikudG9TdHJpbmcoKSwgMTApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2x1bW5MYWJlbDtcbiAgICB9XG5cbiAgICAvLyBmYWtlIGRhdGEgZ2VuZXJhdGlvbiBhcyBPYmplY3QgaW5wdXQgc291cmNlXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVGYWtlRGF0YU9iamVjdChyb3dzTnVtYmVyOiBudW1iZXIsIGNvbHNOdW1iZXI6IG51bWJlcikge1xuICAgICAgICBjb25zdCByZXN1bHQ6IERhdGFUeXBlW10gPSBbXTtcbiAgICAgICAgY29uc3QgaGVhZGVyczogQ29sdW1uRGF0YVNjaGVtYVtdID0gW107XG4gICAgICAgIGNvbnN0IGFsbCA9IGNvbHNOdW1iZXIgKiByb3dzTnVtYmVyO1xuICAgICAgICBmb3IgKGxldCBqOiBudW1iZXIgPSAwOyBqIDwgYWxsOyBqKyspIHtcbiAgICAgICAgICAgIGxldCBjb2w6IG51bWJlciA9IGolY29sc051bWJlcjtcbiAgICAgICAgICAgIGxldCByb3c6IG51bWJlciA9IGovY29sc051bWJlcnwwO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHRbcm93XSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtyb3ddID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRbcm93XVtjb2xdID0gcm93ICsgJzonICsgY29sO1xuICAgICAgICAgICAgaWYgKCFoZWFkZXJzW2NvbF0pIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzW2NvbF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGdlbmVyYXRlSGVhZGVyKGNvbCksXG4gICAgICAgICAgICAgICAgICAgIHByb3A6IGNvbC50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByb3dzOiByZXN1bHQsXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzXG4gICAgICAgIH07XG4gICAgfVxuXG5cbiAgICBjb25zdCBkaXY6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmlubmVySFRNTCA9ICc8cmV2by1ncmlkIGNsYXNzPVwiZ3JpZC1jb21wb25lbnRcIj48L3Jldm8tZ3JpZD4nO1xuXG5cbiAgICBjb25zdCBncmlkOiBIVE1MUmV2b0dyaWRFbGVtZW50fG51bGwgPSBkaXYucXVlcnlTZWxlY3RvcigncmV2by1ncmlkJyk7XG4gICAgaWYgKGdyaWQpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGdlbmVyYXRlRmFrZURhdGFPYmplY3QoMTAwMCwgMTAwKTtcbiAgICAgICAgZ3JpZC5jb2x1bW5zID0gZGF0YS5oZWFkZXJzO1xuICAgICAgICBncmlkLnNvdXJjZSA9IGRhdGEucm93cztcbiAgICB9XG4gICAgcmV0dXJuIGRpdjtcbn07XG4iLCJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgVnVlSnMgZnJvbSAndnVlJztcXFxcbmltcG9ydCAnLi4vYXNzZXRzL2xvY2FsLmdyaWQuc2Nzcyc7XFxcXG5jb25zdCBWdWUgPSBWdWVKcztcXFxcblxcXFxuY29uc3Qge2FwcGx5UG9seWZpbGxzLCBkZWZpbmVDdXN0b21FbGVtZW50c30gPSByZXF1aXJlKCdAcmV2b2xpc3QvcmV2b2dyaWQvbG9hZGVyJyk7XFxcXG5jb25zdCBwZW9wbGUgPSByZXF1aXJlKCcuLi9hc3NldHMvcGVvcGxlJykuZGVmYXVsdDtcXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnU291cmNlIEFwaS9WdWVKcydcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcXFxcbiAgICAvLyBzdG9yeWJvb2tcXFxcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcXFxcbiAgICBzZXRUaW1lb3V0KCgpID0+IHZ1ZUpzR3MoKSwgMCk7XFxcXG4gICAgZGl2LnNldEF0dHJpYnV0ZSgnaWQnLCAnYXBwJyk7XFxcXG4gICAgcmV0dXJuIGRpdjtcXFxcbn07XFxcXG5cXFxcbmNvbnN0IHZ1ZUpzR3MgPSAoKSA9PiB7XFxcXG4gICAgLy8gZGVmaW5lIGN1c3RvbSBlbGVtZW50ICc8cmV2by1ncmlkLz4nLCB3ZSBjYW4gaWdub3JlIGFwcGx5UG9seWZpbGxzIGlmIHdlIGFyZSBub3Qgc3VwcG9ydGluZyBJRTExXFxcXG4gICAgYXBwbHlQb2x5ZmlsbHMoKS50aGVuKCgpID0+IHsgZGVmaW5lQ3VzdG9tRWxlbWVudHMoKTsgfSk7XFxcXG4gICAgVnVlLmNvbmZpZy5pZ25vcmVkRWxlbWVudHMgPSBbL3Jldm8tXFxcXFxcXFx3Ki9dOyAvLyBTZXQgaWdub3JlIHdlYi1jb21wb25lbnQgYW5kIGF2b2lkIHBhcnNpbmcgaXQgYXMgdnVlanNcXFxcblxcXFxuICAgIFZ1ZS5jb21wb25lbnQoJ3Jldm9ncmlkLXZ1ZS13cmFwcGVyJywge1xcXFxuICAgICAgICB0ZW1wbGF0ZTogJzxyZXZvLWdyaWQgY2xhc3M9XFxcXFxcXCJncmlkLWNvbXBvbmVudFxcXFxcXFwiIDpzb3VyY2UucHJvcD1cXFxcXFxcInNvdXJjZVxcXFxcXFwiIDpjb2x1bW5zLnByb3A9XFxcXFxcXCJjb2x1bW5zXFxcXFxcXCIgOmRpbWVuc2lvbnMucHJvcD1cXFxcXFxcImRpbWVuc2lvbnNcXFxcXFxcIi8+JyxcXFxcbiAgICAgICAgZGF0YSgpIHtcXFxcbiAgICAgICAgICAgIHJldHVybiB7XFxcXG4gICAgICAgICAgICAgICAgY29sdW1uczogW3tcXFxcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ25hbWUnLFxcXFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnTmFtZSdcXFxcbiAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ2V5ZUNvbG9yJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0V5ZXMnLFxcXFxuICAgICAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6IChoLCBwcm9wcykgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHByb3BzLm1vZGVsW3Byb3BzLnByb3BdO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRleHRcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnaW5uZXItY2VsbCdcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sICB0ZXh0KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICAgICAge1xcXFxuICAgICAgICAgICAgICAgICAgICBwcm9wOiAnZ2VuZGVyJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0dlbmRlcidcXFxcbiAgICAgICAgICAgICAgICB9XSxcXFxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHBlb3BsZSxcXFxcbiAgICAgICAgICAgICAgICBkaW1lbnNpb25zOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbDogeyAwOiA1MDAgfVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH07XFxcXG4gICAgICAgIH1cXFxcbiAgICB9KTtcXFxcblxcXFxuICAgIG5ldyBWdWUoeyByZW5kZXI6IGggPT4gaCgncmV2b2dyaWQtdnVlLXdyYXBwZXInKSB9KS4kbW91bnQoJyNhcHAnKTtcXFxcbn07XFxcXG5cXFxcbmJhc2ljU2FtcGxlLnN0b3J5ID0ge1xcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogeyBzb3VyY2U6IHsgY29kZTogdnVlSnNHcyB9IH0sXFxcXG4gICAgfSxcXFxcbn07XFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCJzb3VyY2UtYXBpLXZ1ZWpzLS1iYXNpYy1zYW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjoyNyxcXFwibGluZVxcXCI6MTJ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoxOH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjI3LFxcXCJsaW5lXFxcIjoxMn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoxOH19fTtcXG4gICAgXFxuaW1wb3J0IFZ1ZUpzIGZyb20gJ3Z1ZSc7XFxuaW1wb3J0ICcuLi9hc3NldHMvbG9jYWwuZ3JpZC5zY3NzJztcXG5jb25zdCBWdWUgPSBWdWVKcztcXG5cXG5jb25zdCB7YXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzfSA9IHJlcXVpcmUoJ0ByZXZvbGlzdC9yZXZvZ3JpZC9sb2FkZXInKTtcXG5jb25zdCBwZW9wbGUgPSByZXF1aXJlKCcuLi9hc3NldHMvcGVvcGxlJykuZGVmYXVsdDtcXG5cXG5leHBvcnQgZGVmYXVsdCB7cGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgVnVlSnMgZnJvbSAndnVlJztcXFxcbmltcG9ydCAnLi4vYXNzZXRzL2xvY2FsLmdyaWQuc2Nzcyc7XFxcXG5jb25zdCBWdWUgPSBWdWVKcztcXFxcblxcXFxuY29uc3Qge2FwcGx5UG9seWZpbGxzLCBkZWZpbmVDdXN0b21FbGVtZW50c30gPSByZXF1aXJlKCdAcmV2b2xpc3QvcmV2b2dyaWQvbG9hZGVyJyk7XFxcXG5jb25zdCBwZW9wbGUgPSByZXF1aXJlKCcuLi9hc3NldHMvcGVvcGxlJykuZGVmYXVsdDtcXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnU291cmNlIEFwaS9WdWVKcydcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcXFxcbiAgICAvLyBzdG9yeWJvb2tcXFxcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcXFxcbiAgICBzZXRUaW1lb3V0KCgpID0+IHZ1ZUpzR3MoKSwgMCk7XFxcXG4gICAgZGl2LnNldEF0dHJpYnV0ZSgnaWQnLCAnYXBwJyk7XFxcXG4gICAgcmV0dXJuIGRpdjtcXFxcbn07XFxcXG5cXFxcbmNvbnN0IHZ1ZUpzR3MgPSAoKSA9PiB7XFxcXG4gICAgLy8gZGVmaW5lIGN1c3RvbSBlbGVtZW50ICc8cmV2by1ncmlkLz4nLCB3ZSBjYW4gaWdub3JlIGFwcGx5UG9seWZpbGxzIGlmIHdlIGFyZSBub3Qgc3VwcG9ydGluZyBJRTExXFxcXG4gICAgYXBwbHlQb2x5ZmlsbHMoKS50aGVuKCgpID0+IHsgZGVmaW5lQ3VzdG9tRWxlbWVudHMoKTsgfSk7XFxcXG4gICAgVnVlLmNvbmZpZy5pZ25vcmVkRWxlbWVudHMgPSBbL3Jldm8tXFxcXFxcXFx3Ki9dOyAvLyBTZXQgaWdub3JlIHdlYi1jb21wb25lbnQgYW5kIGF2b2lkIHBhcnNpbmcgaXQgYXMgdnVlanNcXFxcblxcXFxuICAgIFZ1ZS5jb21wb25lbnQoJ3Jldm9ncmlkLXZ1ZS13cmFwcGVyJywge1xcXFxuICAgICAgICB0ZW1wbGF0ZTogJzxyZXZvLWdyaWQgY2xhc3M9XFxcXFxcXCJncmlkLWNvbXBvbmVudFxcXFxcXFwiIDpzb3VyY2UucHJvcD1cXFxcXFxcInNvdXJjZVxcXFxcXFwiIDpjb2x1bW5zLnByb3A9XFxcXFxcXCJjb2x1bW5zXFxcXFxcXCIgOmRpbWVuc2lvbnMucHJvcD1cXFxcXFxcImRpbWVuc2lvbnNcXFxcXFxcIi8+JyxcXFxcbiAgICAgICAgZGF0YSgpIHtcXFxcbiAgICAgICAgICAgIHJldHVybiB7XFxcXG4gICAgICAgICAgICAgICAgY29sdW1uczogW3tcXFxcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ25hbWUnLFxcXFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnTmFtZSdcXFxcbiAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ2V5ZUNvbG9yJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0V5ZXMnLFxcXFxuICAgICAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6IChoLCBwcm9wcykgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHByb3BzLm1vZGVsW3Byb3BzLnByb3BdO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRleHRcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnaW5uZXItY2VsbCdcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sICB0ZXh0KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICAgICAge1xcXFxuICAgICAgICAgICAgICAgICAgICBwcm9wOiAnZ2VuZGVyJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0dlbmRlcidcXFxcbiAgICAgICAgICAgICAgICB9XSxcXFxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHBlb3BsZSxcXFxcbiAgICAgICAgICAgICAgICBkaW1lbnNpb25zOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbDogeyAwOiA1MDAgfVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH07XFxcXG4gICAgICAgIH1cXFxcbiAgICB9KTtcXFxcblxcXFxuICAgIG5ldyBWdWUoeyByZW5kZXI6IGggPT4gaCgncmV2b2dyaWQtdnVlLXdyYXBwZXInKSB9KS4kbW91bnQoJyNhcHAnKTtcXFxcbn07XFxcXG5cXFxcbmJhc2ljU2FtcGxlLnN0b3J5ID0ge1xcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogeyBzb3VyY2U6IHsgY29kZTogdnVlSnNHcyB9IH0sXFxcXG4gICAgfSxcXFxcbn07XFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcInNvdXJjZS1hcGktdnVlanMtLWJhc2ljLXNhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjI3LFxcXCJsaW5lXFxcIjoxMn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjE4fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MjcsXFxcImxpbmVcXFwiOjEyfSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjE4fX19fSx9LFxcbiAgICB0aXRsZTogJ1NvdXJjZSBBcGkvVnVlSnMnXFxufTtcXG5cXG5leHBvcnQgY29uc3QgYmFzaWNTYW1wbGUgPSAoKSA9PiB7XFxuICAgIC8vIHN0b3J5Ym9va1xcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcXG4gICAgc2V0VGltZW91dCgoKSA9PiB2dWVKc0dzKCksIDApO1xcbiAgICBkaXYuc2V0QXR0cmlidXRlKCdpZCcsICdhcHAnKTtcXG4gICAgcmV0dXJuIGRpdjtcXG59O1xcblxcbmNvbnN0IHZ1ZUpzR3MgPSAoKSA9PiB7XFxuICAgIC8vIGRlZmluZSBjdXN0b20gZWxlbWVudCAnPHJldm8tZ3JpZC8+Jywgd2UgY2FuIGlnbm9yZSBhcHBseVBvbHlmaWxscyBpZiB3ZSBhcmUgbm90IHN1cHBvcnRpbmcgSUUxMVxcbiAgICBhcHBseVBvbHlmaWxscygpLnRoZW4oKCkgPT4geyBkZWZpbmVDdXN0b21FbGVtZW50cygpOyB9KTtcXG4gICAgVnVlLmNvbmZpZy5pZ25vcmVkRWxlbWVudHMgPSBbL3Jldm8tXFxcXHcqL107IC8vIFNldCBpZ25vcmUgd2ViLWNvbXBvbmVudCBhbmQgYXZvaWQgcGFyc2luZyBpdCBhcyB2dWVqc1xcblxcbiAgICBWdWUuY29tcG9uZW50KCdyZXZvZ3JpZC12dWUtd3JhcHBlcicsIHtcXG4gICAgICAgIHRlbXBsYXRlOiAnPHJldm8tZ3JpZCBjbGFzcz1cXFwiZ3JpZC1jb21wb25lbnRcXFwiIDpzb3VyY2UucHJvcD1cXFwic291cmNlXFxcIiA6Y29sdW1ucy5wcm9wPVxcXCJjb2x1bW5zXFxcIiA6ZGltZW5zaW9ucy5wcm9wPVxcXCJkaW1lbnNpb25zXFxcIi8+JyxcXG4gICAgICAgIGRhdGEoKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgY29sdW1uczogW3tcXG4gICAgICAgICAgICAgICAgICAgIHByb3A6ICduYW1lJyxcXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdOYW1lJ1xcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICB7XFxuICAgICAgICAgICAgICAgICAgICBwcm9wOiAnZXllQ29sb3InLFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0V5ZXMnLFxcbiAgICAgICAgICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAoaCwgcHJvcHMpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gcHJvcHMubW9kZWxbcHJvcHMucHJvcF07XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGV4dFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2lubmVyLWNlbGwnXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgIHRleHQpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICB7XFxuICAgICAgICAgICAgICAgICAgICBwcm9wOiAnZ2VuZGVyJyxcXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdHZW5kZXInXFxuICAgICAgICAgICAgICAgIH1dLFxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHBlb3BsZSxcXG4gICAgICAgICAgICAgICAgZGltZW5zaW9uczoge1xcbiAgICAgICAgICAgICAgICAgICAgY29sOiB7IDA6IDUwMCB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9O1xcbiAgICAgICAgfVxcbiAgICB9KTtcXG5cXG4gICAgbmV3IFZ1ZSh7IHJlbmRlcjogaCA9PiBoKCdyZXZvZ3JpZC12dWUtd3JhcHBlcicpIH0pLiRtb3VudCgnI2FwcCcpO1xcbn07XFxuXFxuYmFzaWNTYW1wbGUuc3RvcnkgPSB7XFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IHsgc291cmNlOiB7IGNvZGU6IHZ1ZUpzR3MgfSB9LFxcbiAgICB9LFxcbn07XCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJzb3VyY2UtYXBpLXZ1ZWpzLS1iYXNpYy1zYW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI3LFwibGluZVwiOjIwfSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6MjZ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjcsXCJsaW5lXCI6MjB9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MjZ9fX07XG4gICAgXG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IFZ1ZUpzIGZyb20gJ3Z1ZSc7XFxuaW1wb3J0ICcuLi9hc3NldHMvbG9jYWwuZ3JpZC5zY3NzJztcXG5jb25zdCBWdWUgPSBWdWVKcztcXG5cXG5jb25zdCB7YXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzfSA9IHJlcXVpcmUoJ0ByZXZvbGlzdC9yZXZvZ3JpZC9sb2FkZXInKTtcXG5jb25zdCBwZW9wbGUgPSByZXF1aXJlKCcuLi9hc3NldHMvcGVvcGxlJykuZGVmYXVsdDtcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnU291cmNlIEFwaS9WdWVKcydcXG59O1xcblxcbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcXG4gICAgLy8gc3Rvcnlib29rXFxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xcbiAgICBzZXRUaW1lb3V0KCgpID0+IHZ1ZUpzR3MoKSwgMCk7XFxuICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2FwcCcpO1xcbiAgICByZXR1cm4gZGl2O1xcbn07XFxuXFxuY29uc3QgdnVlSnNHcyA9ICgpID0+IHtcXG4gICAgLy8gZGVmaW5lIGN1c3RvbSBlbGVtZW50ICc8cmV2by1ncmlkLz4nLCB3ZSBjYW4gaWdub3JlIGFwcGx5UG9seWZpbGxzIGlmIHdlIGFyZSBub3Qgc3VwcG9ydGluZyBJRTExXFxuICAgIGFwcGx5UG9seWZpbGxzKCkudGhlbigoKSA9PiB7IGRlZmluZUN1c3RvbUVsZW1lbnRzKCk7IH0pO1xcbiAgICBWdWUuY29uZmlnLmlnbm9yZWRFbGVtZW50cyA9IFsvcmV2by1cXFxcdyovXTsgLy8gU2V0IGlnbm9yZSB3ZWItY29tcG9uZW50IGFuZCBhdm9pZCBwYXJzaW5nIGl0IGFzIHZ1ZWpzXFxuXFxuICAgIFZ1ZS5jb21wb25lbnQoJ3Jldm9ncmlkLXZ1ZS13cmFwcGVyJywge1xcbiAgICAgICAgdGVtcGxhdGU6ICc8cmV2by1ncmlkIGNsYXNzPVxcXCJncmlkLWNvbXBvbmVudFxcXCIgOnNvdXJjZS5wcm9wPVxcXCJzb3VyY2VcXFwiIDpjb2x1bW5zLnByb3A9XFxcImNvbHVtbnNcXFwiIDpkaW1lbnNpb25zLnByb3A9XFxcImRpbWVuc2lvbnNcXFwiLz4nLFxcbiAgICAgICAgZGF0YSgpIHtcXG4gICAgICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgICAgICBjb2x1bW5zOiBbe1xcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ25hbWUnLFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ05hbWUnXFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgIHtcXG4gICAgICAgICAgICAgICAgICAgIHByb3A6ICdleWVDb2xvcicsXFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnRXllcycsXFxuICAgICAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6IChoLCBwcm9wcykgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBwcm9wcy5tb2RlbFtwcm9wcy5wcm9wXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCgnZGl2Jywge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0ZXh0XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnaW5uZXItY2VsbCdcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAgdGV4dCk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgIHtcXG4gICAgICAgICAgICAgICAgICAgIHByb3A6ICdnZW5kZXInLFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0dlbmRlcidcXG4gICAgICAgICAgICAgICAgfV0sXFxuICAgICAgICAgICAgICAgIHNvdXJjZTogcGVvcGxlLFxcbiAgICAgICAgICAgICAgICBkaW1lbnNpb25zOiB7XFxuICAgICAgICAgICAgICAgICAgICBjb2w6IHsgMDogNTAwIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH07XFxuICAgICAgICB9XFxuICAgIH0pO1xcblxcbiAgICBuZXcgVnVlKHsgcmVuZGVyOiBoID0+IGgoJ3Jldm9ncmlkLXZ1ZS13cmFwcGVyJykgfSkuJG1vdW50KCcjYXBwJyk7XFxufTtcXG5cXG5iYXNpY1NhbXBsZS5zdG9yeSA9IHtcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogeyBzb3VyY2U6IHsgY29kZTogdnVlSnNHcyB9IH0sXFxuICAgIH0sXFxufTtcIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcInNvdXJjZS1hcGktdnVlanMtLWJhc2ljLXNhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjcsXCJsaW5lXCI6MTJ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjoxOH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNyxcImxpbmVcIjoxMn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjoxOH19fTtcbiAgICBcbmltcG9ydCBWdWVKcyBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi9hc3NldHMvbG9jYWwuZ3JpZC5zY3NzJztcbmNvbnN0IFZ1ZSA9IFZ1ZUpzO1xuXG5jb25zdCB7YXBwbHlQb2x5ZmlsbHMsIGRlZmluZUN1c3RvbUVsZW1lbnRzfSA9IHJlcXVpcmUoJ0ByZXZvbGlzdC9yZXZvZ3JpZC9sb2FkZXInKTtcbmNvbnN0IHBlb3BsZSA9IHJlcXVpcmUoJy4uL2Fzc2V0cy9wZW9wbGUnKS5kZWZhdWx0O1xuXG5leHBvcnQgZGVmYXVsdCB7cGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0IFZ1ZUpzIGZyb20gJ3Z1ZSc7XFxcXG5pbXBvcnQgJy4uL2Fzc2V0cy9sb2NhbC5ncmlkLnNjc3MnO1xcXFxuY29uc3QgVnVlID0gVnVlSnM7XFxcXG5cXFxcbmNvbnN0IHthcHBseVBvbHlmaWxscywgZGVmaW5lQ3VzdG9tRWxlbWVudHN9ID0gcmVxdWlyZSgnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcicpO1xcXFxuY29uc3QgcGVvcGxlID0gcmVxdWlyZSgnLi4vYXNzZXRzL3Blb3BsZScpLmRlZmF1bHQ7XFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJ1NvdXJjZSBBcGkvVnVlSnMnXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgYmFzaWNTYW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgLy8gc3Rvcnlib29rXFxcXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XFxcXG4gICAgc2V0VGltZW91dCgoKSA9PiB2dWVKc0dzKCksIDApO1xcXFxuICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2FwcCcpO1xcXFxuICAgIHJldHVybiBkaXY7XFxcXG59O1xcXFxuXFxcXG5jb25zdCB2dWVKc0dzID0gKCkgPT4ge1xcXFxuICAgIC8vIGRlZmluZSBjdXN0b20gZWxlbWVudCAnPHJldm8tZ3JpZC8+Jywgd2UgY2FuIGlnbm9yZSBhcHBseVBvbHlmaWxscyBpZiB3ZSBhcmUgbm90IHN1cHBvcnRpbmcgSUUxMVxcXFxuICAgIGFwcGx5UG9seWZpbGxzKCkudGhlbigoKSA9PiB7IGRlZmluZUN1c3RvbUVsZW1lbnRzKCk7IH0pO1xcXFxuICAgIFZ1ZS5jb25maWcuaWdub3JlZEVsZW1lbnRzID0gWy9yZXZvLVxcXFxcXFxcdyovXTsgLy8gU2V0IGlnbm9yZSB3ZWItY29tcG9uZW50IGFuZCBhdm9pZCBwYXJzaW5nIGl0IGFzIHZ1ZWpzXFxcXG5cXFxcbiAgICBWdWUuY29tcG9uZW50KCdyZXZvZ3JpZC12dWUtd3JhcHBlcicsIHtcXFxcbiAgICAgICAgdGVtcGxhdGU6ICc8cmV2by1ncmlkIGNsYXNzPVxcXFxcXFwiZ3JpZC1jb21wb25lbnRcXFxcXFxcIiA6c291cmNlLnByb3A9XFxcXFxcXCJzb3VyY2VcXFxcXFxcIiA6Y29sdW1ucy5wcm9wPVxcXFxcXFwiY29sdW1uc1xcXFxcXFwiIDpkaW1lbnNpb25zLnByb3A9XFxcXFxcXCJkaW1lbnNpb25zXFxcXFxcXCIvPicsXFxcXG4gICAgICAgIGRhdGEoKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4ge1xcXFxuICAgICAgICAgICAgICAgIGNvbHVtbnM6IFt7XFxcXG4gICAgICAgICAgICAgICAgICAgIHByb3A6ICduYW1lJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ05hbWUnXFxcXG4gICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHByb3A6ICdleWVDb2xvcicsXFxcXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdFeWVzJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAoaCwgcHJvcHMpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBwcm9wcy5tb2RlbFtwcm9wcy5wcm9wXTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoKCdkaXYnLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0ZXh0XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2lubmVyLWNlbGwnXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAgdGV4dCk7XFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ2dlbmRlcicsXFxcXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdHZW5kZXInXFxcXG4gICAgICAgICAgICAgICAgfV0sXFxcXG4gICAgICAgICAgICAgICAgc291cmNlOiBwZW9wbGUsXFxcXG4gICAgICAgICAgICAgICAgZGltZW5zaW9uczoge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb2w6IHsgMDogNTAwIH1cXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9O1xcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG5cXFxcbiAgICBuZXcgVnVlKHsgcmVuZGVyOiBoID0+IGgoJ3Jldm9ncmlkLXZ1ZS13cmFwcGVyJykgfSkuJG1vdW50KCcjYXBwJyk7XFxcXG59O1xcXFxuXFxcXG5iYXNpY1NhbXBsZS5zdG9yeSA9IHtcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IHsgc291cmNlOiB7IGNvZGU6IHZ1ZUpzR3MgfSB9LFxcXFxuICAgIH0sXFxcXG59O1xcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwic291cmNlLWFwaS12dWVqcy0tYmFzaWMtc2FtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MjcsXFxcImxpbmVcXFwiOjEyfSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6MTh9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjoyNyxcXFwibGluZVxcXCI6MTJ9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6MTh9fX07XFxuICAgIFxcbmltcG9ydCBWdWVKcyBmcm9tICd2dWUnO1xcbmltcG9ydCAnLi4vYXNzZXRzL2xvY2FsLmdyaWQuc2Nzcyc7XFxuY29uc3QgVnVlID0gVnVlSnM7XFxuXFxuY29uc3Qge2FwcGx5UG9seWZpbGxzLCBkZWZpbmVDdXN0b21FbGVtZW50c30gPSByZXF1aXJlKCdAcmV2b2xpc3QvcmV2b2dyaWQvbG9hZGVyJyk7XFxuY29uc3QgcGVvcGxlID0gcmVxdWlyZSgnLi4vYXNzZXRzL3Blb3BsZScpLmRlZmF1bHQ7XFxuXFxuZXhwb3J0IGRlZmF1bHQge3BhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0IFZ1ZUpzIGZyb20gJ3Z1ZSc7XFxcXG5pbXBvcnQgJy4uL2Fzc2V0cy9sb2NhbC5ncmlkLnNjc3MnO1xcXFxuY29uc3QgVnVlID0gVnVlSnM7XFxcXG5cXFxcbmNvbnN0IHthcHBseVBvbHlmaWxscywgZGVmaW5lQ3VzdG9tRWxlbWVudHN9ID0gcmVxdWlyZSgnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcicpO1xcXFxuY29uc3QgcGVvcGxlID0gcmVxdWlyZSgnLi4vYXNzZXRzL3Blb3BsZScpLmRlZmF1bHQ7XFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJ1NvdXJjZSBBcGkvVnVlSnMnXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgYmFzaWNTYW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgLy8gc3Rvcnlib29rXFxcXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XFxcXG4gICAgc2V0VGltZW91dCgoKSA9PiB2dWVKc0dzKCksIDApO1xcXFxuICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2FwcCcpO1xcXFxuICAgIHJldHVybiBkaXY7XFxcXG59O1xcXFxuXFxcXG5jb25zdCB2dWVKc0dzID0gKCkgPT4ge1xcXFxuICAgIC8vIGRlZmluZSBjdXN0b20gZWxlbWVudCAnPHJldm8tZ3JpZC8+Jywgd2UgY2FuIGlnbm9yZSBhcHBseVBvbHlmaWxscyBpZiB3ZSBhcmUgbm90IHN1cHBvcnRpbmcgSUUxMVxcXFxuICAgIGFwcGx5UG9seWZpbGxzKCkudGhlbigoKSA9PiB7IGRlZmluZUN1c3RvbUVsZW1lbnRzKCk7IH0pO1xcXFxuICAgIFZ1ZS5jb25maWcuaWdub3JlZEVsZW1lbnRzID0gWy9yZXZvLVxcXFxcXFxcdyovXTsgLy8gU2V0IGlnbm9yZSB3ZWItY29tcG9uZW50IGFuZCBhdm9pZCBwYXJzaW5nIGl0IGFzIHZ1ZWpzXFxcXG5cXFxcbiAgICBWdWUuY29tcG9uZW50KCdyZXZvZ3JpZC12dWUtd3JhcHBlcicsIHtcXFxcbiAgICAgICAgdGVtcGxhdGU6ICc8cmV2by1ncmlkIGNsYXNzPVxcXFxcXFwiZ3JpZC1jb21wb25lbnRcXFxcXFxcIiA6c291cmNlLnByb3A9XFxcXFxcXCJzb3VyY2VcXFxcXFxcIiA6Y29sdW1ucy5wcm9wPVxcXFxcXFwiY29sdW1uc1xcXFxcXFwiIDpkaW1lbnNpb25zLnByb3A9XFxcXFxcXCJkaW1lbnNpb25zXFxcXFxcXCIvPicsXFxcXG4gICAgICAgIGRhdGEoKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4ge1xcXFxuICAgICAgICAgICAgICAgIGNvbHVtbnM6IFt7XFxcXG4gICAgICAgICAgICAgICAgICAgIHByb3A6ICduYW1lJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ05hbWUnXFxcXG4gICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHByb3A6ICdleWVDb2xvcicsXFxcXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdFeWVzJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAoaCwgcHJvcHMpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBwcm9wcy5tb2RlbFtwcm9wcy5wcm9wXTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoKCdkaXYnLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0ZXh0XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2lubmVyLWNlbGwnXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAgdGV4dCk7XFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ2dlbmRlcicsXFxcXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdHZW5kZXInXFxcXG4gICAgICAgICAgICAgICAgfV0sXFxcXG4gICAgICAgICAgICAgICAgc291cmNlOiBwZW9wbGUsXFxcXG4gICAgICAgICAgICAgICAgZGltZW5zaW9uczoge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb2w6IHsgMDogNTAwIH1cXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9O1xcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG5cXFxcbiAgICBuZXcgVnVlKHsgcmVuZGVyOiBoID0+IGgoJ3Jldm9ncmlkLXZ1ZS13cmFwcGVyJykgfSkuJG1vdW50KCcjYXBwJyk7XFxcXG59O1xcXFxuXFxcXG5iYXNpY1NhbXBsZS5zdG9yeSA9IHtcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IHsgc291cmNlOiB7IGNvZGU6IHZ1ZUpzR3MgfSB9LFxcXFxuICAgIH0sXFxcXG59O1xcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJzb3VyY2UtYXBpLXZ1ZWpzLS1iYXNpYy1zYW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjoyNyxcXFwibGluZVxcXCI6MTJ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoxOH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjI3LFxcXCJsaW5lXFxcIjoxMn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoxOH19fX0sfSxcXG4gICAgdGl0bGU6ICdTb3VyY2UgQXBpL1Z1ZUpzJ1xcbn07XFxuXFxuZXhwb3J0IGNvbnN0IGJhc2ljU2FtcGxlID0gKCkgPT4ge1xcbiAgICAvLyBzdG9yeWJvb2tcXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XFxuICAgIHNldFRpbWVvdXQoKCkgPT4gdnVlSnNHcygpLCAwKTtcXG4gICAgZGl2LnNldEF0dHJpYnV0ZSgnaWQnLCAnYXBwJyk7XFxuICAgIHJldHVybiBkaXY7XFxufTtcXG5cXG5jb25zdCB2dWVKc0dzID0gKCkgPT4ge1xcbiAgICAvLyBkZWZpbmUgY3VzdG9tIGVsZW1lbnQgJzxyZXZvLWdyaWQvPicsIHdlIGNhbiBpZ25vcmUgYXBwbHlQb2x5ZmlsbHMgaWYgd2UgYXJlIG5vdCBzdXBwb3J0aW5nIElFMTFcXG4gICAgYXBwbHlQb2x5ZmlsbHMoKS50aGVuKCgpID0+IHsgZGVmaW5lQ3VzdG9tRWxlbWVudHMoKTsgfSk7XFxuICAgIFZ1ZS5jb25maWcuaWdub3JlZEVsZW1lbnRzID0gWy9yZXZvLVxcXFx3Ki9dOyAvLyBTZXQgaWdub3JlIHdlYi1jb21wb25lbnQgYW5kIGF2b2lkIHBhcnNpbmcgaXQgYXMgdnVlanNcXG5cXG4gICAgVnVlLmNvbXBvbmVudCgncmV2b2dyaWQtdnVlLXdyYXBwZXInLCB7XFxuICAgICAgICB0ZW1wbGF0ZTogJzxyZXZvLWdyaWQgY2xhc3M9XFxcImdyaWQtY29tcG9uZW50XFxcIiA6c291cmNlLnByb3A9XFxcInNvdXJjZVxcXCIgOmNvbHVtbnMucHJvcD1cXFwiY29sdW1uc1xcXCIgOmRpbWVuc2lvbnMucHJvcD1cXFwiZGltZW5zaW9uc1xcXCIvPicsXFxuICAgICAgICBkYXRhKCkge1xcbiAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgIGNvbHVtbnM6IFt7XFxuICAgICAgICAgICAgICAgICAgICBwcm9wOiAnbmFtZScsXFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnTmFtZSdcXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAge1xcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ2V5ZUNvbG9yJyxcXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdFeWVzJyxcXG4gICAgICAgICAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogKGgsIHByb3BzKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHByb3BzLm1vZGVsW3Byb3BzLnByb3BdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoKCdkaXYnLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRleHRcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdpbm5lci1jZWxsJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sICB0ZXh0KTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAge1xcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ2dlbmRlcicsXFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnR2VuZGVyJ1xcbiAgICAgICAgICAgICAgICB9XSxcXG4gICAgICAgICAgICAgICAgc291cmNlOiBwZW9wbGUsXFxuICAgICAgICAgICAgICAgIGRpbWVuc2lvbnM6IHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbDogeyAwOiA1MDAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIH1cXG4gICAgfSk7XFxuXFxuICAgIG5ldyBWdWUoeyByZW5kZXI6IGggPT4gaCgncmV2b2dyaWQtdnVlLXdyYXBwZXInKSB9KS4kbW91bnQoJyNhcHAnKTtcXG59O1xcblxcbmJhc2ljU2FtcGxlLnN0b3J5ID0ge1xcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiB7IHNvdXJjZTogeyBjb2RlOiB2dWVKc0dzIH0gfSxcXG4gICAgfSxcXG59O1wiLFwibG9jYXRpb25zTWFwXCI6e1wic291cmNlLWFwaS12dWVqcy0tYmFzaWMtc2FtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNyxcImxpbmVcIjoyMH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjI2fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjI3LFwibGluZVwiOjIwfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjI2fX19fSxcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgVnVlSnMgZnJvbSAndnVlJztcXG5pbXBvcnQgJy4uL2Fzc2V0cy9sb2NhbC5ncmlkLnNjc3MnO1xcbmNvbnN0IFZ1ZSA9IFZ1ZUpzO1xcblxcbmNvbnN0IHthcHBseVBvbHlmaWxscywgZGVmaW5lQ3VzdG9tRWxlbWVudHN9ID0gcmVxdWlyZSgnQHJldm9saXN0L3Jldm9ncmlkL2xvYWRlcicpO1xcbmNvbnN0IHBlb3BsZSA9IHJlcXVpcmUoJy4uL2Fzc2V0cy9wZW9wbGUnKS5kZWZhdWx0O1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICdTb3VyY2UgQXBpL1Z1ZUpzJ1xcbn07XFxuXFxuZXhwb3J0IGNvbnN0IGJhc2ljU2FtcGxlID0gKCkgPT4ge1xcbiAgICAvLyBzdG9yeWJvb2tcXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XFxuICAgIHNldFRpbWVvdXQoKCkgPT4gdnVlSnNHcygpLCAwKTtcXG4gICAgZGl2LnNldEF0dHJpYnV0ZSgnaWQnLCAnYXBwJyk7XFxuICAgIHJldHVybiBkaXY7XFxufTtcXG5cXG5jb25zdCB2dWVKc0dzID0gKCkgPT4ge1xcbiAgICAvLyBkZWZpbmUgY3VzdG9tIGVsZW1lbnQgJzxyZXZvLWdyaWQvPicsIHdlIGNhbiBpZ25vcmUgYXBwbHlQb2x5ZmlsbHMgaWYgd2UgYXJlIG5vdCBzdXBwb3J0aW5nIElFMTFcXG4gICAgYXBwbHlQb2x5ZmlsbHMoKS50aGVuKCgpID0+IHsgZGVmaW5lQ3VzdG9tRWxlbWVudHMoKTsgfSk7XFxuICAgIFZ1ZS5jb25maWcuaWdub3JlZEVsZW1lbnRzID0gWy9yZXZvLVxcXFx3Ki9dOyAvLyBTZXQgaWdub3JlIHdlYi1jb21wb25lbnQgYW5kIGF2b2lkIHBhcnNpbmcgaXQgYXMgdnVlanNcXG5cXG4gICAgVnVlLmNvbXBvbmVudCgncmV2b2dyaWQtdnVlLXdyYXBwZXInLCB7XFxuICAgICAgICB0ZW1wbGF0ZTogJzxyZXZvLWdyaWQgY2xhc3M9XFxcImdyaWQtY29tcG9uZW50XFxcIiA6c291cmNlLnByb3A9XFxcInNvdXJjZVxcXCIgOmNvbHVtbnMucHJvcD1cXFwiY29sdW1uc1xcXCIgOmRpbWVuc2lvbnMucHJvcD1cXFwiZGltZW5zaW9uc1xcXCIvPicsXFxuICAgICAgICBkYXRhKCkge1xcbiAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgIGNvbHVtbnM6IFt7XFxuICAgICAgICAgICAgICAgICAgICBwcm9wOiAnbmFtZScsXFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnTmFtZSdcXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAge1xcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ2V5ZUNvbG9yJyxcXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdFeWVzJyxcXG4gICAgICAgICAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogKGgsIHByb3BzKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHByb3BzLm1vZGVsW3Byb3BzLnByb3BdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoKCdkaXYnLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRleHRcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdpbm5lci1jZWxsJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sICB0ZXh0KTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAge1xcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ2dlbmRlcicsXFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnR2VuZGVyJ1xcbiAgICAgICAgICAgICAgICB9XSxcXG4gICAgICAgICAgICAgICAgc291cmNlOiBwZW9wbGUsXFxuICAgICAgICAgICAgICAgIGRpbWVuc2lvbnM6IHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbDogeyAwOiA1MDAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIH1cXG4gICAgfSk7XFxuXFxuICAgIG5ldyBWdWUoeyByZW5kZXI6IGggPT4gaCgncmV2b2dyaWQtdnVlLXdyYXBwZXInKSB9KS4kbW91bnQoJyNhcHAnKTtcXG59O1xcblxcbmJhc2ljU2FtcGxlLnN0b3J5ID0ge1xcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiB7IHNvdXJjZTogeyBjb2RlOiB2dWVKc0dzIH0gfSxcXG4gICAgfSxcXG59O1wiLFwibG9jYXRpb25zTWFwXCI6e1wic291cmNlLWFwaS12dWVqcy0tYmFzaWMtc2FtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNyxcImxpbmVcIjoxMn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjE4fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjI3LFwibGluZVwiOjEyfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjE4fX19fSx9LFxuICAgIHRpdGxlOiAnU291cmNlIEFwaS9WdWVKcydcbn07XG5cbmV4cG9ydCBjb25zdCBiYXNpY1NhbXBsZSA9ICgpID0+IHtcbiAgICAvLyBzdG9yeWJvb2tcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHZ1ZUpzR3MoKSwgMCk7XG4gICAgZGl2LnNldEF0dHJpYnV0ZSgnaWQnLCAnYXBwJyk7XG4gICAgcmV0dXJuIGRpdjtcbn07XG5cbmNvbnN0IHZ1ZUpzR3MgPSAoKSA9PiB7XG4gICAgLy8gZGVmaW5lIGN1c3RvbSBlbGVtZW50ICc8cmV2by1ncmlkLz4nLCB3ZSBjYW4gaWdub3JlIGFwcGx5UG9seWZpbGxzIGlmIHdlIGFyZSBub3Qgc3VwcG9ydGluZyBJRTExXG4gICAgYXBwbHlQb2x5ZmlsbHMoKS50aGVuKCgpID0+IHsgZGVmaW5lQ3VzdG9tRWxlbWVudHMoKTsgfSk7XG4gICAgVnVlLmNvbmZpZy5pZ25vcmVkRWxlbWVudHMgPSBbL3Jldm8tXFx3Ki9dOyAvLyBTZXQgaWdub3JlIHdlYi1jb21wb25lbnQgYW5kIGF2b2lkIHBhcnNpbmcgaXQgYXMgdnVlanNcblxuICAgIFZ1ZS5jb21wb25lbnQoJ3Jldm9ncmlkLXZ1ZS13cmFwcGVyJywge1xuICAgICAgICB0ZW1wbGF0ZTogJzxyZXZvLWdyaWQgY2xhc3M9XCJncmlkLWNvbXBvbmVudFwiIDpzb3VyY2UucHJvcD1cInNvdXJjZVwiIDpjb2x1bW5zLnByb3A9XCJjb2x1bW5zXCIgOmRpbWVuc2lvbnMucHJvcD1cImRpbWVuc2lvbnNcIi8+JyxcbiAgICAgICAgZGF0YSgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY29sdW1uczogW3tcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ25hbWUnLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnTmFtZSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogJ2V5ZUNvbG9yJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0V5ZXMnLFxuICAgICAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6IChoLCBwcm9wcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHByb3BzLm1vZGVsW3Byb3BzLnByb3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnaW5uZXItY2VsbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sICB0ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm9wOiAnZ2VuZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0dlbmRlcidcbiAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHBlb3BsZSxcbiAgICAgICAgICAgICAgICBkaW1lbnNpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbDogeyAwOiA1MDAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIG5ldyBWdWUoeyByZW5kZXI6IGggPT4gaCgncmV2b2dyaWQtdnVlLXdyYXBwZXInKSB9KS4kbW91bnQoJyNhcHAnKTtcbn07XG5cbmJhc2ljU2FtcGxlLnN0b3J5ID0ge1xuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgZG9jczogeyBzb3VyY2U6IHsgY29kZTogdnVlSnNHcyB9IH0sXG4gICAgfSxcbn07IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9sb2NhbC5ncmlkLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZ3JpZC1jb21wb25lbnQgLmRhdGEtaGVhZGVyLWNlbGwsLmdyaWQtY29tcG9uZW50IC5kYXRhLWNlbGx7dGV4dC1hbGlnbjpsZWZ0O3BhZGRpbmctbGVmdDo1cHg7Ym94LXNpemluZzpib3JkZXItYm94O2xpbmUtaGVpZ2h0OjMwcHh9LmdyaWQtY29tcG9uZW50IC5kYXRhLWhlYWRlci1jZWxse2ZvbnQtd2VpZ2h0OjYwMH0uZ3JpZC1jb21wb25lbnQgLmlubmVyLWNlbGx7aGVpZ2h0OjEwMCU7bWFyZ2luLWxlZnQ6LTVweH1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiY29uc3QgcGVvcGxlID0gW3tcbiAgICBcIl9pZFwiOiBcIjVlYzEzYzIzZjE2MmM0NjY2YmQ3Zjk0YlwiLFxuICAgIFwiaW5kZXhcIjogMCxcbiAgICBcImd1aWRcIjogXCI5MWY3MWExYS1iZTkxLTQwNWQtODE4OC0wNTMwMThmNTRiOWJcIixcbiAgICBcImlzQWN0aXZlXCI6IHRydWUsXG4gICAgXCJiYWxhbmNlXCI6IFwiJDIsODgxLjI1XCIsXG4gICAgXCJwaWN0dXJlXCI6IFwiaHR0cDovL3BsYWNlaG9sZC5pdC8zMngzMlwiLFxuICAgIFwiYWdlXCI6IDMxLFxuICAgIFwiZXllQ29sb3JcIjogXCJicm93blwiLFxuICAgIFwibmFtZVwiOiBcIkdsZW5uIEpveW5lclwiLFxuICAgIFwiZ2VuZGVyXCI6IFwibWFsZVwiLFxuICAgIFwiY29tcGFueVwiOiBcIlNFQUxPVURcIixcbiAgICBcImVtYWlsXCI6IFwiZ2xlbm5qb3luZXJAc2VhbG91ZC5jb21cIixcbiAgICBcInBob25lXCI6IFwiKzEgKDkyMCkgNTUwLTIxOThcIixcbiAgICBcInJlZ2lzdGVyZWRcIjogXCIyMDE2LTA1LTA5VDA4OjUzOjAzIC0wMzowMFwiLFxuICAgIFwibGF0aXR1ZGVcIjogLTY2LjY0OTIzOSxcbiAgICBcImxvbmdpdHVkZVwiOiA0NC4wNTY4NDQsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwibnVsbGFcIixcbiAgICAgIFwibm9zdHJ1ZFwiLFxuICAgICAgXCJtYWduYVwiLFxuICAgICAgXCJ1bGxhbWNvXCIsXG4gICAgICBcIm51bGxhXCIsXG4gICAgICBcImV4Y2VwdGV1clwiLFxuICAgICAgXCJlbmltXCJcbiAgICBdLFxuICAgIFwiZnJpZW5kc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiSm9oYW5uYSBDcm9zc1wiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImlkXCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcIkVzc2llIEZpZWxkc1wiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImlkXCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcIkVsbWEgSG9sbWFuXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZmF2b3JpdGVGcnVpdFwiOiBcImFwcGxlXCJcbiAgfSxcbiAge1xuICAgIFwiX2lkXCI6IFwiNWVjMTNjMjNkYTFhYTIzNjVkOWU4YThiXCIsXG4gICAgXCJpbmRleFwiOiAxLFxuICAgIFwiZ3VpZFwiOiBcIjBiZDY0MjQwLTdiYzQtNDcyOS1iYmIzLWI2YzRkNGRmYmRiY1wiLFxuICAgIFwiaXNBY3RpdmVcIjogZmFsc2UsXG4gICAgXCJiYWxhbmNlXCI6IFwiJDIsNDAzLjExXCIsXG4gICAgXCJwaWN0dXJlXCI6IFwiaHR0cDovL3BsYWNlaG9sZC5pdC8zMngzMlwiLFxuICAgIFwiYWdlXCI6IDM0LFxuICAgIFwiZXllQ29sb3JcIjogXCJicm93blwiLFxuICAgIFwibmFtZVwiOiBcIkxvdWVsbGEgV2FsdG9uXCIsXG4gICAgXCJnZW5kZXJcIjogXCJmZW1hbGVcIixcbiAgICBcImNvbXBhbnlcIjogXCJTQ0VOVFJJQ1wiLFxuICAgIFwiZW1haWxcIjogXCJsb3VlbGxhd2FsdG9uQHNjZW50cmljLmNvbVwiLFxuICAgIFwicGhvbmVcIjogXCIrMSAoODM3KSA0MjAtMjI3N1wiLFxuICAgIFwicmVnaXN0ZXJlZFwiOiBcIjIwMTYtMDctMTdUMDk6MDQ6MjkgLTAzOjAwXCIsXG4gICAgXCJsYXRpdHVkZVwiOiAzNC41NDg0ODIsXG4gICAgXCJsb25naXR1ZGVcIjogODcuMjQ4MTU3LFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcImRvXCIsXG4gICAgICBcInF1aXNcIixcbiAgICAgIFwiaW5cIixcbiAgICAgIFwiY3VwaWRhdGF0XCIsXG4gICAgICBcImVhXCIsXG4gICAgICBcImV0XCIsXG4gICAgICBcImV4Y2VwdGV1clwiXG4gICAgXSxcbiAgICBcImZyaWVuZHNcIjogW1xuICAgICAge1xuICAgICAgICBcImlkXCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcIk1hY2sgTW9udGdvbWVyeVwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImlkXCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcIkthdGhyeW4gSnVhcmV6XCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMixcbiAgICAgICAgXCJuYW1lXCI6IFwiUmFtb3MgV2FnbmVyXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZmF2b3JpdGVGcnVpdFwiOiBcImFwcGxlXCJcbiAgfSxcbiAge1xuICAgIFwiX2lkXCI6IFwiNWVjMTNjMjM2MDkzZDkzM2U2NmZkOWFmXCIsXG4gICAgXCJpbmRleFwiOiAyLFxuICAgIFwiZ3VpZFwiOiBcImFjYmFmYmVhLTAwZmYtNDkxZC1hYTcxLTQ2OGVlNTZjYTY4NVwiLFxuICAgIFwiaXNBY3RpdmVcIjogdHJ1ZSxcbiAgICBcImJhbGFuY2VcIjogXCIkMywzMjUuNDVcIixcbiAgICBcInBpY3R1cmVcIjogXCJodHRwOi8vcGxhY2Vob2xkLml0LzMyeDMyXCIsXG4gICAgXCJhZ2VcIjogMzEsXG4gICAgXCJleWVDb2xvclwiOiBcImdyZWVuXCIsXG4gICAgXCJuYW1lXCI6IFwiVGF0ZSBBcm5vbGRcIixcbiAgICBcImdlbmRlclwiOiBcIm1hbGVcIixcbiAgICBcImNvbXBhbnlcIjogXCJRVU9SREFURVwiLFxuICAgIFwiZW1haWxcIjogXCJ0YXRlYXJub2xkQHF1b3JkYXRlLmNvbVwiLFxuICAgIFwicGhvbmVcIjogXCIrMSAoOTM3KSA0NjItMzM4OVwiLFxuICAgIFwicmVnaXN0ZXJlZFwiOiBcIjIwMTgtMDMtMjJUMDg6NTA6MTkgLTAzOjAwXCIsXG4gICAgXCJsYXRpdHVkZVwiOiAtMjguMjkwNTYyLFxuICAgIFwibG9uZ2l0dWRlXCI6IDEyNC41MzM1MTIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwib2NjYWVjYXRcIixcbiAgICAgIFwiZXRcIixcbiAgICAgIFwiYWRpcGlzaWNpbmdcIixcbiAgICAgIFwiaXBzdW1cIixcbiAgICAgIFwibm9uXCIsXG4gICAgICBcImF1dGVcIixcbiAgICAgIFwicXVpXCJcbiAgICBdLFxuICAgIFwiZnJpZW5kc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiRmFybGV5IE1lcmNhZG9cIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJBZGEgTW9vcmVcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAyLFxuICAgICAgICBcIm5hbWVcIjogXCJDb29rZSBEdW5sYXBcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJmYXZvcml0ZUZydWl0XCI6IFwiYmFuYW5hXCJcbiAgfSxcbiAge1xuICAgIFwiX2lkXCI6IFwiNWVjMTNjMjM0NGU1NDJkMjcxODgxNzlkXCIsXG4gICAgXCJpbmRleFwiOiAzLFxuICAgIFwiZ3VpZFwiOiBcIjcwNzc3MTNhLWVlMTMtNGQ0ZC04NzVhLTk3OWI4MTYxNzI0YlwiLFxuICAgIFwiaXNBY3RpdmVcIjogdHJ1ZSxcbiAgICBcImJhbGFuY2VcIjogXCIkMyw3NjUuMTVcIixcbiAgICBcInBpY3R1cmVcIjogXCJodHRwOi8vcGxhY2Vob2xkLml0LzMyeDMyXCIsXG4gICAgXCJhZ2VcIjogMzAsXG4gICAgXCJleWVDb2xvclwiOiBcImJyb3duXCIsXG4gICAgXCJuYW1lXCI6IFwiUm9iZXJ0cyBSb2RyaXF1ZXpcIixcbiAgICBcImdlbmRlclwiOiBcIm1hbGVcIixcbiAgICBcImNvbXBhbnlcIjogXCJJU09QTEVYXCIsXG4gICAgXCJlbWFpbFwiOiBcInJvYmVydHNyb2RyaXF1ZXpAaXNvcGxleC5jb21cIixcbiAgICBcInBob25lXCI6IFwiKzEgKDk2NykgNDA3LTIzNjlcIixcbiAgICBcInJlZ2lzdGVyZWRcIjogXCIyMDE1LTAyLTI0VDA0OjI3OjAwIC0wMzowMFwiLFxuICAgIFwibGF0aXR1ZGVcIjogNS4yMjAzNjIsXG4gICAgXCJsb25naXR1ZGVcIjogMjYuMTA2MzE1LFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcImFuaW1cIixcbiAgICAgIFwiZWl1c21vZFwiLFxuICAgICAgXCJjb25zZXF1YXRcIixcbiAgICAgIFwibm9zdHJ1ZFwiLFxuICAgICAgXCJvY2NhZWNhdFwiLFxuICAgICAgXCJjb25zZWN0ZXR1clwiLFxuICAgICAgXCJmdWdpYXRcIlxuICAgIF0sXG4gICAgXCJmcmllbmRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJUb21taWUgS2VpdGhcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJUcmFjeSBNb3J0b25cIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAyLFxuICAgICAgICBcIm5hbWVcIjogXCJNYWdnaWUgUmF5XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZmF2b3JpdGVGcnVpdFwiOiBcImFwcGxlXCJcbiAgfSxcbiAge1xuICAgIFwiX2lkXCI6IFwiNWVjMTNjMjNiNzAwYjI5MmFiNDc2ZDkwXCIsXG4gICAgXCJpbmRleFwiOiA0LFxuICAgIFwiZ3VpZFwiOiBcIjY3NGJhZDAyLTE3NmMtNDIzYi05ODFkLTZhNzg5ZjFjMmRjYlwiLFxuICAgIFwiaXNBY3RpdmVcIjogdHJ1ZSxcbiAgICBcImJhbGFuY2VcIjogXCIkMyw3ODQuNjhcIixcbiAgICBcInBpY3R1cmVcIjogXCJodHRwOi8vcGxhY2Vob2xkLml0LzMyeDMyXCIsXG4gICAgXCJhZ2VcIjogNDAsXG4gICAgXCJleWVDb2xvclwiOiBcImJyb3duXCIsXG4gICAgXCJuYW1lXCI6IFwiQ2FzdGFuZWRhIFJ1c2hcIixcbiAgICBcImdlbmRlclwiOiBcIm1hbGVcIixcbiAgICBcImNvbXBhbnlcIjogXCJaSUxMQU5FVFwiLFxuICAgIFwiZW1haWxcIjogXCJjYXN0YW5lZGFydXNoQHppbGxhbmV0LmNvbVwiLFxuICAgIFwicGhvbmVcIjogXCIrMSAoODQ2KSA1NDAtMjY4NVwiLFxuICAgIFwicmVnaXN0ZXJlZFwiOiBcIjIwMTYtMDctMTNUMDE6NTE6NDEgLTAzOjAwXCIsXG4gICAgXCJsYXRpdHVkZVwiOiA1OC42NzE5NjgsXG4gICAgXCJsb25naXR1ZGVcIjogLTcwLjE3MzcxNCxcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJpZFwiLFxuICAgICAgXCJhbGlxdWFcIixcbiAgICAgIFwicmVwcmVoZW5kZXJpdFwiLFxuICAgICAgXCJkdWlzXCIsXG4gICAgICBcInVsbGFtY29cIixcbiAgICAgIFwiZG9sb3JcIixcbiAgICAgIFwibWFnbmFcIlxuICAgIF0sXG4gICAgXCJmcmllbmRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJDdW1taW5ncyBMb3dlXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiV2FycmVuIENvbGxpZXJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAyLFxuICAgICAgICBcIm5hbWVcIjogXCJGcmFuY28gSG91c2VcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJmYXZvcml0ZUZydWl0XCI6IFwiYXBwbGVcIlxuICB9LFxuICB7XG4gICAgXCJfaWRcIjogXCI1ZWMxM2MyMzQ1MDg3MDU5ZmYwN2RkZjBcIixcbiAgICBcImluZGV4XCI6IDUsXG4gICAgXCJndWlkXCI6IFwiZjQxNDM0YTYtMDI1Ny00NDg0LWJmNmMtOGM1NjBmMWY2MTAxXCIsXG4gICAgXCJpc0FjdGl2ZVwiOiB0cnVlLFxuICAgIFwiYmFsYW5jZVwiOiBcIiQzLDMxNC4wN1wiLFxuICAgIFwicGljdHVyZVwiOiBcImh0dHA6Ly9wbGFjZWhvbGQuaXQvMzJ4MzJcIixcbiAgICBcImFnZVwiOiAyNixcbiAgICBcImV5ZUNvbG9yXCI6IFwiZ3JlZW5cIixcbiAgICBcIm5hbWVcIjogXCJIb3VzdG9uIE1vc3NcIixcbiAgICBcImdlbmRlclwiOiBcIm1hbGVcIixcbiAgICBcImNvbXBhbnlcIjogXCJCVUdTQUxMXCIsXG4gICAgXCJlbWFpbFwiOiBcImhvdXN0b25tb3NzQGJ1Z3NhbGwuY29tXCIsXG4gICAgXCJwaG9uZVwiOiBcIisxICg4MjEpIDQ3MC0zODUyXCIsXG4gICAgXCJyZWdpc3RlcmVkXCI6IFwiMjAxNi0xMS0yN1QwNDo1NzoyMiAtMDM6MDBcIixcbiAgICBcImxhdGl0dWRlXCI6IDQzLjA3NDE3NyxcbiAgICBcImxvbmdpdHVkZVwiOiAxNTcuODA5MTI5LFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcImlydXJlXCIsXG4gICAgICBcInZlbGl0XCIsXG4gICAgICBcImxhYm9yZVwiLFxuICAgICAgXCJlaXVzbW9kXCIsXG4gICAgICBcImluY2lkaWR1bnRcIixcbiAgICAgIFwiaW5jaWRpZHVudFwiLFxuICAgICAgXCJpbmNpZGlkdW50XCJcbiAgICBdLFxuICAgIFwiZnJpZW5kc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiU3RhY2llIE9zYm9ybmVcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJGcmllZGEgUm9sbGluc1wiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImlkXCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcIkpvcmRhbiBMZVwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImZhdm9yaXRlRnJ1aXRcIjogXCJiYW5hbmFcIlxuICB9LFxuICB7XG4gICAgXCJfaWRcIjogXCI1ZWMxM2MyMzkxNTEwYzU0M2QwNzAyYTBcIixcbiAgICBcImluZGV4XCI6IDYsXG4gICAgXCJndWlkXCI6IFwiMWEzNTc3YzktYTZhYS00ZWY0LTk3MTYtZTI1ZTIwZjdlYTgxXCIsXG4gICAgXCJpc0FjdGl2ZVwiOiBmYWxzZSxcbiAgICBcImJhbGFuY2VcIjogXCIkMyw4OTAuOTBcIixcbiAgICBcInBpY3R1cmVcIjogXCJodHRwOi8vcGxhY2Vob2xkLml0LzMyeDMyXCIsXG4gICAgXCJhZ2VcIjogNDAsXG4gICAgXCJleWVDb2xvclwiOiBcImdyZWVuXCIsXG4gICAgXCJuYW1lXCI6IFwiV2Fsc2ggV3JpZ2h0XCIsXG4gICAgXCJnZW5kZXJcIjogXCJtYWxlXCIsXG4gICAgXCJjb21wYW55XCI6IFwiQVVTVEVDSFwiLFxuICAgIFwiZW1haWxcIjogXCJ3YWxzaHdyaWdodEBhdXN0ZWNoLmNvbVwiLFxuICAgIFwicGhvbmVcIjogXCIrMSAoODIyKSA0MDAtMjYxM1wiLFxuICAgIFwicmVnaXN0ZXJlZFwiOiBcIjIwMTgtMDMtMjNUMDE6Mjc6MzQgLTAzOjAwXCIsXG4gICAgXCJsYXRpdHVkZVwiOiAtODEuODkzMTg3LFxuICAgIFwibG9uZ2l0dWRlXCI6IC0xNzguMTI2ODQ4LFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcImV1XCIsXG4gICAgICBcIkxvcmVtXCIsXG4gICAgICBcImRvbG9yZVwiLFxuICAgICAgXCJlc3RcIixcbiAgICAgIFwibW9sbGl0XCIsXG4gICAgICBcImluXCIsXG4gICAgICBcInByb2lkZW50XCJcbiAgICBdLFxuICAgIFwiZnJpZW5kc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiQmFua3MgRnJvc3RcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJNb3JnYW4gTW9yZW5vXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMixcbiAgICAgICAgXCJuYW1lXCI6IFwiTWF0aGV3cyBCcm9va3NcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJmYXZvcml0ZUZydWl0XCI6IFwiYXBwbGVcIlxuICB9LFxuICB7XG4gICAgXCJfaWRcIjogXCI1ZWMxM2MyM2Q4NjA1YTYwYTdhZDU1OTRcIixcbiAgICBcImluZGV4XCI6IDcsXG4gICAgXCJndWlkXCI6IFwiMDI3ZWEyNmItOTE5Zi00YmNiLTljYjMtYWM5MTMwYjhlMzYxXCIsXG4gICAgXCJpc0FjdGl2ZVwiOiB0cnVlLFxuICAgIFwiYmFsYW5jZVwiOiBcIiQxLDI3OS43N1wiLFxuICAgIFwicGljdHVyZVwiOiBcImh0dHA6Ly9wbGFjZWhvbGQuaXQvMzJ4MzJcIixcbiAgICBcImFnZVwiOiAzMCxcbiAgICBcImV5ZUNvbG9yXCI6IFwiYnJvd25cIixcbiAgICBcIm5hbWVcIjogXCJIb3JuIENvbmxleVwiLFxuICAgIFwiZ2VuZGVyXCI6IFwibWFsZVwiLFxuICAgIFwiY29tcGFueVwiOiBcIkdPUkdBTklDXCIsXG4gICAgXCJlbWFpbFwiOiBcImhvcm5jb25sZXlAZ29yZ2FuaWMuY29tXCIsXG4gICAgXCJwaG9uZVwiOiBcIisxICg4NzQpIDUxMy0yNTE1XCIsXG4gICAgXCJyZWdpc3RlcmVkXCI6IFwiMjAxNS0xMS0zMFQwODowODo0MCAtMDM6MDBcIixcbiAgICBcImxhdGl0dWRlXCI6IC00OS4xMDMwOSxcbiAgICBcImxvbmdpdHVkZVwiOiAtOTAuNTk4NDQzLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcImN1bHBhXCIsXG4gICAgICBcImVuaW1cIixcbiAgICAgIFwiZXN0XCIsXG4gICAgICBcImVsaXRcIixcbiAgICAgIFwiYWxpcXVhXCIsXG4gICAgICBcInZlbGl0XCIsXG4gICAgICBcIm5vc3RydWRcIlxuICAgIF0sXG4gICAgXCJmcmllbmRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJMYW5jYXN0ZXIgT3Nib3JuXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiU3RhZmZvcmQgSGFoblwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImlkXCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcIkRvcmlzIEJhcm5lc1wiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImZhdm9yaXRlRnJ1aXRcIjogXCJzdHJhd2JlcnJ5XCJcbiAgfSxcbiAge1xuICAgIFwiX2lkXCI6IFwiNWVjMTNjMjM1N2JmYTNmMjAxOGM5MDY0XCIsXG4gICAgXCJpbmRleFwiOiA4LFxuICAgIFwiZ3VpZFwiOiBcImE3OWEzNTgxLWViZTYtNGFiMS1iYjgwLTFkNTE3N2VjN2U1OFwiLFxuICAgIFwiaXNBY3RpdmVcIjogZmFsc2UsXG4gICAgXCJiYWxhbmNlXCI6IFwiJDIsMTg5LjA4XCIsXG4gICAgXCJwaWN0dXJlXCI6IFwiaHR0cDovL3BsYWNlaG9sZC5pdC8zMngzMlwiLFxuICAgIFwiYWdlXCI6IDM4LFxuICAgIFwiZXllQ29sb3JcIjogXCJicm93blwiLFxuICAgIFwibmFtZVwiOiBcIkJlbnRvbiBIb3VzdG9uXCIsXG4gICAgXCJnZW5kZXJcIjogXCJtYWxlXCIsXG4gICAgXCJjb21wYW55XCI6IFwiT1BQT1JURUNIXCIsXG4gICAgXCJlbWFpbFwiOiBcImJlbnRvbmhvdXN0b25Ab3Bwb3J0ZWNoLmNvbVwiLFxuICAgIFwicGhvbmVcIjogXCIrMSAoOTk5KSA1MTMtMzExMlwiLFxuICAgIFwicmVnaXN0ZXJlZFwiOiBcIjIwMTgtMTEtMjVUMTA6MjA6NDcgLTAzOjAwXCIsXG4gICAgXCJsYXRpdHVkZVwiOiAyMi41MTY2NDksXG4gICAgXCJsb25naXR1ZGVcIjogMTUzLjA2MDk4OSxcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJlc3NlXCIsXG4gICAgICBcImlydXJlXCIsXG4gICAgICBcImVzc2VcIixcbiAgICAgIFwidm9sdXB0YXRlXCIsXG4gICAgICBcIm5vblwiLFxuICAgICAgXCJsYWJvcmlzXCIsXG4gICAgICBcImRvXCJcbiAgICBdLFxuICAgIFwiZnJpZW5kc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiQ3VycnkgTWlsZXNcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJCb25kIENodXJjaFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImlkXCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcIkRpYW5hIFNwZW5jZVwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImZhdm9yaXRlRnJ1aXRcIjogXCJhcHBsZVwiXG4gIH0sXG4gIHtcbiAgICBcIl9pZFwiOiBcIjVlYzEzYzIzMjE1ZTQzZDNkYzYwZmFiNlwiLFxuICAgIFwiaW5kZXhcIjogOSxcbiAgICBcImd1aWRcIjogXCJiMDZkNTdiZS1jOWJkLTQ5NDgtOTdmZC1kYTU1ODZjZGVjYWNcIixcbiAgICBcImlzQWN0aXZlXCI6IHRydWUsXG4gICAgXCJiYWxhbmNlXCI6IFwiJDEsNTAxLjQwXCIsXG4gICAgXCJwaWN0dXJlXCI6IFwiaHR0cDovL3BsYWNlaG9sZC5pdC8zMngzMlwiLFxuICAgIFwiYWdlXCI6IDMxLFxuICAgIFwiZXllQ29sb3JcIjogXCJncmVlblwiLFxuICAgIFwibmFtZVwiOiBcIk1hZGRveCBTaW1vblwiLFxuICAgIFwiZ2VuZGVyXCI6IFwibWFsZVwiLFxuICAgIFwiY29tcGFueVwiOiBcIkNPU01PU0lTXCIsXG4gICAgXCJlbWFpbFwiOiBcIm1hZGRveHNpbW9uQGNvc21vc2lzLmNvbVwiLFxuICAgIFwicGhvbmVcIjogXCIrMSAoODc4KSA0OTAtMzQzMVwiLFxuICAgIFwicmVnaXN0ZXJlZFwiOiBcIjIwMTUtMDMtMjRUMDE6MDQ6MzggLTAzOjAwXCIsXG4gICAgXCJsYXRpdHVkZVwiOiAtNzYuMDM0OTkyLFxuICAgIFwibG9uZ2l0dWRlXCI6IC0xMC4wOTg4MzUsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwibWluaW1cIixcbiAgICAgIFwiTG9yZW1cIixcbiAgICAgIFwiaWRcIixcbiAgICAgIFwiZWFcIixcbiAgICAgIFwicmVwcmVoZW5kZXJpdFwiLFxuICAgICAgXCJlc3RcIixcbiAgICAgIFwiYWRcIlxuICAgIF0sXG4gICAgXCJmcmllbmRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJLbGVpbiBSb3NhcmlvXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiS2VsbGV5IEdvbGRlblwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImlkXCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcIlNlbG1hIEF0a2luc1wiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImZhdm9yaXRlRnJ1aXRcIjogXCJzdHJhd2JlcnJ5XCJcbiAgfSxcbiAge1xuICAgIFwiX2lkXCI6IFwiNWVjMTNjMjM0OGVhZTQyYmY5M2MzZTAzXCIsXG4gICAgXCJpbmRleFwiOiAxMCxcbiAgICBcImd1aWRcIjogXCI3YjQ0YjllNi1lZGIyLTQ5MjItODI1Mi0yNzk4Y2Q4ZDYzYWNcIixcbiAgICBcImlzQWN0aXZlXCI6IHRydWUsXG4gICAgXCJiYWxhbmNlXCI6IFwiJDIsMTc5LjQ1XCIsXG4gICAgXCJwaWN0dXJlXCI6IFwiaHR0cDovL3BsYWNlaG9sZC5pdC8zMngzMlwiLFxuICAgIFwiYWdlXCI6IDI5LFxuICAgIFwiZXllQ29sb3JcIjogXCJncmVlblwiLFxuICAgIFwibmFtZVwiOiBcIkFka2lucyBNZXllclwiLFxuICAgIFwiZ2VuZGVyXCI6IFwibWFsZVwiLFxuICAgIFwiY29tcGFueVwiOiBcIlBMVVRPUlFVRVwiLFxuICAgIFwiZW1haWxcIjogXCJhZGtpbnNtZXllckBwbHV0b3JxdWUuY29tXCIsXG4gICAgXCJwaG9uZVwiOiBcIisxICg5MzMpIDUzNi0yNjIyXCIsXG4gICAgXCJyZWdpc3RlcmVkXCI6IFwiMjAxNS0wOS0wNFQwMjoyOTo0NSAtMDM6MDBcIixcbiAgICBcImxhdGl0dWRlXCI6IDU0LjQxOTA3NixcbiAgICBcImxvbmdpdHVkZVwiOiAtNzQuOTY1NDM1LFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcImR1aXNcIixcbiAgICAgIFwidmVuaWFtXCIsXG4gICAgICBcImNvbW1vZG9cIixcbiAgICAgIFwibWFnbmFcIixcbiAgICAgIFwicHJvaWRlbnRcIixcbiAgICAgIFwiY2lsbHVtXCIsXG4gICAgICBcImNvbnNlY3RldHVyXCJcbiAgICBdLFxuICAgIFwiZnJpZW5kc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiUXVlZW4gUm9hY2hcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJSb2FjaCBEYXlcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAyLFxuICAgICAgICBcIm5hbWVcIjogXCJSb3NseW4gUGF0ZWxcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJmYXZvcml0ZUZydWl0XCI6IFwiYXBwbGVcIlxuICB9LFxuICB7XG4gICAgXCJfaWRcIjogXCI1ZWMxM2MyM2MwZWEzZDcxMzAxOGIyMjNcIixcbiAgICBcImluZGV4XCI6IDExLFxuICAgIFwiZ3VpZFwiOiBcImI0MmRiMjY5LWVkZmQtNDZiZC04ZDk0LWRhZjhiY2RlMDk1M1wiLFxuICAgIFwiaXNBY3RpdmVcIjogdHJ1ZSxcbiAgICBcImJhbGFuY2VcIjogXCIkMSwyNDcuNjdcIixcbiAgICBcInBpY3R1cmVcIjogXCJodHRwOi8vcGxhY2Vob2xkLml0LzMyeDMyXCIsXG4gICAgXCJhZ2VcIjogMjgsXG4gICAgXCJleWVDb2xvclwiOiBcImJsdWVcIixcbiAgICBcIm5hbWVcIjogXCJKb2hubmllIENhbXBvc1wiLFxuICAgIFwiZ2VuZGVyXCI6IFwiZmVtYWxlXCIsXG4gICAgXCJjb21wYW55XCI6IFwiWklOQ0FcIixcbiAgICBcImVtYWlsXCI6IFwiam9obm5pZWNhbXBvc0B6aW5jYS5jb21cIixcbiAgICBcInBob25lXCI6IFwiKzEgKDgzNSkgNDU0LTIyMjdcIixcbiAgICBcInJlZ2lzdGVyZWRcIjogXCIyMDE1LTEyLTE0VDAyOjA4OjE1IC0wMzowMFwiLFxuICAgIFwibGF0aXR1ZGVcIjogMC43MzU5NTEsXG4gICAgXCJsb25naXR1ZGVcIjogMTA2Ljc4Mzc2MyxcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJub3N0cnVkXCIsXG4gICAgICBcImRvbG9yXCIsXG4gICAgICBcImV4ZXJjaXRhdGlvblwiLFxuICAgICAgXCJkb2xvcmVcIixcbiAgICAgIFwibmlzaVwiLFxuICAgICAgXCJ0ZW1wb3JcIixcbiAgICAgIFwiZG9sb3JlXCJcbiAgICBdLFxuICAgIFwiZnJpZW5kc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiRmVybmFuZGV6IFB1Z2hcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJKZWFubmV0dGUgTmF2YXJyb1wiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImlkXCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcIkNhc2FuZHJhIEZpbmxleVwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImZhdm9yaXRlRnJ1aXRcIjogXCJiYW5hbmFcIlxuICB9LFxuICB7XG4gICAgXCJfaWRcIjogXCI1ZWMxM2MyMzQzOTI3NmMwNTZkMTA3YjVcIixcbiAgICBcImluZGV4XCI6IDEyLFxuICAgIFwiZ3VpZFwiOiBcIjU5NmJjNDhhLTMyMmItNDZkZC04NTliLWVkNzJmZjkzMmJhNFwiLFxuICAgIFwiaXNBY3RpdmVcIjogdHJ1ZSxcbiAgICBcImJhbGFuY2VcIjogXCIkMSwxNjIuMjJcIixcbiAgICBcInBpY3R1cmVcIjogXCJodHRwOi8vcGxhY2Vob2xkLml0LzMyeDMyXCIsXG4gICAgXCJhZ2VcIjogMzUsXG4gICAgXCJleWVDb2xvclwiOiBcImdyZWVuXCIsXG4gICAgXCJuYW1lXCI6IFwiS2xpbmUgR3JpZmZpdGhcIixcbiAgICBcImdlbmRlclwiOiBcIm1hbGVcIixcbiAgICBcImNvbXBhbnlcIjogXCJNSUNST05BVVRcIixcbiAgICBcImVtYWlsXCI6IFwia2xpbmVncmlmZml0aEBtaWNyb25hdXQuY29tXCIsXG4gICAgXCJwaG9uZVwiOiBcIisxICg4NTQpIDQ0NC0zNzM1XCIsXG4gICAgXCJyZWdpc3RlcmVkXCI6IFwiMjAxOC0xMS0wMVQwMjozOTo1OSAtMDM6MDBcIixcbiAgICBcImxhdGl0dWRlXCI6IDEyLjk2MTE1NCxcbiAgICBcImxvbmdpdHVkZVwiOiAtOTIuNTE5MzcxLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcImFtZXRcIixcbiAgICAgIFwiaXJ1cmVcIixcbiAgICAgIFwiaXBzdW1cIixcbiAgICAgIFwiY29tbW9kb1wiLFxuICAgICAgXCJzaW50XCIsXG4gICAgICBcImNvbnNlcXVhdFwiLFxuICAgICAgXCJyZXByZWhlbmRlcml0XCJcbiAgICBdLFxuICAgIFwiZnJpZW5kc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiUGVjayBOaWNob2xzb25cIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJMdWNpbmRhIE1vcnJvd1wiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImlkXCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcIkpvZGllIEJhdGVzXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZmF2b3JpdGVGcnVpdFwiOiBcImJhbmFuYVwiXG4gIH0sXG4gIHtcbiAgICBcIl9pZFwiOiBcIjVlYzEzYzIzMWQ5MjExNzJjNDdiYThiN1wiLFxuICAgIFwiaW5kZXhcIjogMTMsXG4gICAgXCJndWlkXCI6IFwiZDk2YWM2MzUtZGZmMi00MzliLWExMTMtZjRiNGEyNjkzNTFiXCIsXG4gICAgXCJpc0FjdGl2ZVwiOiB0cnVlLFxuICAgIFwiYmFsYW5jZVwiOiBcIiQxLDM4Mi4xNFwiLFxuICAgIFwicGljdHVyZVwiOiBcImh0dHA6Ly9wbGFjZWhvbGQuaXQvMzJ4MzJcIixcbiAgICBcImFnZVwiOiAyMyxcbiAgICBcImV5ZUNvbG9yXCI6IFwiZ3JlZW5cIixcbiAgICBcIm5hbWVcIjogXCJNYXJpbmEgQ29jaHJhblwiLFxuICAgIFwiZ2VuZGVyXCI6IFwiZmVtYWxlXCIsXG4gICAgXCJjb21wYW55XCI6IFwiRUNSQVRFUlwiLFxuICAgIFwiZW1haWxcIjogXCJtYXJpbmFjb2NocmFuQGVjcmF0ZXIuY29tXCIsXG4gICAgXCJwaG9uZVwiOiBcIisxICg4OTIpIDQ4OC0zNzk4XCIsXG4gICAgXCJyZWdpc3RlcmVkXCI6IFwiMjAxNC0xMC0wOFQwNTo1MDo1NSAtMDM6MDBcIixcbiAgICBcImxhdGl0dWRlXCI6IC0yMS41MDAxNjgsXG4gICAgXCJsb25naXR1ZGVcIjogNDguMTA3NDk0LFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcImFuaW1cIixcbiAgICAgIFwiYWRcIixcbiAgICAgIFwibmlzaVwiLFxuICAgICAgXCJlc3NlXCIsXG4gICAgICBcIm5pc2lcIixcbiAgICAgIFwiTG9yZW1cIixcbiAgICAgIFwiYWxpcXVhXCJcbiAgICBdLFxuICAgIFwiZnJpZW5kc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiQnVyZ2VzcyBDYXJsc29uXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiQ2FybHkgRnJhbmtzXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMixcbiAgICAgICAgXCJuYW1lXCI6IFwiVmVsYXpxdWV6IEhvZmZtYW5cIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJmYXZvcml0ZUZydWl0XCI6IFwiYmFuYW5hXCJcbiAgfSxcbiAge1xuICAgIFwiX2lkXCI6IFwiNWVjMTNjMjNkYThjNTYxNDgwMTljZjFkXCIsXG4gICAgXCJpbmRleFwiOiAxNCxcbiAgICBcImd1aWRcIjogXCJiNGEwM2IxNS02NWI2LTRhOTUtOTNkNy0xODhhYTM2YWI0YjhcIixcbiAgICBcImlzQWN0aXZlXCI6IHRydWUsXG4gICAgXCJiYWxhbmNlXCI6IFwiJDMsMzE3LjkyXCIsXG4gICAgXCJwaWN0dXJlXCI6IFwiaHR0cDovL3BsYWNlaG9sZC5pdC8zMngzMlwiLFxuICAgIFwiYWdlXCI6IDM5LFxuICAgIFwiZXllQ29sb3JcIjogXCJncmVlblwiLFxuICAgIFwibmFtZVwiOiBcIkZheWUgU2hhZmZlclwiLFxuICAgIFwiZ2VuZGVyXCI6IFwiZmVtYWxlXCIsXG4gICAgXCJjb21wYW55XCI6IFwiUFJPV0FTVEVcIixcbiAgICBcImVtYWlsXCI6IFwiZmF5ZXNoYWZmZXJAcHJvd2FzdGUuY29tXCIsXG4gICAgXCJwaG9uZVwiOiBcIisxICg4NjYpIDU3MS0yOTIyXCIsXG4gICAgXCJyZWdpc3RlcmVkXCI6IFwiMjAxNi0xMS0xNFQwOTowNDoyMiAtMDM6MDBcIixcbiAgICBcImxhdGl0dWRlXCI6IC04MS4yNTgwMTYsXG4gICAgXCJsb25naXR1ZGVcIjogLTE2My4zNjExMDIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiZWxpdFwiLFxuICAgICAgXCJsYWJvcmVcIixcbiAgICAgIFwiZXhjZXB0ZXVyXCIsXG4gICAgICBcIm1vbGxpdFwiLFxuICAgICAgXCJsYWJvcnVtXCIsXG4gICAgICBcImNvbnNlY3RldHVyXCIsXG4gICAgICBcImRlc2VydW50XCJcbiAgICBdLFxuICAgIFwiZnJpZW5kc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiQnVsbG9jayBHaWxiZXJ0XCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiU3Ryb25nIEhlbmRyaXhcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAyLFxuICAgICAgICBcIm5hbWVcIjogXCJCaXJkIEdlbnRyeVwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImZhdm9yaXRlRnJ1aXRcIjogXCJiYW5hbmFcIlxuICB9LFxuICB7XG4gICAgXCJfaWRcIjogXCI1ZWMxM2MyMzU4NGZlN2M5NTk2NTNiNWNcIixcbiAgICBcImluZGV4XCI6IDE1LFxuICAgIFwiZ3VpZFwiOiBcImUzYzhhMTZkLWUwYzgtNDExNi1hYWZmLTM3ZTM1YWQyYzRlYlwiLFxuICAgIFwiaXNBY3RpdmVcIjogZmFsc2UsXG4gICAgXCJiYWxhbmNlXCI6IFwiJDEsMDE4LjQ0XCIsXG4gICAgXCJwaWN0dXJlXCI6IFwiaHR0cDovL3BsYWNlaG9sZC5pdC8zMngzMlwiLFxuICAgIFwiYWdlXCI6IDM1LFxuICAgIFwiZXllQ29sb3JcIjogXCJncmVlblwiLFxuICAgIFwibmFtZVwiOiBcIlBldHJhIEZvc3RlclwiLFxuICAgIFwiZ2VuZGVyXCI6IFwiZmVtYWxlXCIsXG4gICAgXCJjb21wYW55XCI6IFwiTklQQVpcIixcbiAgICBcImVtYWlsXCI6IFwicGV0cmFmb3N0ZXJAbmlwYXouY29tXCIsXG4gICAgXCJwaG9uZVwiOiBcIisxICg4NDApIDU0MC0yMDUzXCIsXG4gICAgXCJyZWdpc3RlcmVkXCI6IFwiMjAxOC0wNC0yNVQwODo0MjoxNiAtMDM6MDBcIixcbiAgICBcImxhdGl0dWRlXCI6IDY5LjIxNDQ5NixcbiAgICBcImxvbmdpdHVkZVwiOiAxMDYuNTU2NTksXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiZXNzZVwiLFxuICAgICAgXCJzdW50XCIsXG4gICAgICBcImVzc2VcIixcbiAgICAgIFwiYW1ldFwiLFxuICAgICAgXCJyZXByZWhlbmRlcml0XCIsXG4gICAgICBcImV4XCIsXG4gICAgICBcIm9jY2FlY2F0XCJcbiAgICBdLFxuICAgIFwiZnJpZW5kc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaWRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiRWxsYSBDYWxkd2VsbFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImlkXCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcIkRlZW5hIEhvbGNvbWJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpZFwiOiAyLFxuICAgICAgICBcIm5hbWVcIjogXCJCcm93biBEaWxsb25cIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJmYXZvcml0ZUZydWl0XCI6IFwiYXBwbGVcIlxuICB9XG5dO1xuXG5leHBvcnQgZGVmYXVsdCBwZW9wbGU7XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vZ3MuanMuc3Rvcmllcy5tZHhcIjogNDIwLFxuXHRcIi4vZ3MudHMuc3Rvcmllcy5tZHhcIjogNDIxLFxuXHRcIi4vZ3MudnVlLnN0b3JpZXMubWR4XCI6IDQyMixcblx0XCIuL292ZXJ2aWV3LnN0b3JpZXMubWR4XCI6IDQyM1xufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDQxOTsiLCJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnXG5cbi8qIEBqc3ggbWR4ICovXG5pbXBvcnQgeyBhc3NlcnRJc0ZuLCBBZGRDb250ZXh0IH0gZnJvbSBcIkBzdG9yeWJvb2svYWRkb24tZG9jcy9ibG9ja3NcIjtcblxuaW1wb3J0IHsgTWV0YSwgU3RvcnksIFByZXZpZXcgfSBmcm9tICdAc3Rvcnlib29rL2FkZG9uLWRvY3MvYmxvY2tzJztcblxuY29uc3QgbWFrZVNob3J0Y29kZSA9IG5hbWUgPT4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcykge1xuICBjb25zb2xlLndhcm4oXCJDb21wb25lbnQgXCIgKyBuYW1lICsgXCIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZVwiKVxuICByZXR1cm4gPGRpdiB7Li4ucHJvcHN9Lz5cbn07XG5cbmNvbnN0IGxheW91dFByb3BzID0ge1xuICBcbn07XG5jb25zdCBNRFhMYXlvdXQgPSBcIndyYXBwZXJcIlxuZnVuY3Rpb24gTURYQ29udGVudCh7XG4gIGNvbXBvbmVudHMsXG4gIC4uLnByb3BzXG59KSB7XG4gIHJldHVybiA8TURYTGF5b3V0IHsuLi5sYXlvdXRQcm9wc30gey4uLnByb3BzfSBjb21wb25lbnRzPXtjb21wb25lbnRzfSBtZHhUeXBlPVwiTURYTGF5b3V0XCI+XG5cbiAgICA8TWV0YSB0aXRsZT1cIkRvY3MvR2V0dGluZyBTdGFydGVkL0phdmFTY3JpcHRcIiBtZHhUeXBlPVwiTWV0YVwiIC8+XG4gICAgPGgxIHsuLi57XG4gICAgICBcImlkXCI6IFwiZ2V0dGluZy1zdGFydGVkXCJcbiAgICB9fT57YEdldHRpbmcgU3RhcnRlZGB9PC9oMT5cbiAgICA8aDEgey4uLntcbiAgICAgIFwiaWRcIjogXCJcIlxuICAgIH19PjwvaDE+XG4gICAgPGgyIHsuLi57XG4gICAgICBcImlkXCI6IFwiamF2YXNjcmlwdFwiXG4gICAgfX0+e2BKYXZhU2NyaXB0YH08L2gyPlxuICAgIDxwPntgRGVmaW5lIHdlYmNvbXBvbmVudCBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2A8cmV2by1ncmlkLz5gfTwvaW5saW5lQ29kZT57YCBhbmQgeW91IGNhbiBhY2Nlc3MgaXQgcHJvcGVydHkgaW4gbmF0dXJhbCB3YXkuXG5DdXN0b20gY2VsbCB0ZW1wbGF0ZSBhcyBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BjZWxsVGVtcGxhdGVgfTwvaW5saW5lQ29kZT57YCBwcm92aWRlZC4gU291cmNlIGFzIGFuIEFycmF5LlxuQ2hlY2sgU2hvdyBjb2RlIGZvciBtb2RlIGRldGFpbHMuYH08L3A+XG4gICAgPFByZXZpZXcgbWR4VHlwZT1cIlByZXZpZXdcIj5cbiAgPFN0b3J5IG5hbWU9XCJKYXZhU2NyaXB0XCIgaWQ9XCJzb3VyY2UtYXBpLWphdmFzY3JpcHQtLWJhc2ljLXNhbXBsZVwiIG1keFR5cGU9XCJTdG9yeVwiIC8+XG4gICAgPC9QcmV2aWV3PlxuICAgIDwvTURYTGF5b3V0Pjtcbn1cblxuO1xuTURYQ29udGVudC5pc01EWENvbXBvbmVudCA9IHRydWU7XG5cbmV4cG9ydCBjb25zdCBfX3BhZ2UgPSAoKSA9PiB7IHRocm93IG5ldyBFcnJvcihcIkRvY3Mtb25seSBzdG9yeVwiKTsgfTtcblxuX19wYWdlLnN0b3J5ID0geyBwYXJhbWV0ZXJzOiB7IGRvY3NPbmx5OiB0cnVlIH0gfTtcblxuY29uc3QgY29tcG9uZW50TWV0YSA9IHsgdGl0bGU6ICdEb2NzL0dldHRpbmcgU3RhcnRlZC9KYXZhU2NyaXB0JywgaW5jbHVkZVN0b3JpZXM6IFtcIl9fcGFnZVwiXSwgIH07XG5cbmNvbnN0IG1keFN0b3J5TmFtZVRvS2V5ID0ge307XG5cbmNvbXBvbmVudE1ldGEucGFyYW1ldGVycyA9IGNvbXBvbmVudE1ldGEucGFyYW1ldGVycyB8fCB7fTtcbmNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzID0ge1xuICAuLi4oY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzLmRvY3MgfHwge30pLFxuICBwYWdlOiAoKSA9PiA8QWRkQ29udGV4dCBtZHhTdG9yeU5hbWVUb0tleT17bWR4U3RvcnlOYW1lVG9LZXl9IG1keENvbXBvbmVudE1ldGE9e2NvbXBvbmVudE1ldGF9PjxNRFhDb250ZW50IC8+PC9BZGRDb250ZXh0Pixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudE1ldGE7IiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0J1xuXG4vKiBAanN4IG1keCAqL1xuaW1wb3J0IHsgYXNzZXJ0SXNGbiwgQWRkQ29udGV4dCB9IGZyb20gXCJAc3Rvcnlib29rL2FkZG9uLWRvY3MvYmxvY2tzXCI7XG5cbmltcG9ydCB7IE1ldGEsIFN0b3J5LCBQcmV2aWV3IH0gZnJvbSAnQHN0b3J5Ym9vay9hZGRvbi1kb2NzL2Jsb2Nrcyc7XG5cbmNvbnN0IG1ha2VTaG9ydGNvZGUgPSBuYW1lID0+IGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpIHtcbiAgY29uc29sZS53YXJuKFwiQ29tcG9uZW50IFwiICsgbmFtZSArIFwiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGVcIilcbiAgcmV0dXJuIDxkaXYgey4uLnByb3BzfS8+XG59O1xuXG5jb25zdCBsYXlvdXRQcm9wcyA9IHtcbiAgXG59O1xuY29uc3QgTURYTGF5b3V0ID0gXCJ3cmFwcGVyXCJcbmZ1bmN0aW9uIE1EWENvbnRlbnQoe1xuICBjb21wb25lbnRzLFxuICAuLi5wcm9wc1xufSkge1xuICByZXR1cm4gPE1EWExheW91dCB7Li4ubGF5b3V0UHJvcHN9IHsuLi5wcm9wc30gY29tcG9uZW50cz17Y29tcG9uZW50c30gbWR4VHlwZT1cIk1EWExheW91dFwiPlxuXG4gICAgPE1ldGEgdGl0bGU9XCJEb2NzL0dldHRpbmcgU3RhcnRlZC9UeXBlU2NyaXB0XCIgbWR4VHlwZT1cIk1ldGFcIiAvPlxuICAgIDxoMSB7Li4ue1xuICAgICAgXCJpZFwiOiBcImdldHRpbmctc3RhcnRlZFwiXG4gICAgfX0+e2BHZXR0aW5nIFN0YXJ0ZWRgfTwvaDE+XG4gICAgPGgxIHsuLi57XG4gICAgICBcImlkXCI6IFwiXCJcbiAgICB9fT48L2gxPlxuICAgIDxoMiB7Li4ue1xuICAgICAgXCJpZFwiOiBcInR5cGVzY3JpcHRcIlxuICAgIH19PntgVHlwZVNjcmlwdGB9PC9oMj5cbiAgICA8cD57YERlZmluZSB3ZWJjb21wb25lbnQgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgPHJldm8tZ3JpZC8+YH08L2lubGluZUNvZGU+e2AgYW5kIHlvdSBjYW4gYWNjZXNzIGl0IHByb3BlcnR5IGluIG5hdHVyYWwgd2F5LlxuV29ya3MgZXhhY3RseSBzYW1lIHdheSBhcyBWYW5pbGxhIEpzLCBhbGwgdHlwaW5ncyBzdXBwb3J0ZWQgZnJvbSBjb21wb25lbnQgZm9sZGVyLiBTb3VyY2UgYXMgYW4gT2JqZWN0LlxuQ2hlY2sgU2hvdyBjb2RlIGZvciBtb2RlIGRldGFpbHMuYH08L3A+XG4gICAgPFByZXZpZXcgbWR4VHlwZT1cIlByZXZpZXdcIj5cbiAgPFN0b3J5IG5hbWU9XCJUeXBlU2NyaXB0XCIgaWQ9XCJzb3VyY2UtYXBpLXR5cGVzY3JpcHQtLWJhc2ljLXNhbXBsZVwiIG1keFR5cGU9XCJTdG9yeVwiIC8+XG4gICAgPC9QcmV2aWV3PlxuICAgIDwvTURYTGF5b3V0Pjtcbn1cblxuO1xuTURYQ29udGVudC5pc01EWENvbXBvbmVudCA9IHRydWU7XG5cbmV4cG9ydCBjb25zdCBfX3BhZ2UgPSAoKSA9PiB7IHRocm93IG5ldyBFcnJvcihcIkRvY3Mtb25seSBzdG9yeVwiKTsgfTtcblxuX19wYWdlLnN0b3J5ID0geyBwYXJhbWV0ZXJzOiB7IGRvY3NPbmx5OiB0cnVlIH0gfTtcblxuY29uc3QgY29tcG9uZW50TWV0YSA9IHsgdGl0bGU6ICdEb2NzL0dldHRpbmcgU3RhcnRlZC9UeXBlU2NyaXB0JywgaW5jbHVkZVN0b3JpZXM6IFtcIl9fcGFnZVwiXSwgIH07XG5cbmNvbnN0IG1keFN0b3J5TmFtZVRvS2V5ID0ge307XG5cbmNvbXBvbmVudE1ldGEucGFyYW1ldGVycyA9IGNvbXBvbmVudE1ldGEucGFyYW1ldGVycyB8fCB7fTtcbmNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzID0ge1xuICAuLi4oY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzLmRvY3MgfHwge30pLFxuICBwYWdlOiAoKSA9PiA8QWRkQ29udGV4dCBtZHhTdG9yeU5hbWVUb0tleT17bWR4U3RvcnlOYW1lVG9LZXl9IG1keENvbXBvbmVudE1ldGE9e2NvbXBvbmVudE1ldGF9PjxNRFhDb250ZW50IC8+PC9BZGRDb250ZXh0Pixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudE1ldGE7IiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0J1xuXG4vKiBAanN4IG1keCAqL1xuaW1wb3J0IHsgYXNzZXJ0SXNGbiwgQWRkQ29udGV4dCB9IGZyb20gXCJAc3Rvcnlib29rL2FkZG9uLWRvY3MvYmxvY2tzXCI7XG5cbmltcG9ydCB7IE1ldGEsIFN0b3J5LCBQcmV2aWV3IH0gZnJvbSAnQHN0b3J5Ym9vay9hZGRvbi1kb2NzL2Jsb2Nrcyc7XG5cbmNvbnN0IG1ha2VTaG9ydGNvZGUgPSBuYW1lID0+IGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpIHtcbiAgY29uc29sZS53YXJuKFwiQ29tcG9uZW50IFwiICsgbmFtZSArIFwiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGVcIilcbiAgcmV0dXJuIDxkaXYgey4uLnByb3BzfS8+XG59O1xuXG5jb25zdCBsYXlvdXRQcm9wcyA9IHtcbiAgXG59O1xuY29uc3QgTURYTGF5b3V0ID0gXCJ3cmFwcGVyXCJcbmZ1bmN0aW9uIE1EWENvbnRlbnQoe1xuICBjb21wb25lbnRzLFxuICAuLi5wcm9wc1xufSkge1xuICByZXR1cm4gPE1EWExheW91dCB7Li4ubGF5b3V0UHJvcHN9IHsuLi5wcm9wc30gY29tcG9uZW50cz17Y29tcG9uZW50c30gbWR4VHlwZT1cIk1EWExheW91dFwiPlxuXG4gICAgPE1ldGEgdGl0bGU9XCJEb2NzL0dldHRpbmcgU3RhcnRlZC9WdWVcIiBtZHhUeXBlPVwiTWV0YVwiIC8+XG4gICAgPGgxIHsuLi57XG4gICAgICBcImlkXCI6IFwiZ2V0dGluZy1zdGFydGVkXCJcbiAgICB9fT57YEdldHRpbmcgU3RhcnRlZGB9PC9oMT5cbiAgICA8aDEgey4uLntcbiAgICAgIFwiaWRcIjogXCJcIlxuICAgIH19PjwvaDE+XG4gICAgPGgyIHsuLi57XG4gICAgICBcImlkXCI6IFwidnVlXCJcbiAgICB9fT57YFZ1ZWB9PC9oMj5cbiAgICA8cD57YFNldCBpZ25vcmUgd2ViLWNvbXBvbmVudCBhcyBwYXJ0IG9mIHZ1ZWpzIHRlbXBsYXRlOiBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BWdWUuY29uZmlnLmlnbm9yZWRFbGVtZW50cyA9IFsvcmV2by1cXFxcdyovXTtgfTwvaW5saW5lQ29kZT57YC5cbkRlZmluZSB3ZWJjb21wb25lbnQgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgPHJldm8tZ3JpZC8+YH08L2lubGluZUNvZGU+e2AgYW5kIHlvdSBjYW4gYWNjZXNzIGl0IGluIGEgXCJWdWUgd2F5XCIgZm9yIGV4YW1wbGUgYXMgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgPHJldm8tZ3JpZCA6c291cmNlLnByb3A9XCJzb3VyY2VcIi8+YH08L2lubGluZUNvZGU+e2AuXG5DaGVjayBTaG93IGNvZGUgZm9yIG1vZGUgZGV0YWlscy5gfTwvcD5cbiAgICA8UHJldmlldyBtZHhUeXBlPVwiUHJldmlld1wiPlxuICA8U3RvcnkgbmFtZT1cIkphdmFTY3JpcHRcIiBpZD1cInNvdXJjZS1hcGktdnVlanMtLWJhc2ljLXNhbXBsZVwiIG1keFR5cGU9XCJTdG9yeVwiIC8+XG4gICAgPC9QcmV2aWV3PlxuICAgIDwvTURYTGF5b3V0Pjtcbn1cblxuO1xuTURYQ29udGVudC5pc01EWENvbXBvbmVudCA9IHRydWU7XG5cbmV4cG9ydCBjb25zdCBfX3BhZ2UgPSAoKSA9PiB7IHRocm93IG5ldyBFcnJvcihcIkRvY3Mtb25seSBzdG9yeVwiKTsgfTtcblxuX19wYWdlLnN0b3J5ID0geyBwYXJhbWV0ZXJzOiB7IGRvY3NPbmx5OiB0cnVlIH0gfTtcblxuY29uc3QgY29tcG9uZW50TWV0YSA9IHsgdGl0bGU6ICdEb2NzL0dldHRpbmcgU3RhcnRlZC9WdWUnLCBpbmNsdWRlU3RvcmllczogW1wiX19wYWdlXCJdLCAgfTtcblxuY29uc3QgbWR4U3RvcnlOYW1lVG9LZXkgPSB7fTtcblxuY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzID0gY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzIHx8IHt9O1xuY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzLmRvY3MgPSB7XG4gIC4uLihjb21wb25lbnRNZXRhLnBhcmFtZXRlcnMuZG9jcyB8fCB7fSksXG4gIHBhZ2U6ICgpID0+IDxBZGRDb250ZXh0IG1keFN0b3J5TmFtZVRvS2V5PXttZHhTdG9yeU5hbWVUb0tleX0gbWR4Q29tcG9uZW50TWV0YT17Y29tcG9uZW50TWV0YX0+PE1EWENvbnRlbnQgLz48L0FkZENvbnRleHQ+LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50TWV0YTsiLCJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnXG5cbi8qIEBqc3ggbWR4ICovXG5pbXBvcnQgeyBhc3NlcnRJc0ZuLCBBZGRDb250ZXh0IH0gZnJvbSBcIkBzdG9yeWJvb2svYWRkb24tZG9jcy9ibG9ja3NcIjtcblxuXG5cbmNvbnN0IG1ha2VTaG9ydGNvZGUgPSBuYW1lID0+IGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpIHtcbiAgY29uc29sZS53YXJuKFwiQ29tcG9uZW50IFwiICsgbmFtZSArIFwiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGVcIilcbiAgcmV0dXJuIDxkaXYgey4uLnByb3BzfS8+XG59O1xuY29uc3QgTWV0YSA9IG1ha2VTaG9ydGNvZGUoXCJNZXRhXCIpO1xuY29uc3QgbGF5b3V0UHJvcHMgPSB7XG4gIFxufTtcbmNvbnN0IE1EWExheW91dCA9IFwid3JhcHBlclwiXG5mdW5jdGlvbiBNRFhDb250ZW50KHtcbiAgY29tcG9uZW50cyxcbiAgLi4ucHJvcHNcbn0pIHtcbiAgcmV0dXJuIDxNRFhMYXlvdXQgey4uLmxheW91dFByb3BzfSB7Li4ucHJvcHN9IGNvbXBvbmVudHM9e2NvbXBvbmVudHN9IG1keFR5cGU9XCJNRFhMYXlvdXRcIj5cbiAgICA8TWV0YSB0aXRsZT1cIkRvY3MvT3ZlcnZpZXdcIiBtZHhUeXBlPVwiTWV0YVwiIC8+XG4gICAgPGgyIHsuLi57XG4gICAgICBcImlkXCI6IFwiYWJvdXQtY29tcG9uZW50XCJcbiAgICB9fT57YEFib3V0IGNvbXBvbmVudGB9PC9oMj5cbiAgICA8cD57YFJldm9HcmlkIGNvbXBvbmVudCBpcyBmYXN0IHZpcnR1YWwgYmFzZWQgZ3JpZCBkZXZlbG9wZWQgYmFzZWQgb24gYH08YSBwYXJlbnROYW1lPVwicFwiIHsuLi57XG4gICAgICAgIFwiaHJlZlwiOiBcImh0dHBzOi8vc3RlbmNpbGpzLmNvbS9kb2NzL2ludHJvZHVjdGlvblwiLFxuICAgICAgICBcInRhcmdldFwiOiBcIl9ibGFua1wiLFxuICAgICAgICBcInJlbFwiOiBcIm5vZm9sbG93IG5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgfX0+e2BTdGVuY2lsSnMgZnJhbWV3b3JrYH08L2E+e2AuXG5GdWxseSByZWFjdGl2ZSBjb21wb25lbnQgZm9yIGZhc3Qgc3BlZWQgZGF0YSByZXByZXNlbnRhdGlvbiB3aGljaCBpcyB3b3JraW5nIHdpdGggYWxtb3N0IGV2ZXJ5IHBvcHVsYXIgZnJhbWV3b3JrIG9yIHdpdGhvdXQgaXQuYH08L3A+XG4gICAgPGgyIHsuLi57XG4gICAgICBcImlkXCI6IFwiaW5zdGFsbGluZ1wiXG4gICAgfX0+e2BJbnN0YWxsaW5nYH08L2gyPlxuICAgIDxwPntgSW50ZWdyYXRpbmcgYSBjb21wb25lbnQgdG8gYSBwcm9qZWN0IHdpdGhvdXQgYSBKYXZhU2NyaXB0IGZyYW1ld29yayBpcyBzdHJhaWdodCBmb3J3YXJkLlxuSWYgeW91J3JlIHVzaW5nIGEgc2ltcGxlIEhUTUwgcGFnZSwgeW91IGNhbiBhZGQgUmV2b0dyaWQgdmlhIGEgc2NyaXB0IHRhZy5gfTwvcD5cbiAgICA8cD57YEZvciBleGFtcGxlLCB3ZSBjb3VsZCBsb2FkIHRoZSBjb21wb25lbnQgdGhyb3VnaCB1bnBrZyBsaWtlIHRoaXM6YH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS1qc1wiXG4gICAgICB9fT57YDxzY3JpcHQgc3JjPVwiaHR0cHM6Ly91bnBrZy5jb20vQHJldm9saXN0L3Jldm9ncmlkQGxhdGVzdC9kaXN0L3Jldm8tZ3JpZC5qc1wiPjwvc2NyaXB0PlxuYH08L2NvZGU+PC9wcmU+XG4gICAgPHA+e2BPciB5b3UgY2FuIGluc3RhbGwgUmV2b0dyaWQgd2l0aCBgfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgXCJocmVmXCI6IFwiaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHJldm9saXN0L3Jldm9ncmlkXCIsXG4gICAgICAgIFwidGFyZ2V0XCI6IFwiX2JsYW5rXCIsXG4gICAgICAgIFwicmVsXCI6IFwibm9mb2xsb3cgbm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICB9fT57YE5QTWB9PC9hPntgOmB9PC9wPlxuICAgIDx1bD5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIj57YE5QTTogYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwibGlcIj57YG5wbSBpIEByZXZvbGlzdC9yZXZvZ3JpZCAtLXNhdmVgfTwvaW5saW5lQ29kZT48L2xpPlxuICAgIDwvdWw+XG4gICAgPHA+e2BBbmQgaW1wb3J0IGl0IGFzIEVTIE1vZHVsZSBvciBmcm9tIGxvY2FsIG5vZGVfbW9kdWxlcyBkaXJlY3Rvcnk6YH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS1qc1wiXG4gICAgICB9fT57YGltcG9ydCB7IGFwcGx5UG9seWZpbGxzLCBkZWZpbmVDdXN0b21FbGVtZW50cyB9IGZyb20gJ0ByZXZvbGlzdC9yZXZvZ3JpZC9sb2FkZXInO1xuYH08L2NvZGU+PC9wcmU+XG4gICAgPHA+e2BBbHRlcm5hdGl2ZWx5LCBpZiB5b3Ugd2FudGVkIHRvIHRha2UgYWR2YW50YWdlIG9mIEVTIE1vZHVsZXMsIHlvdSBjb3VsZCBpbmNsdWRlIHRoZSBjb21wb25lbnRzIHVzaW5nIGFuIGltcG9ydCBzdGF0ZW1lbnQuXG5Ob3RlIHRoYXQgaW4gdGhpcyBzY2VuYXJpbyBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BhcHBseVBvbHlmaWxsc2B9PC9pbmxpbmVDb2RlPntgIGlzIG5lZWRlZCBpZiB5b3UgYXJlIHRhcmdldGluZyBFZGdlIG9yIElFMTEuYH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS1qc1wiXG4gICAgICB9fT57YDxzY3JpcHQgdHlwZT1cIm1vZHVsZVwiPlxuICAgIGltcG9ydCB7IGFwcGx5UG9seWZpbGxzLCBkZWZpbmVDdXN0b21FbGVtZW50cyB9IGZyb20gXCJodHRwczovL3VucGtnLmNvbS9AcmV2b2xpc3QvcmV2b2dyaWRAbGF0ZXN0L2xvYWRlclwiO1xuICAgIGFwcGx5UG9seWZpbGxzKCkudGhlbigoKSA9PiB7XG4gICAgICBkZWZpbmVDdXN0b21FbGVtZW50cygpO1xuICAgIH0pO1xuPC9zY3JpcHQ+XG5gfTwvY29kZT48L3ByZT5cbiAgICA8L01EWExheW91dD47XG59XG5cbjtcbk1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlO1xuXG5leHBvcnQgY29uc3QgX19wYWdlID0gKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoXCJEb2NzLW9ubHkgc3RvcnlcIik7IH07XG5cbl9fcGFnZS5zdG9yeSA9IHsgcGFyYW1ldGVyczogeyBkb2NzT25seTogdHJ1ZSB9IH07XG5cbmNvbnN0IGNvbXBvbmVudE1ldGEgPSB7IHRpdGxlOiAnRG9jcy9PdmVydmlldycsIGluY2x1ZGVTdG9yaWVzOiBbXCJfX3BhZ2VcIl0sICB9O1xuXG5jb25zdCBtZHhTdG9yeU5hbWVUb0tleSA9IHt9O1xuXG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgPSBjb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgfHwge307XG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMuZG9jcyA9IHtcbiAgLi4uKGNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzIHx8IHt9KSxcbiAgcGFnZTogKCkgPT4gPEFkZENvbnRleHQgbWR4U3RvcnlOYW1lVG9LZXk9e21keFN0b3J5TmFtZVRvS2V5fSBtZHhDb21wb25lbnRNZXRhPXtjb21wb25lbnRNZXRhfT48TURYQ29udGVudCAvPjwvQWRkQ29udGV4dD4sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnRNZXRhOyJdLCJzb3VyY2VSb290IjoiIn0=