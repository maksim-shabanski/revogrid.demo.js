(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{427:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(global){__webpack_require__.d(__webpack_exports__,"revo_grid",(function(){return RevoGrid})),__webpack_require__.d(__webpack_exports__,"revogr_data",(function(){return RevogrData})),__webpack_require__.d(__webpack_exports__,"revogr_header",(function(){return ViewportDataComponent})),__webpack_require__.d(__webpack_exports__,"revogr_viewport_scrollable",(function(){return RevogrViewportScrollable}));var fn,ms,timeoutId,_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(101),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=function(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},__spreadArrays=function(){for(var s=0,i=0,il=arguments.length;i<il;i++)s+=arguments[i].length;var r=Array(s),k=0;for(i=0;i<il;i++)for(var a=arguments[i],j=0,jl=a.length;j<jl;j++,k++)r[k]=a[j];return r},isConnected=function(maybeElement){return!("isConnected"in maybeElement)||maybeElement.isConnected},cleanupElements=(fn=function(map){for(var _b=0,_c=map.keys();_b<_c.length;_b++){var key=_c[_b];map.set(key,map.get(key).filter(isConnected))}},ms=2e3,function(){for(var args=[],_b=0;_b<arguments.length;_b++)args[_b]=arguments[_b];timeoutId&&clearTimeout(timeoutId),timeoutId=setTimeout((function(){timeoutId=0,fn.apply(void 0,args)}),ms)}),removeFromArray=function(array,item){var index=array.indexOf(item);index>=0&&(array[index]=array[array.length-1],array.length--)},createStore=function(defaultState){var on,elmsToUpdate,map=function(defaultState){var states=new Map(Object.entries(null!=defaultState?defaultState:{})),handlers={get:[],set:[],reset:[]},get=function(propName){return handlers.get.forEach((function(cb){return cb(propName)})),states.get(propName)},set=function(propName,value){var oldValue=states.get(propName);oldValue===value&&"object"!=typeof value||(states.set(propName,value),handlers.set.forEach((function(cb){return cb(propName,value,oldValue)})))},state="undefined"==typeof Proxy?{}:new Proxy(defaultState,{get:function(_,propName){return get(propName)},ownKeys:function(_){return Array.from(states.keys())},getOwnPropertyDescriptor:function(){return{enumerable:!0,configurable:!0}},has:function(_,propName){return states.has(propName)},set:function(_,propName,value){return set(propName,value),!0}}),on=function(eventName,callback){return handlers[eventName].push(callback),function(){removeFromArray(handlers[eventName],callback)}};return{state:state,get:get,set:set,on:on,onChange:function(propName,cb){var unSet=on("set",(function(key,newValue){key===propName&&cb(newValue)})),unReset=on("reset",(function(){return cb(defaultState[propName])}));return function(){unSet(),unReset()}},use:function(){for(var subscriptions=[],_b=0;_b<arguments.length;_b++)subscriptions[_b]=arguments[_b];return subscriptions.forEach((function(subscription){subscription.set&&on("set",subscription.set),subscription.get&&on("get",subscription.get),subscription.reset&&on("reset",subscription.reset)}))},reset:function(){states=new Map(Object.entries(null!=defaultState?defaultState:{})),handlers.reset.forEach((function(cb){return cb()}))}}}(defaultState);return on=map.on,elmsToUpdate=new Map,"function"==typeof _index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.e&&(on("get",(function(propName){var elm=Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.e)();elm&&function(map,propName,value){var items=map.get(propName);items?items.includes(value)||items.push(value):map.set(propName,[value])}(elmsToUpdate,propName,elm)})),on("set",(function(propName){var elements=elmsToUpdate.get(propName);elements&&elmsToUpdate.set(propName,elements.filter(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.d)),cleanupElements(elmsToUpdate)})),on("reset",(function(){elmsToUpdate.forEach((function(elms){return elms.forEach(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.d)})),cleanupElements(elmsToUpdate)}))),map},objectProto=Object.prototype;var _isPrototype=function isPrototype(value){var Ctor=value&&value.constructor;return value===("function"==typeof Ctor&&Ctor.prototype||objectProto)};var _nativeKeys=function overArg(func,transform){return function(arg){return func(transform(arg))}}(Object.keys,Object),hasOwnProperty=Object.prototype.hasOwnProperty;var _baseKeys=function baseKeys(object){if(!_isPrototype(object))return _nativeKeys(object);var result=[];for(var key in Object(object))hasOwnProperty.call(object,key)&&"constructor"!=key&&result.push(key);return result},commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==global?global:"undefined"!=typeof self?self:{};function createCommonjsModule(fn,module){return fn(module={exports:{}},module.exports),module.exports}var _freeGlobal="object"==typeof commonjsGlobal&&commonjsGlobal&&commonjsGlobal.Object===Object&&commonjsGlobal,freeSelf="object"==typeof self&&self&&self.Object===Object&&self,_root=_freeGlobal||freeSelf||Function("return this")(),_Symbol=_root.Symbol,objectProto$2=Object.prototype,hasOwnProperty$1=objectProto$2.hasOwnProperty,nativeObjectToString=objectProto$2.toString,symToStringTag=_Symbol?_Symbol.toStringTag:void 0;var _getRawTag=function getRawTag(value){var isOwn=hasOwnProperty$1.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=void 0;var unmasked=!0}catch(e){}var result=nativeObjectToString.call(value);return unmasked&&(isOwn?value[symToStringTag]=tag:delete value[symToStringTag]),result},nativeObjectToString$1=Object.prototype.toString;var _objectToString=function objectToString(value){return nativeObjectToString$1.call(value)},symToStringTag$1=_Symbol?_Symbol.toStringTag:void 0;var _baseGetTag=function baseGetTag(value){return null==value?void 0===value?"[object Undefined]":"[object Null]":symToStringTag$1&&symToStringTag$1 in Object(value)?_getRawTag(value):_objectToString(value)};var isObject_1=function isObject(value){var type=typeof value;return null!=value&&("object"==type||"function"==type)};var uid,isFunction_1=function isFunction(value){if(!isObject_1(value))return!1;var tag=_baseGetTag(value);return"[object Function]"==tag||"[object GeneratorFunction]"==tag||"[object AsyncFunction]"==tag||"[object Proxy]"==tag},_coreJsData=_root["__core-js_shared__"],maskSrcKey=(uid=/[^.]+$/.exec(_coreJsData&&_coreJsData.keys&&_coreJsData.keys.IE_PROTO||""))?"Symbol(src)_1."+uid:"";var _isMasked=function isMasked(func){return!!maskSrcKey&&maskSrcKey in func},funcToString=Function.prototype.toString;var _toSource=function toSource(func){if(null!=func){try{return funcToString.call(func)}catch(e){}try{return func+""}catch(e){}}return""},reIsHostCtor=/^\[object .+?Constructor\]$/,funcProto$1=Function.prototype,objectProto$4=Object.prototype,funcToString$1=funcProto$1.toString,hasOwnProperty$2=objectProto$4.hasOwnProperty,reIsNative=RegExp("^"+funcToString$1.call(hasOwnProperty$2).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");var _baseIsNative=function baseIsNative(value){return!(!isObject_1(value)||_isMasked(value))&&(isFunction_1(value)?reIsNative:reIsHostCtor).test(_toSource(value))};var _getValue=function getValue(object,key){return null==object?void 0:object[key]};var _getNative=function getNative(object,key){var value=_getValue(object,key);return _baseIsNative(value)?value:void 0},_DataView=_getNative(_root,"DataView"),_Map=_getNative(_root,"Map"),Promise=_getNative(_root,"Promise"),_Promise=Promise,_Set=_getNative(_root,"Set"),_WeakMap=_getNative(_root,"WeakMap"),dataViewCtorString=_toSource(_DataView),mapCtorString=_toSource(_Map),promiseCtorString=_toSource(_Promise),setCtorString=_toSource(_Set),weakMapCtorString=_toSource(_WeakMap),getTag=_baseGetTag;(_DataView&&"[object DataView]"!=getTag(new _DataView(new ArrayBuffer(1)))||_Map&&"[object Map]"!=getTag(new _Map)||_Promise&&"[object Promise]"!=getTag(_Promise.resolve())||_Set&&"[object Set]"!=getTag(new _Set)||_WeakMap&&"[object WeakMap]"!=getTag(new _WeakMap))&&(getTag=function(value){var result=_baseGetTag(value),Ctor="[object Object]"==result?value.constructor:void 0,ctorString=Ctor?_toSource(Ctor):"";if(ctorString)switch(ctorString){case dataViewCtorString:return"[object DataView]";case mapCtorString:return"[object Map]";case promiseCtorString:return"[object Promise]";case setCtorString:return"[object Set]";case weakMapCtorString:return"[object WeakMap]"}return result});var _getTag=getTag;var isLength_1=function isLength(value){return"number"==typeof value&&value>-1&&value%1==0&&value<=9007199254740991};var isArrayLike_1=function isArrayLike(value){return null!=value&&isLength_1(value.length)&&!isFunction_1(value)},isArray_1=Array.isArray;var isObjectLike_1=function isObjectLike(value){return null!=value&&"object"==typeof value};var isString_1=function isString(value){return"string"==typeof value||!isArray_1(value)&&isObjectLike_1(value)&&"[object String]"==_baseGetTag(value)};var _baseProperty=function baseProperty(key){return function(object){return null==object?void 0:object[key]}},_asciiSize=_baseProperty("length"),reHasUnicode=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");var _hasUnicode=function hasUnicode(string){return reHasUnicode.test(string)},rsAstral="[\\ud800-\\udfff]",rsCombo="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",rsFitz="\\ud83c[\\udffb-\\udfff]",rsNonAstral="[^\\ud800-\\udfff]",rsRegional="(?:\\ud83c[\\udde6-\\uddff]){2}",rsSurrPair="[\\ud800-\\udbff][\\udc00-\\udfff]",reOptMod="(?:"+rsCombo+"|"+rsFitz+")"+"?",rsSeq="[\\ufe0e\\ufe0f]?"+reOptMod+("(?:\\u200d(?:"+[rsNonAstral,rsRegional,rsSurrPair].join("|")+")[\\ufe0e\\ufe0f]?"+reOptMod+")*"),rsSymbol="(?:"+[rsNonAstral+rsCombo+"?",rsCombo,rsRegional,rsSurrPair,rsAstral].join("|")+")",reUnicode=RegExp(rsFitz+"(?="+rsFitz+")|"+rsSymbol+rsSeq,"g");var _unicodeSize=function unicodeSize(string){for(var result=reUnicode.lastIndex=0;reUnicode.test(string);)++result;return result};var _stringSize=function stringSize(string){return _hasUnicode(string)?_unicodeSize(string):_asciiSize(string)};var size_1=function size(collection){if(null==collection)return 0;if(isArrayLike_1(collection))return isString_1(collection)?_stringSize(collection):collection.length;var tag=_getTag(collection);return"[object Map]"==tag||"[object Set]"==tag?collection.size:_baseKeys(collection).length};var _arrayEach=function arrayEach(array,iteratee){for(var index=-1,length=null==array?0:array.length;++index<length&&!1!==iteratee(array[index],index,array););return array};var _baseFor=function createBaseFor(fromRight){return function(object,iteratee,keysFunc){for(var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;length--;){var key=props[fromRight?length:++index];if(!1===iteratee(iterable[key],key,iterable))break}return object}}();var _baseTimes=function baseTimes(n,iteratee){for(var index=-1,result=Array(n);++index<n;)result[index]=iteratee(index);return result};var _baseIsArguments=function baseIsArguments(value){return isObjectLike_1(value)&&"[object Arguments]"==_baseGetTag(value)},objectProto$5=Object.prototype,hasOwnProperty$3=objectProto$5.hasOwnProperty,propertyIsEnumerable=objectProto$5.propertyIsEnumerable,isArguments_1=_baseIsArguments(function(){return arguments}())?_baseIsArguments:function(value){return isObjectLike_1(value)&&hasOwnProperty$3.call(value,"callee")&&!propertyIsEnumerable.call(value,"callee")};var stubFalse_1=function stubFalse(){return!1},isBuffer_1=createCommonjsModule((function(module,exports){var freeExports=exports&&!exports.nodeType&&exports,freeModule=freeExports&&module&&!module.nodeType&&module,Buffer=freeModule&&freeModule.exports===freeExports?_root.Buffer:void 0,isBuffer=(Buffer?Buffer.isBuffer:void 0)||stubFalse_1;module.exports=isBuffer})),reIsUint=/^(?:0|[1-9]\d*)$/;var _isIndex=function isIndex(value,length){var type=typeof value;return!!(length=null==length?9007199254740991:length)&&("number"==type||"symbol"!=type&&reIsUint.test(value))&&value>-1&&value%1==0&&value<length},typedArrayTags={};typedArrayTags["[object Float32Array]"]=typedArrayTags["[object Float64Array]"]=typedArrayTags["[object Int8Array]"]=typedArrayTags["[object Int16Array]"]=typedArrayTags["[object Int32Array]"]=typedArrayTags["[object Uint8Array]"]=typedArrayTags["[object Uint8ClampedArray]"]=typedArrayTags["[object Uint16Array]"]=typedArrayTags["[object Uint32Array]"]=!0,typedArrayTags["[object Arguments]"]=typedArrayTags["[object Array]"]=typedArrayTags["[object ArrayBuffer]"]=typedArrayTags["[object Boolean]"]=typedArrayTags["[object DataView]"]=typedArrayTags["[object Date]"]=typedArrayTags["[object Error]"]=typedArrayTags["[object Function]"]=typedArrayTags["[object Map]"]=typedArrayTags["[object Number]"]=typedArrayTags["[object Object]"]=typedArrayTags["[object RegExp]"]=typedArrayTags["[object Set]"]=typedArrayTags["[object String]"]=typedArrayTags["[object WeakMap]"]=!1;var _baseIsTypedArray=function baseIsTypedArray(value){return isObjectLike_1(value)&&isLength_1(value.length)&&!!typedArrayTags[_baseGetTag(value)]};var _baseUnary=function baseUnary(func){return function(value){return func(value)}},_nodeUtil=createCommonjsModule((function(module,exports){var freeExports=exports&&!exports.nodeType&&exports,freeModule=freeExports&&module&&!module.nodeType&&module,freeProcess=freeModule&&freeModule.exports===freeExports&&_freeGlobal.process,nodeUtil=function(){try{var types=freeModule&&freeModule.require&&freeModule.require("util").types;return types||freeProcess&&freeProcess.binding&&freeProcess.binding("util")}catch(e){}}();module.exports=nodeUtil})),nodeIsTypedArray=_nodeUtil&&_nodeUtil.isTypedArray,isTypedArray_1=nodeIsTypedArray?_baseUnary(nodeIsTypedArray):_baseIsTypedArray,hasOwnProperty$4=Object.prototype.hasOwnProperty;var _arrayLikeKeys=function arrayLikeKeys(value,inherited){var isArr=isArray_1(value),isArg=!isArr&&isArguments_1(value),isBuff=!isArr&&!isArg&&isBuffer_1(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray_1(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?_baseTimes(value.length,String):[],length=result.length;for(var key in value)!inherited&&!hasOwnProperty$4.call(value,key)||skipIndexes&&("length"==key||isBuff&&("offset"==key||"parent"==key)||isType&&("buffer"==key||"byteLength"==key||"byteOffset"==key)||_isIndex(key,length))||result.push(key);return result};var keys_1=function keys(object){return isArrayLike_1(object)?_arrayLikeKeys(object):_baseKeys(object)};var _baseEach=function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(null==collection)return collection;if(!isArrayLike_1(collection))return eachFunc(collection,iteratee);for(var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);(fromRight?index--:++index<length)&&!1!==iteratee(iterable[index],index,iterable););return collection}}((function baseForOwn(object,iteratee){return object&&_baseFor(object,iteratee,keys_1)}));var identity_1=function identity(value){return value};var _castFunction=function castFunction(value){return"function"==typeof value?value:identity_1};var each=function forEach(collection,iteratee){return(isArray_1(collection)?_arrayEach:_baseEach)(collection,_castFunction(iteratee))};function setStore(store,data){each(data,(function(val,key){store.set(key,val)}))}var DataProviderObject=function(){function DataProviderObject(store){this.store=store}return DataProviderObject.prototype.data=function(r,c){var _b=this.rowDataModel(r,c),prop=_b.prop;return _b.model[prop]||""},DataProviderObject.prototype.rowDataModel=function(r,c){var _a;return{prop:null===(_a=this.store.get("columns")[c])||void 0===_a?void 0:_a.prop,model:this.store.get("data")[r]||{}}},DataProviderObject}(),HeaderProviderObject=function(){function HeaderProviderObject(store){this.store=store}return HeaderProviderObject.prototype.data=function(c){var _a;return(null===(_a=this.getColumn(c))||void 0===_a?void 0:_a.name)||""},HeaderProviderObject.prototype.template=function(c){var _a;return null===(_a=this.getColumn(c))||void 0===_a?void 0:_a.cellTemplate},HeaderProviderObject.prototype.getColumn=function(c){return this.store.get("columns")[c]},HeaderProviderObject}(),DataProvider=function(){function DataProvider(store){this.store=store,this.columnProvider=new HeaderProviderObject(this.store),this.dataProvider=new DataProviderObject(this.store)}return DataProvider.prototype.data=function(r,c){var tpl=this.columnProvider.template(c);return tpl?tpl(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f,this.dataProvider.rowDataModel(r,c)):this.dataProvider.data(r,c)},DataProvider.prototype.header=function(c){return this.columnProvider.data(c)},DataProvider}(),DataSource=function(){function DataSource(store){this.store=store,this.provider=new DataProvider(this.store)}return DataSource.prototype.setData=function(data){setStore(this.store,{data:data})},DataSource.prototype.setColumn=function(columns){setStore(this.store,{columns:columns})},DataSource}();var isSymbol_1=function isSymbol(value){return"symbol"==typeof value||isObjectLike_1(value)&&"[object Symbol]"==_baseGetTag(value)},nativeFloor=Math.floor,nativeMin=Math.min;var _baseSortedIndexBy=function baseSortedIndexBy(array,value,iteratee,retHighest){value=iteratee(value);for(var low=0,high=null==array?0:array.length,valIsNaN=value!=value,valIsNull=null===value,valIsSymbol=isSymbol_1(value),valIsUndefined=void 0===value;low<high;){var mid=nativeFloor((low+high)/2),computed=iteratee(array[mid]),othIsDefined=void 0!==computed,othIsNull=null===computed,othIsReflexive=computed==computed,othIsSymbol=isSymbol_1(computed);if(valIsNaN)var setLow=retHighest||othIsReflexive;else setLow=valIsUndefined?othIsReflexive&&(retHighest||othIsDefined):valIsNull?othIsReflexive&&othIsDefined&&(retHighest||!othIsNull):valIsSymbol?othIsReflexive&&othIsDefined&&!othIsNull&&(retHighest||!othIsSymbol):!othIsNull&&!othIsSymbol&&(retHighest?computed<=value:computed<value);setLow?low=mid+1:high=mid}return nativeMin(high,4294967294)};var _baseSortedIndex=function baseSortedIndex(array,value,retHighest){var low=0,high=null==array?low:array.length;if("number"==typeof value&&value==value&&high<=2147483647){for(;low<high;){var mid=low+high>>>1,computed=array[mid];null!==computed&&!isSymbol_1(computed)&&(retHighest?computed<=value:computed<value)?low=mid+1:high=mid}return high}return _baseSortedIndexBy(array,value,identity_1,retHighest)};var sortedIndex_1=function sortedIndex(array,value){return _baseSortedIndex(array,value)};function range(size,startAt){void 0===startAt&&(startAt=0);for(var res=[],end=startAt+size,i=startAt;i<end;i++)res.push(i);return res}function simpleCompare(el1,el2){return el1<el2}function getUpdatedItemsByPosition(pos,items,realCount,virtualSize,dimension){var _b,_c,toUpdate,activeItem=function getOffset(dimension,pos,origSize){var item={itemIndex:0,start:0,end:0},currentPlace=dimension.indexes.length?sortedIndex_1(dimension.positionIndexes,pos):0;if(!currentPlace)return item.itemIndex=Math.floor(pos/origSize),item.start=item.itemIndex*origSize,item.end=item.start+origSize,item;var positionItem=dimension.positionIndexToCoordinate[currentPlace-1];if(positionItem.end>pos)return positionItem;var relativePos=pos-positionItem.end,relativeIndex=Math.floor(relativePos/origSize);return item.itemIndex=positionItem.itemIndex+1+relativeIndex,item.start=positionItem.end+relativeIndex*origSize,item.end=item.start+origSize,item}(dimension,pos,dimension.originItemSize),firstItem=getFirstItem(items);if(firstItem){var changedOffsetStart=activeItem.itemIndex-(firstItem.itemIndex||0);if(changedOffsetStart){var newData=function recombineByOffset(data,state){var _b,_c,indexSize=state.itemIndexes.length;if(data.offset>indexSize)return null;if(data.positiveDirection){for(var lastItem=getLastItem(state),i=0;i<data.offset;i++){var size_2=getItemSize(newIndex=lastItem.itemIndex+1,data.dimension.sizes,data.dimension.originItemSize);if(lastItem.end+size_2>data.dimension.realSize)break;state.items[state.itemIndexes[i]]=lastItem={itemIndex:newIndex,start:lastItem.end,end:lastItem.end+size_2,size:size_2}}(_b=state.itemIndexes).push.apply(_b,state.itemIndexes.splice(0,data.offset))}else{var changed=indexSize-data.offset,firstItem=getFirstItem(state);for(i=indexSize-1;i>=changed;i--){var newIndex,size_3=getItemSize(newIndex=firstItem.itemIndex-1,data.dimension.sizes,data.dimension.originItemSize);state.items[state.itemIndexes[i]]=firstItem={itemIndex:newIndex,start:firstItem.start-size_3,end:firstItem.start,size:size_3}}(_c=state.itemIndexes).unshift.apply(_c,state.itemIndexes.splice(changed,indexSize-1))}return{items:__spreadArrays(state.items),itemIndexes:__spreadArrays(state.itemIndexes)}}({newItem:activeItem,prevItem:firstItem,dimension:dimension,positiveDirection:changedOffsetStart>-1,offset:Math.abs(changedOffsetStart)},items);if(newData&&(toUpdate=newData),toUpdate){var extra=addMissingItems(activeItem,realCount,virtualSize,toUpdate,dimension);extra.items.length&&((_b=toUpdate.items).push.apply(_b,extra.items),(_c=toUpdate.itemIndexes).push.apply(_c,extra.itemIndexes))}}}return toUpdate||(toUpdate=getItems({sizes:dimension.sizes,start:activeItem.start,startIndex:activeItem.itemIndex,origSize:dimension.originItemSize,maxSize:virtualSize,maxCount:realCount})),toUpdate}function addMissingItems(firstItem,realCount,virtualSize,existingCollection,dimension){var lastItem=getLastItem(existingCollection),data=getItems({sizes:dimension.sizes,start:lastItem.end,startIndex:lastItem.itemIndex+1,origSize:dimension.originItemSize,maxSize:virtualSize-(lastItem.end-firstItem.start),maxCount:realCount-lastItem.itemIndex});return{items:data.items,itemIndexes:range(data.items.length,existingCollection.items.length)}}function getItems(opt,currentSize){void 0===currentSize&&(currentSize=0);for(var items=[],itemIndexes=[],index=opt.startIndex,size=currentSize,i=0;size<=opt.maxSize&&i<opt.maxCount;){var newSize=getItemSize(index,opt.sizes,opt.origSize);itemIndexes.push(i),items.push({start:opt.start+size,end:opt.start+size+newSize,itemIndex:index,size:newSize}),size+=newSize,index++,i++}return{items:items,itemIndexes:itemIndexes}}function getItemSize(index,sizes,origSize){return sizes[index]?sizes[index]:origSize}function getFirstItem(s){return s.items[s.itemIndexes[0]]}function getLastItem(s){return s.items[s.itemIndexes[s.itemIndexes.length-1]]}var _arrayReduce=function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=null==array?0:array.length;for(initAccum&&length&&(accumulator=array[++index]);++index<length;)accumulator=iteratee(accumulator,array[index],index,array);return accumulator};var _listCacheClear=function listCacheClear(){this.__data__=[],this.size=0};var eq_1=function eq(value,other){return value===other||value!=value&&other!=other};var _assocIndexOf=function assocIndexOf(array,key){for(var length=array.length;length--;)if(eq_1(array[length][0],key))return length;return-1},splice=Array.prototype.splice;var _listCacheDelete=function listCacheDelete(key){var data=this.__data__,index=_assocIndexOf(data,key);return!(index<0)&&(index==data.length-1?data.pop():splice.call(data,index,1),--this.size,!0)};var _listCacheGet=function listCacheGet(key){var data=this.__data__,index=_assocIndexOf(data,key);return index<0?void 0:data[index][1]};var _listCacheHas=function listCacheHas(key){return _assocIndexOf(this.__data__,key)>-1};var _listCacheSet=function listCacheSet(key,value){var data=this.__data__,index=_assocIndexOf(data,key);return index<0?(++this.size,data.push([key,value])):data[index][1]=value,this};function ListCache(entries){var index=-1,length=null==entries?0:entries.length;for(this.clear();++index<length;){var entry=entries[index];this.set(entry[0],entry[1])}}ListCache.prototype.clear=_listCacheClear,ListCache.prototype.delete=_listCacheDelete,ListCache.prototype.get=_listCacheGet,ListCache.prototype.has=_listCacheHas,ListCache.prototype.set=_listCacheSet;var _ListCache=ListCache;var _stackClear=function stackClear(){this.__data__=new _ListCache,this.size=0};var _stackDelete=function stackDelete(key){var data=this.__data__,result=data.delete(key);return this.size=data.size,result};var _stackGet=function stackGet(key){return this.__data__.get(key)};var _stackHas=function stackHas(key){return this.__data__.has(key)},_nativeCreate=_getNative(Object,"create");var _hashClear=function hashClear(){this.__data__=_nativeCreate?_nativeCreate(null):{},this.size=0};var _hashDelete=function hashDelete(key){var result=this.has(key)&&delete this.__data__[key];return this.size-=result?1:0,result},hasOwnProperty$5=Object.prototype.hasOwnProperty;var _hashGet=function hashGet(key){var data=this.__data__;if(_nativeCreate){var result=data[key];return"__lodash_hash_undefined__"===result?void 0:result}return hasOwnProperty$5.call(data,key)?data[key]:void 0},hasOwnProperty$6=Object.prototype.hasOwnProperty;var _hashHas=function hashHas(key){var data=this.__data__;return _nativeCreate?void 0!==data[key]:hasOwnProperty$6.call(data,key)};var _hashSet=function hashSet(key,value){var data=this.__data__;return this.size+=this.has(key)?0:1,data[key]=_nativeCreate&&void 0===value?"__lodash_hash_undefined__":value,this};function Hash(entries){var index=-1,length=null==entries?0:entries.length;for(this.clear();++index<length;){var entry=entries[index];this.set(entry[0],entry[1])}}Hash.prototype.clear=_hashClear,Hash.prototype.delete=_hashDelete,Hash.prototype.get=_hashGet,Hash.prototype.has=_hashHas,Hash.prototype.set=_hashSet;var _Hash=Hash;var _mapCacheClear=function mapCacheClear(){this.size=0,this.__data__={hash:new _Hash,map:new(_Map||_ListCache),string:new _Hash}};var _isKeyable=function isKeyable(value){var type=typeof value;return"string"==type||"number"==type||"symbol"==type||"boolean"==type?"__proto__"!==value:null===value};var _getMapData=function getMapData(map,key){var data=map.__data__;return _isKeyable(key)?data["string"==typeof key?"string":"hash"]:data.map};var _mapCacheDelete=function mapCacheDelete(key){var result=_getMapData(this,key).delete(key);return this.size-=result?1:0,result};var _mapCacheGet=function mapCacheGet(key){return _getMapData(this,key).get(key)};var _mapCacheHas=function mapCacheHas(key){return _getMapData(this,key).has(key)};var _mapCacheSet=function mapCacheSet(key,value){var data=_getMapData(this,key),size=data.size;return data.set(key,value),this.size+=data.size==size?0:1,this};function MapCache(entries){var index=-1,length=null==entries?0:entries.length;for(this.clear();++index<length;){var entry=entries[index];this.set(entry[0],entry[1])}}MapCache.prototype.clear=_mapCacheClear,MapCache.prototype.delete=_mapCacheDelete,MapCache.prototype.get=_mapCacheGet,MapCache.prototype.has=_mapCacheHas,MapCache.prototype.set=_mapCacheSet;var _MapCache=MapCache;var _stackSet=function stackSet(key,value){var data=this.__data__;if(data instanceof _ListCache){var pairs=data.__data__;if(!_Map||pairs.length<199)return pairs.push([key,value]),this.size=++data.size,this;data=this.__data__=new _MapCache(pairs)}return data.set(key,value),this.size=data.size,this};function Stack(entries){var data=this.__data__=new _ListCache(entries);this.size=data.size}Stack.prototype.clear=_stackClear,Stack.prototype.delete=_stackDelete,Stack.prototype.get=_stackGet,Stack.prototype.has=_stackHas,Stack.prototype.set=_stackSet;var _Stack=Stack;var _setCacheAdd=function setCacheAdd(value){return this.__data__.set(value,"__lodash_hash_undefined__"),this};var _setCacheHas=function setCacheHas(value){return this.__data__.has(value)};function SetCache(values){var index=-1,length=null==values?0:values.length;for(this.__data__=new _MapCache;++index<length;)this.add(values[index])}SetCache.prototype.add=SetCache.prototype.push=_setCacheAdd,SetCache.prototype.has=_setCacheHas;var _SetCache=SetCache;var _arraySome=function arraySome(array,predicate){for(var index=-1,length=null==array?0:array.length;++index<length;)if(predicate(array[index],index,array))return!0;return!1};var _cacheHas=function cacheHas(cache,key){return cache.has(key)};var _equalArrays=function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=1&bitmask,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength))return!1;var stacked=stack.get(array);if(stacked&&stack.get(other))return stacked==other;var index=-1,result=!0,seen=2&bitmask?new _SetCache:void 0;for(stack.set(array,other),stack.set(other,array);++index<arrLength;){var arrValue=array[index],othValue=other[index];if(customizer)var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);if(void 0!==compared){if(compared)continue;result=!1;break}if(seen){if(!_arraySome(other,(function(othValue,othIndex){if(!_cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack)))return seen.push(othIndex)}))){result=!1;break}}else if(arrValue!==othValue&&!equalFunc(arrValue,othValue,bitmask,customizer,stack)){result=!1;break}}return stack.delete(array),stack.delete(other),result},_Uint8Array=_root.Uint8Array;var _mapToArray=function mapToArray(map){var index=-1,result=Array(map.size);return map.forEach((function(value,key){result[++index]=[key,value]})),result};var _setToArray=function setToArray(set){var index=-1,result=Array(set.size);return set.forEach((function(value){result[++index]=value})),result},symbolProto=_Symbol?_Symbol.prototype:void 0,symbolValueOf=symbolProto?symbolProto.valueOf:void 0;var _equalByTag=function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){switch(tag){case"[object DataView]":if(object.byteLength!=other.byteLength||object.byteOffset!=other.byteOffset)return!1;object=object.buffer,other=other.buffer;case"[object ArrayBuffer]":return!(object.byteLength!=other.byteLength||!equalFunc(new _Uint8Array(object),new _Uint8Array(other)));case"[object Boolean]":case"[object Date]":case"[object Number]":return eq_1(+object,+other);case"[object Error]":return object.name==other.name&&object.message==other.message;case"[object RegExp]":case"[object String]":return object==other+"";case"[object Map]":var convert=_mapToArray;case"[object Set]":var isPartial=1&bitmask;if(convert||(convert=_setToArray),object.size!=other.size&&!isPartial)return!1;var stacked=stack.get(object);if(stacked)return stacked==other;bitmask|=2,stack.set(object,other);var result=_equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);return stack.delete(object),result;case"[object Symbol]":if(symbolValueOf)return symbolValueOf.call(object)==symbolValueOf.call(other)}return!1};var _arrayPush=function arrayPush(array,values){for(var index=-1,length=values.length,offset=array.length;++index<length;)array[offset+index]=values[index];return array};var _baseGetAllKeys=function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray_1(object)?result:_arrayPush(result,symbolsFunc(object))};var _arrayFilter=function arrayFilter(array,predicate){for(var index=-1,length=null==array?0:array.length,resIndex=0,result=[];++index<length;){var value=array[index];predicate(value,index,array)&&(result[resIndex++]=value)}return result};var stubArray_1=function stubArray(){return[]},propertyIsEnumerable$1=Object.prototype.propertyIsEnumerable,nativeGetSymbols=Object.getOwnPropertySymbols,_getSymbols=nativeGetSymbols?function(object){return null==object?[]:(object=Object(object),_arrayFilter(nativeGetSymbols(object),(function(symbol){return propertyIsEnumerable$1.call(object,symbol)})))}:stubArray_1;var _getAllKeys=function getAllKeys(object){return _baseGetAllKeys(object,keys_1,_getSymbols)},hasOwnProperty$7=Object.prototype.hasOwnProperty;var _equalObjects=function equalObjects(object,other,bitmask,customizer,equalFunc,stack){var isPartial=1&bitmask,objProps=_getAllKeys(object),objLength=objProps.length;if(objLength!=_getAllKeys(other).length&&!isPartial)return!1;for(var index=objLength;index--;){var key=objProps[index];if(!(isPartial?key in other:hasOwnProperty$7.call(other,key)))return!1}var stacked=stack.get(object);if(stacked&&stack.get(other))return stacked==other;var result=!0;stack.set(object,other),stack.set(other,object);for(var skipCtor=isPartial;++index<objLength;){var objValue=object[key=objProps[index]],othValue=other[key];if(customizer)var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);if(!(void 0===compared?objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):compared)){result=!1;break}skipCtor||(skipCtor="constructor"==key)}if(result&&!skipCtor){var objCtor=object.constructor,othCtor=other.constructor;objCtor==othCtor||!("constructor"in object)||!("constructor"in other)||"function"==typeof objCtor&&objCtor instanceof objCtor&&"function"==typeof othCtor&&othCtor instanceof othCtor||(result=!1)}return stack.delete(object),stack.delete(other),result},hasOwnProperty$8=Object.prototype.hasOwnProperty;var _baseIsEqualDeep=function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){var objIsArr=isArray_1(object),othIsArr=isArray_1(other),objTag=objIsArr?"[object Array]":_getTag(object),othTag=othIsArr?"[object Array]":_getTag(other),objIsObj="[object Object]"==(objTag="[object Arguments]"==objTag?"[object Object]":objTag),othIsObj="[object Object]"==(othTag="[object Arguments]"==othTag?"[object Object]":othTag),isSameTag=objTag==othTag;if(isSameTag&&isBuffer_1(object)){if(!isBuffer_1(other))return!1;objIsArr=!0,objIsObj=!1}if(isSameTag&&!objIsObj)return stack||(stack=new _Stack),objIsArr||isTypedArray_1(object)?_equalArrays(object,other,bitmask,customizer,equalFunc,stack):_equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);if(!(1&bitmask)){var objIsWrapped=objIsObj&&hasOwnProperty$8.call(object,"__wrapped__"),othIsWrapped=othIsObj&&hasOwnProperty$8.call(other,"__wrapped__");if(objIsWrapped||othIsWrapped){var objUnwrapped=objIsWrapped?object.value():object,othUnwrapped=othIsWrapped?other.value():other;return stack||(stack=new _Stack),equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack)}}return!!isSameTag&&(stack||(stack=new _Stack),_equalObjects(object,other,bitmask,customizer,equalFunc,stack))};var _baseIsEqual=function baseIsEqual(value,other,bitmask,customizer,stack){return value===other||(null==value||null==other||!isObjectLike_1(value)&&!isObjectLike_1(other)?value!=value&&other!=other:_baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack))};var _baseIsMatch=function baseIsMatch(object,source,matchData,customizer){var index=matchData.length,length=index,noCustomizer=!customizer;if(null==object)return!length;for(object=Object(object);index--;){var data=matchData[index];if(noCustomizer&&data[2]?data[1]!==object[data[0]]:!(data[0]in object))return!1}for(;++index<length;){var key=(data=matchData[index])[0],objValue=object[key],srcValue=data[1];if(noCustomizer&&data[2]){if(void 0===objValue&&!(key in object))return!1}else{var stack=new _Stack;if(customizer)var result=customizer(objValue,srcValue,key,object,source,stack);if(!(void 0===result?_baseIsEqual(srcValue,objValue,3,customizer,stack):result))return!1}}return!0};var _isStrictComparable=function isStrictComparable(value){return value==value&&!isObject_1(value)};var _getMatchData=function getMatchData(object){for(var result=keys_1(object),length=result.length;length--;){var key=result[length],value=object[key];result[length]=[key,value,_isStrictComparable(value)]}return result};var _matchesStrictComparable=function matchesStrictComparable(key,srcValue){return function(object){return null!=object&&(object[key]===srcValue&&(void 0!==srcValue||key in Object(object)))}};var _baseMatches=function baseMatches(source){var matchData=_getMatchData(source);return 1==matchData.length&&matchData[0][2]?_matchesStrictComparable(matchData[0][0],matchData[0][1]):function(object){return object===source||_baseIsMatch(object,source,matchData)}},reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/;var _isKey=function isKey(value,object){if(isArray_1(value))return!1;var type=typeof value;return!("number"!=type&&"symbol"!=type&&"boolean"!=type&&null!=value&&!isSymbol_1(value))||(reIsPlainProp.test(value)||!reIsDeepProp.test(value)||null!=object&&value in Object(object))};function memoize(func,resolver){if("function"!=typeof func||null!=resolver&&"function"!=typeof resolver)throw new TypeError("Expected a function");var memoized=function(){var args=arguments,key=resolver?resolver.apply(this,args):args[0],cache=memoized.cache;if(cache.has(key))return cache.get(key);var result=func.apply(this,args);return memoized.cache=cache.set(key,result)||cache,result};return memoized.cache=new(memoize.Cache||_MapCache),memoized}memoize.Cache=_MapCache;var memoize_1=memoize;var rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,reEscapeChar=/\\(\\)?/g,_stringToPath=function memoizeCapped(func){var result=memoize_1(func,(function(key){return 500===cache.size&&cache.clear(),key})),cache=result.cache;return result}((function(string){var result=[];return 46===string.charCodeAt(0)&&result.push(""),string.replace(rePropName,(function(match,number,quote,subString){result.push(quote?subString.replace(reEscapeChar,"$1"):number||match)})),result}));var _arrayMap=function arrayMap(array,iteratee){for(var index=-1,length=null==array?0:array.length,result=Array(length);++index<length;)result[index]=iteratee(array[index],index,array);return result},symbolProto$1=_Symbol?_Symbol.prototype:void 0,symbolToString=symbolProto$1?symbolProto$1.toString:void 0;var _baseToString=function baseToString(value){if("string"==typeof value)return value;if(isArray_1(value))return _arrayMap(value,baseToString)+"";if(isSymbol_1(value))return symbolToString?symbolToString.call(value):"";var result=value+"";return"0"==result&&1/value==-1/0?"-0":result};var toString_1=function toString(value){return null==value?"":_baseToString(value)};var _castPath=function castPath(value,object){return isArray_1(value)?value:_isKey(value,object)?[value]:_stringToPath(toString_1(value))};var _toKey=function toKey(value){if("string"==typeof value||isSymbol_1(value))return value;var result=value+"";return"0"==result&&1/value==-1/0?"-0":result};var _baseGet=function baseGet(object,path){for(var index=0,length=(path=_castPath(path,object)).length;null!=object&&index<length;)object=object[_toKey(path[index++])];return index&&index==length?object:void 0};var get_1=function get(object,path,defaultValue){var result=null==object?void 0:_baseGet(object,path);return void 0===result?defaultValue:result};var _baseHasIn=function baseHasIn(object,key){return null!=object&&key in Object(object)};var _hasPath=function hasPath(object,path,hasFunc){for(var index=-1,length=(path=_castPath(path,object)).length,result=!1;++index<length;){var key=_toKey(path[index]);if(!(result=null!=object&&hasFunc(object,key)))break;object=object[key]}return result||++index!=length?result:!!(length=null==object?0:object.length)&&isLength_1(length)&&_isIndex(key,length)&&(isArray_1(object)||isArguments_1(object))};var hasIn_1=function hasIn(object,path){return null!=object&&_hasPath(object,path,_baseHasIn)};var _baseMatchesProperty=function baseMatchesProperty(path,srcValue){return _isKey(path)&&_isStrictComparable(srcValue)?_matchesStrictComparable(_toKey(path),srcValue):function(object){var objValue=get_1(object,path);return void 0===objValue&&objValue===srcValue?hasIn_1(object,path):_baseIsEqual(srcValue,objValue,3)}};var _basePropertyDeep=function basePropertyDeep(path){return function(object){return _baseGet(object,path)}};var property_1=function property(path){return _isKey(path)?_baseProperty(_toKey(path)):_basePropertyDeep(path)};var _baseIteratee=function baseIteratee(value){return"function"==typeof value?value:null==value?identity_1:"object"==typeof value?isArray_1(value)?_baseMatchesProperty(value[0],value[1]):_baseMatches(value):property_1(value)};var _baseReduce=function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){return eachFunc(collection,(function(value,index,collection){accumulator=initAccum?(initAccum=!1,value):iteratee(accumulator,value,index,collection)})),accumulator};var reduce_1=function reduce(collection,iteratee,accumulator){var func=isArray_1(collection)?_arrayReduce:_baseReduce,initAccum=arguments.length<3;return func(collection,_baseIteratee(iteratee),accumulator,initAccum,_baseEach)};function calculateDimensionData(state,newSizes){var positionIndexes=[],positionIndexToCoordinate={},itemIndexToCoordinate={},newTotal=0,sizes=Object.assign(Object.assign({},state.sizes),newSizes),newIndexes=[];each(newSizes,(function(size,index){state.sizes[index]?newTotal+=size-state.sizes[index]:(newTotal+=size-state.originItemSize,newIndexes.splice(sortedIndex_1(newIndexes,parseInt(index,10)),0,parseInt(index,10)))}));var updatedIndexesCache=function mergeSortedArray(arr1,arr2,compareFn){void 0===compareFn&&(compareFn=simpleCompare);for(var merged=[],index1=0,index2=0,current=0;current<arr1.length+arr2.length;){var isArr1Depleted=index1>=arr1.length,isArr2Depleted=index2>=arr2.length;isArr1Depleted||!isArr2Depleted&&!compareFn(arr1[index1],arr2[index2])?(merged[current]=arr2[index2],index2++):(merged[current]=arr1[index1],index1++),current++}return merged}(state.indexes,newIndexes);return reduce_1(updatedIndexesCache,(function(previous,itemIndex,i){var newItem={itemIndex:itemIndex,start:0,end:0};return newItem.start=previous?(itemIndex-previous.itemIndex-1)*state.originItemSize+previous.end:itemIndex*state.originItemSize,newItem.end=newItem.start+sizes[itemIndex],positionIndexes.push(newItem.start),itemIndexToCoordinate[itemIndex]=positionIndexToCoordinate[i]=newItem,newItem}),void 0),{indexes:updatedIndexesCache,realSize:state.realSize+newTotal,sizes:sizes,positionIndexes:positionIndexes,positionIndexToCoordinate:positionIndexToCoordinate,itemIndexToCoordinate:itemIndexToCoordinate}}var rowsStore=createStore({indexes:[],sizes:{},positionIndexToCoordinate:{},itemIndexToCoordinate:{},positionIndexes:[],realSize:0,originItemSize:0}),colsStore=createStore({indexes:[],sizes:{},positionIndexToCoordinate:{},itemIndexToCoordinate:{},positionIndexes:[],realSize:0,originItemSize:0});function getCurrentState(type){var state={indexes:[],sizes:{},positionIndexToCoordinate:{},itemIndexToCoordinate:{},positionIndexes:[],realSize:0,originItemSize:0},keys=Object.keys(state),store="col"===type?colsStore:rowsStore;return reduce_1(keys,(function(r,k){var data=store.get(k);return r[k]=data,r}),state)}function getStoreByType(type){switch(type){case"col":return colsStore;case"row":return rowsStore}}function setSettings(data,dimensionType){setStore(getStoreByType(dimensionType),{originItemSize:data})}function setRealSize(count,dimensionType){for(var store=getStoreByType(dimensionType),realSize=0,i=0;i<count;i++)realSize+=store.get("sizes")[i]||store.get("originItemSize");setStore(store,{realSize:realSize})}function setDimensionSize(sizes,dimensionType){setStore(getStoreByType(dimensionType),calculateDimensionData(getCurrentState(dimensionType),sizes)),function setViewPortDimension(sizes,dimensionType){var store=getStoreByType$1(dimensionType);if(!store.get("items").length)return;for(var items=store.get("items"),changedCoordinate=0,_b=0,_c=store.get("itemIndexes");_b<_c.length;_b++){var i=_c[_b],changedSize=0,item=items[i];changedCoordinate&&(item.start+=changedCoordinate,item.end+=changedCoordinate);var size_4=sizes[item.itemIndex]||0;size_4&&(changedSize=size_4-item.size,changedCoordinate+=changedSize,item.size=size_4),(changedSize||changedCoordinate)&&(items[i]=Object.assign({},item))}setStore(store,{items:items})}(sizes,dimensionType)}var rowsStore$1=createStore({items:[],itemIndexes:[],frameOffset:0,virtualSize:0,realCount:0}),colsStore$1=createStore({items:[],itemIndexes:[],frameOffset:0,virtualSize:0,realCount:0});function getStoreByType$1(type){switch(type){case"col":return colsStore$1;case"row":return rowsStore$1}}function getItems$1(store){return{items:store.get("items"),itemIndexes:store.get("itemIndexes")}}function setViewport(data,dimensionType){var store=getStoreByType$1(dimensionType);data.virtualSize||(store.set("itemIndexes",[]),store.set("items",[])),setStore(store,data)}function setViewPortCoordinate(position,dimensionType){var store=getStoreByType$1(dimensionType);if(store.get("virtualSize")){var dimension=getCurrentState(dimensionType),outsize=2*store.get("frameOffset")*dimension.originItemSize,virtualSize=store.get("virtualSize")+outsize,maxCoordinate=0;dimension.realSize>virtualSize&&(maxCoordinate=dimension.realSize-virtualSize);var pos=position;pos=(pos-=store.get("frameOffset")*dimension.originItemSize)<0?0:pos<maxCoordinate?pos:maxCoordinate;var firstItem=getFirstItem(getItems$1(store)),lastItem=getLastItem(getItems$1(store));if(function isActiveRange(pos,item){return item&&pos>=item.start&&pos<=item.end}(pos,firstItem)){if(firstItem&&store.get("virtualSize")+pos>(null==lastItem?void 0:lastItem.end)){toUpdate=addMissingItems(firstItem,store.get("realCount"),virtualSize+pos-firstItem.start,getItems$1(store),dimension);setStore(store,{items:__spreadArrays(store.get("items"),toUpdate.items),itemIndexes:__spreadArrays(store.get("itemIndexes"),toUpdate.itemIndexes)})}}else{var toUpdate=getUpdatedItemsByPosition(pos,getItems$1(store),store.get("realCount"),virtualSize,dimension);setStore(store,toUpdate)}}}var dataStore=new DataSource(createStore({data:[],columns:[]}));var initialSettings={defaultColumnSize:80,defaultRowSize:30,frameSize:10,dimensions:void 0},RevoGrid=function(){function class_1(hostRef){Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.g)(this,hostRef),this.dimensions={},this.settings=initialSettings,this.source=[],this.columns=[]}return class_1.prototype.onSettingsChange=function(newVal,oldVal){oldVal&&newVal.frameSize===oldVal.frameSize||(setViewport({frameOffset:newVal.frameSize||0},"row"),setViewport({frameOffset:newVal.frameSize||0},"col")),oldVal&&newVal.defaultRowSize===oldVal.defaultRowSize||setSettings(this.settings.defaultRowSize,"row"),oldVal&&newVal.defaultColumnSize===oldVal.defaultColumnSize||setSettings(this.settings.defaultColumnSize,"col")},class_1.prototype.dataChanged=function(newVal){!function setData(data){var rows=size_1(data);dataStore.setData(data),setViewport({realCount:rows},"row"),setRealSize(rows,"row")}(newVal)},class_1.prototype.columnChanged=function(newVal){!function setColumn(data){var cols=size_1(data);dataStore.setColumn(data),setViewport({realCount:cols},"col"),setRealSize(cols,"col")}(newVal)},class_1.prototype.componentWillLoad=function(){return __awaiter(this,void 0,void 0,(function(){return __generator(this,(function(_b){return this.onSettingsChange(this.settings),setDimensionSize(this.dimensions.row,"row"),setDimensionSize(this.dimensions.col,"col"),this.columnChanged(this.columns),this.dataChanged(this.source),[2]}))}))},class_1.prototype.componentDidLoad=function(){return __awaiter(this,void 0,void 0,(function(){var module,_this=this;return __generator(this,(function(_b){switch(_b.label){case 0:return"ResizeObserver"in window?[3,2]:[4,__webpack_require__.e(6).then(__webpack_require__.bind(null,428))];case 1:module=_b.sent(),window.ResizeObserver=module.ResizeObserver,_b.label=2;case 2:return this.resizeObserver=new ResizeObserver((function(){return __awaiter(_this,void 0,void 0,(function(){return __generator(this,(function(_b){switch(_b.label){case 0:return setViewport({virtualSize:this.element.clientHeight},"row"),setViewport({virtualSize:this.element.clientWidth},"col"),[4,this.viewport.scrollX()];case 1:return _b.sent(),[4,this.viewport.scrollY()];case 2:return _b.sent(),[2]}}))}))})),this.resizeObserver.observe(this.element),[2]}}))}))},class_1.prototype.componentDidUnload=function(){var _a;null===(_a=this.resizeObserver)||void 0===_a||_a.disconnect()},class_1.prototype.render=function(){var _this=this;return Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("revogr-viewport-scrollable",{class:"viewport",ref:function(el){_this.viewport=el}},Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("revogr-header",{slot:"header",class:"header"}),Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("revogr-data",{slot:"content",class:"viewport-layer"}))},Object.defineProperty(class_1.prototype,"element",{get:function(){return Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.c)(this)},enumerable:!0,configurable:!0}),Object.defineProperty(class_1,"watchers",{get:function(){return{settings:["onSettingsChange"],source:["dataChanged"],columns:["columnChanged"]}},enumerable:!0,configurable:!0}),class_1}();RevoGrid.style=":host{display:block;height:100%}.header{position:relative;height:30px;display:table-cell}.header-wrapper{height:0;display:table-row}.viewport-wrapper{display:block;width:100%;height:100%}.viewport{display:block;height:100%;max-width:100%;position:relative;float:left}.viewport-layer{display:block;height:100%;width:100%;position:relative}.data-cell{position:absolute;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:0 1px 0 0 #b5b5b5, 1px 0 0 0 #b5b5b5;box-shadow:0 1px 0 0 #b5b5b5, 1px 0 0 0 #b5b5b5;height:100%;text-align:center}.row{position:absolute;width:100%;left:0}.data-header-cell{position:absolute;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:0 1px 0 0 #b5b5b5, 1px 0 0 0 #b5b5b5;box-shadow:0 1px 0 0 #b5b5b5, 1px 0 0 0 #b5b5b5;height:100%;text-align:center}.horizontal-wrapper{height:100%;overflow-x:auto;overflow-y:hidden}.inner-content-table{display:table;height:100%;width:100%;position:relative;z-index:0}.vertical-wrapper{display:table-row;position:relative}.vertical-inner{overflow-y:auto;height:100%;-ms-overflow-style:none;}.vertical-inner::-webkit-scrollbar{display:none;-webkit-appearance:none}.vertical-scroll{position:absolute;right:0;overflow-y:auto;overflow-x:visible;z-index:1;top:0;bottom:0}.vertical-scroll>div{width:1px}";var RevogrData=function(){function RevogrData(hostRef){Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.g)(this,hostRef)}return RevogrData.prototype.render=function(){for(var rowsEls=[],_b=0,_c=rowsStore$1.get("items");_b<_c.length;_b++){for(var row=_c[_b],cells=[],_d=0,_f=colsStore$1.get("items");_d<_f.length;_d++){var col=_f[_d];cells.push(Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("div",{class:"data-cell",style:{width:col.size+"px",transform:"translateX("+col.start+"px)"}},dataStore.provider.data(row.itemIndex,col.itemIndex)))}rowsEls.push(Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("div",{class:"row",style:{height:row.size+"px",transform:"translateY("+row.start+"px)"}},cells))}return rowsEls},Object.defineProperty(RevogrData.prototype,"element",{get:function(){return Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.c)(this)},enumerable:!0,configurable:!0}),RevogrData}(),interact=function unwrapExports(x){return x&&x.__esModule&&Object.prototype.hasOwnProperty.call(x,"default")?x.default:x}(createCommonjsModule((function(module,exports){module.exports=function(){function e(t){var n;return function(e){return n||t(n={exports:{},parent:e},n.exports),n.exports}}var O=e((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Scope=t.ActionName=void 0;var n=f(k),o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==p(e)&&"function"!=typeof e)return{default:e};var t=function c(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(pt),i=f(It),a=f(Ct),u=f(Ut),s=f(fn),l=f(Tn),r=f(E({}));function f(e){return e&&e.__esModule?e:{default:e}}function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?function(e){if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(e):t}function v(e,t,n){return(v="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(e,t,n){return t&&h(e.prototype,t),n&&h(e,n),e}function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var w,P=o.win,_=o.browser,x=o.raf,S=o.events;(t.ActionName=w)||(t.ActionName=w={});var j=function(){function e(){var t=this;g(this,e),O(this,"id","__interact_scope_".concat(Math.floor(100*Math.random()))),O(this,"listenerMaps",[]),O(this,"browser",_),O(this,"events",S),O(this,"utils",o),O(this,"defaults",o.clone(i.default)),O(this,"Eventable",a.default),O(this,"actions",{names:[],methodDict:{},eventTypes:[]}),O(this,"InteractEvent",l.default),O(this,"Interactable",void 0),O(this,"interactables",new s.default(this)),O(this,"_win",void 0),O(this,"document",void 0),O(this,"window",void 0),O(this,"documents",[]),O(this,"_plugins",{list:[],map:{}}),O(this,"onWindowUnload",(function(e){return t.removeDocument(e.target)}));var r=this;this.Interactable=function(){function n(){return g(this,n),d(this,y(n).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(n,u.default),b(n,[{key:"set",value:function(e){return v(y(n.prototype),"set",this).call(this,e),r.fire("interactable:set",{options:e,interactable:this}),this}},{key:"unset",value:function(){v(y(n.prototype),"unset",this).call(this);for(var e=r.interactions.list.length-1;0<=e;e--){var t=r.interactions.list[e];t.interactable===this&&(t.stop(),r.fire("interactions:destroy",{interaction:t}),t.destroy(),2<r.interactions.list.length&&r.interactions.list.splice(e,1))}r.fire("interactable:unset",{interactable:this})}},{key:"_defaults",get:function(){return r.defaults}}]),n}()}return b(e,[{key:"addListeners",value:function(e,t){this.listenerMaps.push({id:t,map:e})}},{key:"fire",value:function(e,t){for(var n=0;n<this.listenerMaps.length;n++){var r=this.listenerMaps[n].map[e];if(r&&!1===r(t,this,e))return!1}}},{key:"init",value:function(e){return function M(e,t){return P.init(t),n.default.init(t),_.init(t),x.init(t),S.init(t),e.usePlugin(r.default),e.document=t.document,e.window=t,e}(this,e)}},{key:"pluginIsInstalled",value:function(e){return this._plugins.map[e.id]||-1!==this._plugins.list.indexOf(e)}},{key:"usePlugin",value:function(e,t){if(this.pluginIsInstalled(e))return this;if(e.id&&(this._plugins.map[e.id]=e),this._plugins.list.push(e),e.install&&e.install(this,t),e.listeners&&e.before){for(var n=0,r=this.listenerMaps.length,o=e.before.reduce((function(e,t){return e[t]=!0,e}),{});n<r&&!o[this.listenerMaps[n].id];n++);this.listenerMaps.splice(n,0,{id:e.id,map:e.listeners})}else e.listeners&&this.listenerMaps.push({id:e.id,map:e.listeners});return this}},{key:"addDocument",value:function(e,t){if(-1!==this.getDocIndex(e))return!1;var n=P.getWindow(e);t=t?o.extend({},t):{},this.documents.push({doc:e,options:t}),S.documents.push(e),e!==this.document&&S.add(n,"unload",this.onWindowUnload),this.fire("scope:add-document",{doc:e,window:n,scope:this,options:t})}},{key:"removeDocument",value:function(e){var t=this.getDocIndex(e),n=P.getWindow(e),r=this.documents[t].options;S.remove(n,"unload",this.onWindowUnload),this.documents.splice(t,1),S.documents.splice(t,1),this.fire("scope:remove-document",{doc:e,window:n,scope:this,options:r})}},{key:"getDocIndex",value:function(e){for(var t=0;t<this.documents.length;t++)if(this.documents[t].doc===e)return t;return-1}},{key:"getDocOptions",value:function(e){var t=this.getDocIndex(e);return-1===t?null:this.documents[t].options}},{key:"now",value:function(){return(this.window.Date||Date).now()}}]),e}();t.Scope=j})),E=e((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var P=n(j),u=n(k),f=n(De),_=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==l(e)&&"function"!=typeof e)return{default:e};var t=function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(J),s=n(g({})),o=n(Qn);function n(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function x(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function p(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}O({});var y=["pointerDown","pointerMove","pointerUp","updatePointer","removePointer","windowBlur"];function m(O,w){return function(e){var t=w.interactions.list,n=_.getPointerType(e),r=x(_.getEventTargets(e),2),o=r[0],i=r[1],a=[];if(/^touch/.test(e.type)){w.prevTouchTime=w.now();for(var u=0;u<e.changedTouches.length;u++){var s=e.changedTouches[u],l={pointer:s,pointerId:_.getPointerId(s),pointerType:n,eventType:e.type,eventTarget:o,curEventTarget:i,scope:w},c=S(l);a.push([l.pointer,l.eventTarget,l.curEventTarget,c])}}else{var f=!1;if(!P.default.supportsPointerEvent&&/mouse/.test(e.type)){for(var p=0;p<t.length&&!f;p++)f="mouse"!==t[p].pointerType&&t[p].pointerIsDown;f=f||w.now()-w.prevTouchTime<500||0===e.timeStamp}if(!f){var d={pointer:e,pointerId:_.getPointerId(e),pointerType:n,eventType:e.type,curEventTarget:i,eventTarget:o,scope:w},v=S(d);a.push([d.pointer,d.eventTarget,d.curEventTarget,v])}}for(var y=0;y<a.length;y++){var m=x(a[y],4),g=m[0],h=m[1],b=m[2];m[3][O](g,e,h,b)}}}function S(e){var t=e.pointerType,n=e.scope,r={interaction:o.default.search(e),searchDetails:e};return n.fire("interactions:find",r),r.interaction||n.interactions.new({pointerType:t})}function r(e,t){var n=e.doc,r=e.scope,o=e.options,i=r.interactions.docEvents,a=f.default[t];for(var u in r.browser.isIOS&&!o.events&&(o.events={passive:!1}),f.default.delegatedEvents)a(n,u,f.default.delegateListener),a(n,u,f.default.delegateUseCapture,!0);for(var s=o&&o.events,l=0;l<i.length;l++){var c=i[l];a(n,c.type,c.listener,s)}}var i={id:"core/interactions",install:function(o){for(var e={},t=0;t<y.length;t++){var n=y[t];e[n]=m(n,o)}var r,i=P.default.pEventTypes;function a(){for(var e=0;e<o.interactions.list.length;e++){var t=o.interactions.list[e];if(t.pointerIsDown&&"touch"===t.pointerType&&!t._interacting)for(var n=function(){var n=t.pointers[r];o.documents.some((function(e){var t=e.doc;return(0,C.nodeContains)(t,n.downTarget)}))||t.removePointer(n.pointer,n.event)},r=0;r<t.pointers.length;r++)n()}}(r=u.default.PointerEvent?[{type:i.down,listener:a},{type:i.down,listener:e.pointerDown},{type:i.move,listener:e.pointerMove},{type:i.up,listener:e.pointerUp},{type:i.cancel,listener:e.pointerUp}]:[{type:"mousedown",listener:e.pointerDown},{type:"mousemove",listener:e.pointerMove},{type:"mouseup",listener:e.pointerUp},{type:"touchstart",listener:a},{type:"touchstart",listener:e.pointerDown},{type:"touchmove",listener:e.pointerMove},{type:"touchend",listener:e.pointerUp},{type:"touchcancel",listener:e.pointerUp}]).push({type:"blur",listener:function(e){for(var t=0;t<o.interactions.list.length;t++)o.interactions.list[t].documentBlur(e)}}),o.prevTouchTime=0,o.Interaction=function(){function e(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),p(this,d(e).apply(this,arguments))}var n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(e,s.default),(n=[{key:"_now",value:function(){return o.now()}},{key:"pointerMoveTolerance",get:function(){return o.interactions.pointerMoveTolerance},set:function(e){o.interactions.pointerMoveTolerance=e}}])&&function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}(e.prototype,n),e}(),o.interactions={list:[],new:function(e){e.scopeFire=function(e,t){return o.fire(e,t)};var t=new o.Interaction(e);return o.interactions.list.push(t),t},listeners:e,docEvents:r,pointerMoveTolerance:1}},listeners:{"scope:add-document":function(e){return r(e,"add")},"scope:remove-document":function(e){return r(e,"remove")}},onDocSignal:r,doOnInteractions:m,methodNames:y};t.default=i})),g=e((function(e,t){function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"PointerInfo",{enumerable:!0,get:function(){return u.default}}),t.default=t.Interaction=t._ProxyMethods=t._ProxyValues=void 0;var n,c,r,f,o,p=l(pt),d=l(Tn),u=(n=Hn)&&n.__esModule?n:{default:n},i=O({});function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function l(e){if(e&&e.__esModule)return e;if(null===e||"object"!==a(e)&&"function"!=typeof e)return{default:e};var t=s();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t,n){return t&&v(e.prototype,t),n&&v(e,n),e}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}t._ProxyValues=c,(r=c||(t._ProxyValues=c={})).interactable="",r.element="",r.prepared="",r.pointerIsDown="",r.pointerWasMoved="",r._proxy="",t._ProxyMethods=f,(o=f||(t._ProxyMethods=f={})).start="",o.move="",o.end="",o.stop="",o.interacting="";var g=0,h=function(){function l(e){var t=this,n=e.pointerType,r=e.scopeFire;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),m(this,"interactable",null),m(this,"element",null),m(this,"rect",void 0),m(this,"_rects",void 0),m(this,"edges",void 0),m(this,"_scopeFire",void 0),m(this,"prepared",{name:null,axis:null,edges:null}),m(this,"pointerType",void 0),m(this,"pointers",[]),m(this,"downEvent",null),m(this,"downPointer",{}),m(this,"_latestPointer",{pointer:null,event:null,eventTarget:null}),m(this,"prevEvent",null),m(this,"pointerIsDown",!1),m(this,"pointerWasMoved",!1),m(this,"_interacting",!1),m(this,"_ending",!1),m(this,"_stopped",!0),m(this,"_proxy",null),m(this,"simulation",null),m(this,"doMove",p.warnOnce((function(e){this.move(e)}),"The interaction.doMove() method has been renamed to interaction.move()")),m(this,"coords",{start:p.pointer.newCoords(),prev:p.pointer.newCoords(),cur:p.pointer.newCoords(),delta:p.pointer.newCoords(),velocity:p.pointer.newCoords()}),m(this,"_id",g++),this._scopeFire=r,this.pointerType=n;var o=this;function i(e){Object.defineProperty(t._proxy,e,{get:function(){return o[e]}})}for(var a in this._proxy={},c)i(a);function u(e){Object.defineProperty(t._proxy,e,{value:function(){return o[e].apply(o,arguments)}})}for(var s in f)u(s);this._scopeFire("interactions:new",{interaction:this})}return y(l,[{key:"pointerMoveTolerance",get:function(){return 1}}]),y(l,[{key:"pointerDown",value:function(e,t,n){var r=this.updatePointer(e,t,n,!0);this._scopeFire("interactions:down",{pointer:e,event:t,eventTarget:n,pointerIndex:r,type:"down",interaction:this})}},{key:"start",value:function(e,t,n){return!(this.interacting()||!this.pointerIsDown||this.pointers.length<(e.name===i.ActionName.Gesture?2:1)||!t.options[e.name].enabled)&&(p.copyAction(this.prepared,e),this.interactable=t,this.element=n,this.rect=t.getRect(n),this.edges=p.extend({},this.prepared.edges),this._stopped=!1,this._interacting=this._doPhase({interaction:this,event:this.downEvent,phase:d.EventPhase.Start})&&!this._stopped,this._interacting)}},{key:"pointerMove",value:function(e,t,n){this.simulation||this.modifiers&&this.modifiers.endResult||(this.updatePointer(e,t,n,!1),p.pointer.setCoords(this.coords.cur,this.pointers.map((function(e){return e.pointer})),this._now()));var r,o,i=this.coords.cur.page.x===this.coords.prev.page.x&&this.coords.cur.page.y===this.coords.prev.page.y&&this.coords.cur.client.x===this.coords.prev.client.x&&this.coords.cur.client.y===this.coords.prev.client.y;this.pointerIsDown&&!this.pointerWasMoved&&(r=this.coords.cur.client.x-this.coords.start.client.x,o=this.coords.cur.client.y-this.coords.start.client.y,this.pointerWasMoved=p.hypot(r,o)>this.pointerMoveTolerance);var a={pointer:e,pointerIndex:this.getPointerIndex(e),event:t,type:"move",eventTarget:n,dx:r,dy:o,duplicate:i,interaction:this};i||(p.pointer.setCoordDeltas(this.coords.delta,this.coords.prev,this.coords.cur),p.pointer.setCoordVelocity(this.coords.velocity,this.coords.delta)),this._scopeFire("interactions:move",a),i||(this.interacting()&&(a.type=null,this.move(a)),this.pointerWasMoved&&p.pointer.copyCoords(this.coords.prev,this.coords.cur))}},{key:"move",value:function(e){e&&e.event||p.pointer.setZeroCoords(this.coords.delta),(e=p.extend({pointer:this._latestPointer.pointer,event:this._latestPointer.event,eventTarget:this._latestPointer.eventTarget,interaction:this},e||{})).phase=d.EventPhase.Move,this._doPhase(e)}},{key:"pointerUp",value:function(e,t,n,r){var o=this.getPointerIndex(e);-1===o&&(o=this.updatePointer(e,t,n,!1));var i=/cancel$/i.test(t.type)?"cancel":"up";this._scopeFire("interactions:".concat(i),{pointer:e,pointerIndex:o,event:t,eventTarget:n,type:i,curEventTarget:r,interaction:this}),this.simulation||this.end(t),this.pointerIsDown=!1,this.removePointer(e,t)}},{key:"documentBlur",value:function(e){this.end(e),this._scopeFire("interactions:blur",{event:e,type:"blur",interaction:this})}},{key:"end",value:function(e){var t;this._ending=!0,e=e||this._latestPointer.event,this.interacting()&&(t=this._doPhase({event:e,interaction:this,phase:d.EventPhase.End})),!(this._ending=!1)===t&&this.stop()}},{key:"currentAction",value:function(){return this._interacting?this.prepared.name:null}},{key:"interacting",value:function(){return this._interacting}},{key:"stop",value:function(){this._scopeFire("interactions:stop",{interaction:this}),this.interactable=this.element=null,this._interacting=!1,this._stopped=!0,this.prepared.name=this.prevEvent=null}},{key:"getPointerIndex",value:function(e){var t=p.pointer.getPointerId(e);return"mouse"===this.pointerType||"pen"===this.pointerType?this.pointers.length-1:p.arr.findIndex(this.pointers,(function(e){return e.id===t}))}},{key:"getPointerInfo",value:function(e){return this.pointers[this.getPointerIndex(e)]}},{key:"updatePointer",value:function(e,t,n,r){var o=p.pointer.getPointerId(e),i=this.getPointerIndex(e),a=this.pointers[i];return r=!1!==r&&(r||/(down|start)$/i.test(t.type)),a?a.pointer=e:(a=new u.default(o,e,t,null,null),i=this.pointers.length,this.pointers.push(a)),r&&(this.pointerIsDown=!0,this.interacting()||(p.pointer.setCoords(this.coords.start,this.pointers.map((function(e){return e.pointer})),this._now()),p.pointer.copyCoords(this.coords.cur,this.coords.start),p.pointer.copyCoords(this.coords.prev,this.coords.start),p.pointer.pointerExtend(this.downPointer,e),this.downEvent=t,a.downTime=this.coords.cur.timeStamp,a.downTarget=n,this.pointerWasMoved=!1)),this._updateLatestPointer(e,t,n),this._scopeFire("interactions:update-pointer",{pointer:e,event:t,eventTarget:n,down:r,pointerInfo:a,pointerIndex:i,interaction:this}),i}},{key:"removePointer",value:function(e,t){var n=this.getPointerIndex(e);if(-1!==n){var r=this.pointers[n];this._scopeFire("interactions:remove-pointer",{pointer:e,event:t,eventTarget:null,pointerIndex:n,pointerInfo:r,interaction:this}),this.pointers.splice(n,1)}}},{key:"_updateLatestPointer",value:function(e,t,n){this._latestPointer.pointer=e,this._latestPointer.event=t,this._latestPointer.eventTarget=n}},{key:"destroy",value:function(){this._latestPointer.pointer=null,this._latestPointer.event=null,this._latestPointer.eventTarget=null}},{key:"_createPreparedEvent",value:function(e,t,n,r){var o=this.prepared.name;return new d.default(this,e,o,t,this.element,null,n,r)}},{key:"_fireEvent",value:function(e){this.interactable.fire(e),(!this.prevEvent||e.timeStamp>=this.prevEvent.timeStamp)&&(this.prevEvent=e)}},{key:"_doPhase",value:function(e){var t=e.event,n=e.phase,r=e.preEnd,o=e.type,i=this.rect,a=this.coords.delta;if(i&&n===d.EventPhase.Move){var u=this.edges||this.prepared.edges||{left:!0,right:!0,top:!0,bottom:!0};p.rect.addEdges(u,i,a[this.interactable.options.deltaSource]),i.width=i.right-i.left,i.height=i.bottom-i.top}if(!1===this._scopeFire("interactions:before-action-".concat(n),e))return!1;var s=e.iEvent=this._createPreparedEvent(t,n,r,o);return this._scopeFire("interactions:action-".concat(n),e),"start"===n&&(this.prevEvent=s),this._fireEvent(s),this._scopeFire("interactions:after-action-".concat(n),e),!0}},{key:"_now",value:function(){return Date.now()}}]),l}(),b=t.Interaction=h;t.default=b})),k={};Object.defineProperty(k,"__esModule",{value:!0}),k.default=void 0;var n={init:function(e){var t=e;n.document=t.document,n.DocumentFragment=t.DocumentFragment||r,n.SVGElement=t.SVGElement||r,n.SVGSVGElement=t.SVGSVGElement||r,n.SVGElementInstance=t.SVGElementInstance||r,n.Element=t.Element||r,n.HTMLElement=t.HTMLElement||n.Element,n.Event=t.Event,n.Touch=t.Touch||r,n.PointerEvent=t.PointerEvent||t.MSPointerEvent},document:null,DocumentFragment:null,SVGElement:null,SVGSVGElement:null,SVGElementInstance:null,Element:null,HTMLElement:null,Event:null,Touch:null,PointerEvent:null};function r(){}var t=n;k.default=t;var u={};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];e.push(r)}return e}function i(e,t){for(var n=0;n<e.length;n++)if(t(e[n],n,e))return n;return-1}Object.defineProperty(u,"__esModule",{value:!0}),u.contains=function(e,t){return-1!==e.indexOf(t)},u.remove=function(e,t){return e.splice(e.indexOf(t),1)},u.merge=o,u.from=function(e){return o([],e)},u.findIndex=i,u.find=function(e,t){return e[i(e,t)]};var a={};Object.defineProperty(a,"__esModule",{value:!0}),a.default=void 0,a.default=function(e){return!(!e||!e.Window)&&e instanceof e.Window};var s={};Object.defineProperty(s,"__esModule",{value:!0}),s.init=p,s.getWindow=d,s.default=void 0;var l,c=(l=a)&&l.__esModule?l:{default:l},f={realWindow:void 0,window:void 0,getWindow:d,init:p};function p(e){var t=(f.realWindow=e).document.createTextNode("");t.ownerDocument!==e.document&&"function"==typeof e.wrap&&e.wrap(t)===t&&(e=e.wrap(e)),f.window=e}function d(e){return(0,c.default)(e)?e:(e.ownerDocument||e).defaultView||f.window}"undefined"==typeof window?(f.window=void 0,f.realWindow=void 0):p(window),f.init=p;var v=f;s.default=v;var y={};Object.defineProperty(y,"__esModule",{value:!0}),y.array=y.plainObject=y.element=y.string=y.bool=y.number=y.func=y.object=y.docFrag=y.window=void 0;var m=b(a),h=b(s);function b(e){return e&&e.__esModule?e:{default:e}}function w(e){return(w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}y.window=function(e){return e===h.default.window||(0,m.default)(e)},y.docFrag=function(e){return P(e)&&11===e.nodeType};var P=function(e){return!!e&&"object"===w(e)};function _(e){return"function"==typeof e}y.object=P,y.func=_,y.number=function(e){return"number"==typeof e},y.bool=function(e){return"boolean"==typeof e},y.string=function(e){return"string"==typeof e},y.element=function(e){if(!e||"object"!==w(e))return!1;var t=h.default.getWindow(e)||h.default.window;return/object|function/.test(w(t.Element))?e instanceof t.Element:1===e.nodeType&&"string"==typeof e.nodeName},y.plainObject=function(e){return P(e)&&!!e.constructor&&/function Object\b/.test(e.constructor.toString())},y.array=function(e){return P(e)&&void 0!==e.length&&_(e.splice)};var j={};function x(e){return(x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(j,"__esModule",{value:!0}),j.default=void 0;var S=I(k),M=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==x(e)&&"function"!=typeof e)return{default:e};var t=function T(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(y),D=I(s);function I(e){return e&&e.__esModule?e:{default:e}}var A={init:function(e){var t=S.default.Element,n=D.default.window.navigator;A.supportsTouch="ontouchstart"in e||M.func(e.DocumentTouch)&&S.default.document instanceof e.DocumentTouch,A.supportsPointerEvent=!1!==n.pointerEnabled&&!!S.default.PointerEvent,A.isIOS=/iP(hone|od|ad)/.test(n.platform),A.isIOS7=/iP(hone|od|ad)/.test(n.platform)&&/OS 7[^\d]/.test(n.appVersion),A.isIe9=/MSIE 9/.test(n.userAgent),A.isOperaMobile="Opera"===n.appName&&A.supportsTouch&&/Presto/.test(n.userAgent),A.prefixedMatchesSelector="matches"in t.prototype?"matches":"webkitMatchesSelector"in t.prototype?"webkitMatchesSelector":"mozMatchesSelector"in t.prototype?"mozMatchesSelector":"oMatchesSelector"in t.prototype?"oMatchesSelector":"msMatchesSelector",A.pEventTypes=A.supportsPointerEvent?S.default.PointerEvent===e.MSPointerEvent?{up:"MSPointerUp",down:"MSPointerDown",over:"mouseover",out:"mouseout",move:"MSPointerMove",cancel:"MSPointerCancel"}:{up:"pointerup",down:"pointerdown",over:"pointerover",out:"pointerout",move:"pointermove",cancel:"pointercancel"}:null,A.wheelEvent="onmousewheel"in S.default.document?"mousewheel":"wheel"},supportsTouch:null,supportsPointerEvent:null,isIOS7:null,isIOS:null,isIe9:null,isOperaMobile:null,prefixedMatchesSelector:null,pEventTypes:null,wheelEvent:null},z=A;j.default=z;var C={};function R(e){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(C,"__esModule",{value:!0}),C.nodeContains=function(e,t){for(;t;){if(t===e)return!0;t=t.parentNode}return!1},C.closest=function(e,t){for(;N.element(e);){if(G(e,t))return e;e=V(e)}return null},C.parentNode=V,C.matchesSelector=G,C.indexOfDeepestElement=function(e){var t,n,r=[],o=e[0],i=o?0:-1;for(t=1;t<e.length;t++){var a=e[t];if(a&&a!==o)if(o){if(a.parentNode!==a.ownerDocument)if(o.parentNode!==a.ownerDocument)if(a.parentNode!==o.parentNode){if(!r.length)for(var u=o,s=void 0;(s=U(u))&&s!==u.ownerDocument;)r.unshift(u),u=s;var l=void 0;if(o instanceof X.default.HTMLElement&&a instanceof X.default.SVGElement&&!(a instanceof X.default.SVGSVGElement)){if(a===o.parentNode)continue;l=a.ownerSVGElement}else l=a;for(var c=[];l.parentNode!==l.ownerDocument;)c.unshift(l),l=U(l);for(n=0;c[n]&&c[n]===r[n];)n++;for(var f=[c[n-1],c[n],r[n]],p=f[0].lastChild;p;){if(p===f[1]){o=a,i=t,r=c;break}if(p===f[2])break;p=p.previousSibling}}else(parseInt((0,Y.getWindow)(o).getComputedStyle(o).zIndex,10)||0)<=(parseInt((0,Y.getWindow)(a).getComputedStyle(a).zIndex,10)||0)&&(o=a,i=t);else o=a,i=t}else o=a,i=t}return i},C.matchesUpTo=function(e,t,n){for(;N.element(e);){if(G(e,t))return!0;if((e=V(e))===n)return G(e,t)}return!1},C.getActualElement=function(e){return e instanceof X.default.SVGElementInstance?e.correspondingUseElement:e},C.getScrollXY=B,C.getElementClientRect=H,C.getElementRect=function(e){var t=H(e);if(!W.default.isIOS7&&t){var n=B(Y.default.getWindow(e));t.left+=n.x,t.right+=n.x,t.top+=n.y,t.bottom+=n.y}return t},C.getPath=function(e){for(var t=[];e;)t.push(e),e=V(e);return t},C.trySelector=function(e){return!!N.string(e)&&(X.default.document.querySelector(e),!0)};var W=q(j),X=q(k),N=L(y),Y=L(s);function F(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return F=function(){return e},e}function L(e){if(e&&e.__esModule)return e;if(null===e||"object"!==R(e)&&"function"!=typeof e)return{default:e};var t=F();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}function q(e){return e&&e.__esModule?e:{default:e}}function V(e){var t=e.parentNode;if(N.docFrag(t)){for(;(t=t.host)&&N.docFrag(t););return t}return t}function G(e,t){return Y.default.window!==Y.default.realWindow&&(t=t.replace(/\/deep\//g," ")),e[W.default.prefixedMatchesSelector](t)}var U=function(e){return e.parentNode?e.parentNode:e.host};function B(e){return{x:(e=e||Y.default.window).scrollX||e.document.documentElement.scrollLeft,y:e.scrollY||e.document.documentElement.scrollTop}}function H(e){var t=e instanceof X.default.SVGElement?e.getBoundingClientRect():e.getClientRects()[0];return t&&{left:t.left,right:t.right,top:t.top,bottom:t.bottom,width:t.width||t.right-t.left,height:t.height||t.bottom-t.top}}var K={};Object.defineProperty(K,"__esModule",{value:!0}),K.default=void 0,K.default=function(e,t){return Math.sqrt(e*e+t*t)};var $={};function Q(e,t){for(var n in t){var r=Q.prefixedPropREs,o=!1;for(var i in r)if(0===n.indexOf(i)&&r[i].test(n)){o=!0;break}o||"function"==typeof t[n]||(e[n]=t[n])}return e}Object.defineProperty($,"__esModule",{value:!0}),$.default=void 0,Q.prefixedPropREs={webkit:/(Movement[XY]|Radius[XY]|RotationAngle|Force)$/,moz:/(Pressure)$/};var Z=Q;$.default=Z;var J={};function ee(e){return(ee="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(J,"__esModule",{value:!0}),J.copyCoords=function(e,t){e.page=e.page||{},e.page.x=t.page.x,e.page.y=t.page.y,e.client=e.client||{},e.client.x=t.client.x,e.client.y=t.client.y,e.timeStamp=t.timeStamp},J.setCoordDeltas=function(e,t,n){e.page.x=n.page.x-t.page.x,e.page.y=n.page.y-t.page.y,e.client.x=n.client.x-t.client.x,e.client.y=n.client.y-t.client.y,e.timeStamp=n.timeStamp-t.timeStamp},J.setCoordVelocity=function(e,t){var n=Math.max(t.timeStamp/1e3,.001);e.page.x=t.page.x/n,e.page.y=t.page.y/n,e.client.x=t.client.x/n,e.client.y=t.client.y/n,e.timeStamp=n},J.setZeroCoords=function(e){e.page.x=0,e.page.y=0,e.client.x=0,e.client.y=0},J.isNativePointer=ce,J.getXY=fe,J.getPageXY=pe,J.getClientXY=de,J.getPointerId=function(e){return ie.number(e.pointerId)?e.pointerId:e.identifier},J.setCoords=function(e,t,n){var r=1<t.length?ye(t):t[0],o={};pe(r,o),e.page.x=o.x,e.page.y=o.y,de(r,o),e.client.x=o.x,e.client.y=o.y,e.timeStamp=n},J.getTouchPair=ve,J.pointerAverage=ye,J.touchBBox=function(e){if(!(e.length||e.touches&&1<e.touches.length))return null;var t=ve(e),n=Math.min(t[0].pageX,t[1].pageX),r=Math.min(t[0].pageY,t[1].pageY),o=Math.max(t[0].pageX,t[1].pageX),i=Math.max(t[0].pageY,t[1].pageY);return{x:n,y:r,left:n,top:r,right:o,bottom:i,width:o-n,height:i-r}},J.touchDistance=function(e,t){var n=t+"X",r=t+"Y",o=ve(e),i=o[0][n]-o[1][n],a=o[0][r]-o[1][r];return(0,oe.default)(i,a)},J.touchAngle=function(e,t){var n=t+"X",r=t+"Y",o=ve(e),i=o[1][n]-o[0][n],a=o[1][r]-o[0][r];return 180*Math.atan2(a,i)/Math.PI},J.getPointerType=function(e){return ie.string(e.pointerType)?e.pointerType:ie.number(e.pointerType)?[void 0,void 0,"touch","pen","mouse"][e.pointerType]:/touch/.test(e.type)||e instanceof ne.default.Touch?"touch":"mouse"},J.getEventTargets=function(e){var t=ie.func(e.composedPath)?e.composedPath():e.path;return[re.getActualElement(t?t[0]:e.target),re.getActualElement(e.currentTarget)]},J.newCoords=function(){return{page:{x:0,y:0},client:{x:0,y:0},timeStamp:0}},J.coordsToEvent=function(e){return{coords:e,get page(){return this.coords.page},get client(){return this.coords.client},get timeStamp(){return this.coords.timeStamp},get pageX(){return this.coords.page.x},get pageY(){return this.coords.page.y},get clientX(){return this.coords.client.x},get clientY(){return this.coords.client.y},get pointerId(){return this.coords.pointerId},get target(){return this.coords.target},get type(){return this.coords.type},get pointerType(){return this.coords.pointerType},get buttons(){return this.coords.buttons}}},Object.defineProperty(J,"pointerExtend",{enumerable:!0,get:function(){return ae.default}});var te=le(j),ne=le(k),re=se(C),oe=le(K),ie=se(y),ae=le($);function ue(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return ue=function(){return e},e}function se(e){if(e&&e.__esModule)return e;if(null===e||"object"!==ee(e)&&"function"!=typeof e)return{default:e};var t=ue();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}function le(e){return e&&e.__esModule?e:{default:e}}function ce(e){return e instanceof ne.default.Event||e instanceof ne.default.Touch}function fe(e,t,n){return(n=n||{}).x=t[(e=e||"page")+"X"],n.y=t[e+"Y"],n}function pe(e,t){return t=t||{x:0,y:0},te.default.isOperaMobile&&ce(e)?(fe("screen",e,t),t.x+=window.scrollX,t.y+=window.scrollY):fe("page",e,t),t}function de(e,t){return t=t||{},te.default.isOperaMobile&&ce(e)?fe("screen",e,t):fe("client",e,t),t}function ve(e){var t=[];return ie.array(e)?(t[0]=e[0],t[1]=e[1]):"touchend"===e.type?1===e.touches.length?(t[0]=e.touches[0],t[1]=e.changedTouches[0]):0===e.touches.length&&(t[0]=e.changedTouches[0],t[1]=e.changedTouches[1]):(t[0]=e.touches[0],t[1]=e.touches[1]),t}function ye(e){for(var t={pageX:0,pageY:0,clientX:0,clientY:0,screenX:0,screenY:0},n=0;n<e.length;n++){var r=e[n];for(var o in t)t[o]+=r[o]}for(var i in t)t[i]/=e.length;return t}var me={};Object.defineProperty(me,"__esModule",{value:!0}),me.default=function(e,t){for(var n in t)e[n]=t[n];return e};var ge={};function he(e){return(he="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(ge,"__esModule",{value:!0}),ge.getStringOptionResult=_e,ge.resolveRectLike=function(e,t,n,r){var o=e;return we.string(o)?o=_e(o,t,n):we.func(o)&&(o=o.apply(void 0,function(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}(r))),we.element(o)&&(o=(0,C.getElementRect)(o)),o},ge.rectToXY=function(e){return e&&{x:"x"in e?e.x:e.left,y:"y"in e?e.y:e.top}},ge.xywhToTlbr=function(e){return!e||"left"in e&&"top"in e||((e=(0,Oe.default)({},e)).left=e.x||0,e.top=e.y||0,e.right=e.right||e.left+e.width,e.bottom=e.bottom||e.top+e.height),e},ge.tlbrToXywh=function(e){return!e||"x"in e&&"y"in e||((e=(0,Oe.default)({},e)).x=e.left||0,e.y=e.top||0,e.width=e.width||e.right||0-e.x,e.height=e.height||e.bottom||0-e.y),e},ge.addEdges=function(e,t,n){e.left&&(t.left+=n.x),e.right&&(t.right+=n.x),e.top&&(t.top+=n.y),e.bottom&&(t.bottom+=n.y),t.width=t.right-t.left,t.height=t.bottom-t.top};var be,Oe=(be=me)&&be.__esModule?be:{default:be},we=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==he(e)&&"function"!=typeof e)return{default:e};var t=function Pe(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(y);function _e(e,t,n){return"parent"===e?(0,C.parentNode)(n):"self"===e?t.getRect(n):(0,C.closest)(n,e)}var xe={};function Se(e){return(Se="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(xe,"__esModule",{value:!0}),xe.default=function e(t){var n={};for(var r in t){var o=t[r];Me.plainObject(o)?n[r]=e(o):Me.array(o)?n[r]=je.from(o):n[r]=o}return n};var je=ke(u),Me=ke(y);function Ee(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return Ee=function(){return e},e}function ke(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Se(e)&&"function"!=typeof e)return{default:e};var t=Ee();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}var De={};function Te(e){return(Te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(De,"__esModule",{value:!0}),De.default=De.FakeEvent=void 0;var Ie,Ae=Xe(C),ze=Xe(y),Ce=(Ie=$)&&Ie.__esModule?Ie:{default:Ie},Re=Xe(J);function We(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return We=function(){return e},e}function Xe(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Te(e)&&"function"!=typeof e)return{default:e};var t=We();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}function Ye(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Fe=[],Le=[],qe={},Ve=[];function Ge(e,t,n,r){var o=Ke(r),i=Fe.indexOf(e),a=Le[i];a||(a={events:{},typeCount:0},i=Fe.push(e)-1,Le.push(a)),a.events[t]||(a.events[t]=[],a.typeCount++),e.removeEventListener&&!(0,u.contains)(a.events[t],n)&&(e.addEventListener(t,n,Qe.supportsOptions?o:!!o.capture),a.events[t].push(n))}function Ue(e,t,n,r){var o=Ke(r),i=Fe.indexOf(e),a=Le[i];if(a&&a.events)if("all"!==t){if(a.events[t]){var u=a.events[t].length;if("all"===n){for(var s=0;s<u;s++)Ue(e,t,a.events[t][s],o);return}for(var l=0;l<u;l++)if(e.removeEventListener&&a.events[t][l]===n){e.removeEventListener(t,n,Qe.supportsOptions?o:!!o.capture),a.events[t].splice(l,1);break}a.events[t]&&0===a.events[t].length&&(a.events[t]=null,a.typeCount--)}a.typeCount||(Le.splice(i,1),Fe.splice(i,1))}else for(t in a.events)a.events.hasOwnProperty(t)&&Ue(e,t,"all")}function Be(e,t){for(var n=Ke(t),r=new $e(e),o=qe[e.type],i=Ye(Re.getEventTargets(e),1)[0],a=i;ze.element(a);){for(var u=0;u<o.selectors.length;u++){var s=o.selectors[u],l=o.contexts[u];if(Ae.matchesSelector(a,s)&&Ae.nodeContains(l,i)&&Ae.nodeContains(l,a)){var c=o.listeners[u];r.currentTarget=a;for(var f=0;f<c.length;f++){var p=Ye(c[f],3),d=p[0],v=p[1],y=p[2];v===!!n.capture&&y===n.passive&&d(r)}}}a=Ae.parentNode(a)}}function He(e){return Be.call(this,e,!0)}function Ke(e){return ze.object(e)?e:{capture:e}}var $e=function(){function o(e){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.originalEvent=e,r=void 0,(n="currentTarget")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,(0,Ce.default)(this,e)}var t;return(t=[{key:"preventOriginalDefault",value:function(){this.originalEvent.preventDefault()}},{key:"stopPropagation",value:function(){this.originalEvent.stopPropagation()}},{key:"stopImmediatePropagation",value:function(){this.originalEvent.stopImmediatePropagation()}}])&&function Ne(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}(o.prototype,t),o}();De.FakeEvent=$e;var Qe={add:Ge,remove:Ue,addDelegate:function(e,t,n,r,o){var i=Ke(o);if(!qe[n]){qe[n]={contexts:[],listeners:[],selectors:[]};for(var a=0;a<Ve.length;a++){var u=Ve[a];Ge(u,n,Be),Ge(u,n,He,!0)}}var s,l=qe[n];for(s=l.selectors.length-1;0<=s&&(l.selectors[s]!==e||l.contexts[s]!==t);s--);-1===s&&(s=l.selectors.length,l.selectors.push(e),l.contexts.push(t),l.listeners.push([])),l.listeners[s].push([r,!!i.capture,i.passive])},removeDelegate:function(e,t,n,r,o){var i,a=Ke(o),u=qe[n],s=!1;if(u)for(i=u.selectors.length-1;0<=i;i--)if(u.selectors[i]===e&&u.contexts[i]===t){for(var l=u.listeners[i],c=l.length-1;0<=c;c--){var f=Ye(l[c],3),p=f[0],d=f[1],v=f[2];if(p===r&&d===!!a.capture&&v===a.passive){l.splice(c,1),l.length||(u.selectors.splice(i,1),u.contexts.splice(i,1),u.listeners.splice(i,1),Ue(t,n,Be),Ue(t,n,He,!0),u.selectors.length||(qe[n]=null)),s=!0;break}}if(s)break}},delegateListener:Be,delegateUseCapture:He,delegatedEvents:qe,documents:Ve,supportsOptions:!1,supportsPassive:!1,_elements:Fe,_targets:Le,init:function(e){e.document.createElement("div").addEventListener("test",null,{get capture(){return Qe.supportsOptions=!0},get passive(){return Qe.supportsPassive=!0}})}},Ze=Qe;De.default=Ze;var Je={};Object.defineProperty(Je,"__esModule",{value:!0}),Je.default=function(e,t,n){var r=e.options[n],o=r&&r.origin||e.options.origin,i=(0,ge.resolveRectLike)(o,e,t,[e&&t]);return(0,ge.rectToXY)(i)||{x:0,y:0}};var et={};function tt(e){return(tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(et,"__esModule",{value:!0}),et.default=function n(t,r,o){if(o=o||{},ot.string(t)&&-1!==t.search(" ")&&(t=at(t)),ot.array(t))return t.reduce((function(e,t){return(0,rt.default)(e,n(t,r,o))}),o);if(ot.object(t)&&(r=t,t=""),ot.func(r))o[t]=o[t]||[],o[t].push(r);else if(ot.array(r))for(var e=0;e<r.length;e++){var i=r[e];n(t,i,o)}else if(ot.object(r))for(var a in r){var u=at(a).map((function(e){return"".concat(t).concat(e)}));n(u,r[a],o)}return o};var nt,rt=(nt=me)&&nt.__esModule?nt:{default:nt},ot=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==tt(e)&&"function"!=typeof e)return{default:e};var t=function it(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(y);function at(e){return e.trim().split(/ +/)}var ut={};Object.defineProperty(ut,"__esModule",{value:!0}),ut.default=void 0;var st,lt,ct=0,ft={request:function(e){return st(e)},cancel:function(e){return lt(e)},init:function(e){if(st=e.requestAnimationFrame,lt=e.cancelAnimationFrame,!st)for(var t=["ms","moz","webkit","o"],n=0;n<t.length;n++){var r=t[n];st=e["".concat(r,"RequestAnimationFrame")],lt=e["".concat(r,"CancelAnimationFrame")]||e["".concat(r,"CancelRequestAnimationFrame")]}st||(st=function(e){var t=Date.now(),n=Math.max(0,16-(t-ct)),r=setTimeout((function(){e(t+n)}),n);return ct=t+n,r},lt=function(e){return clearTimeout(e)})}};ut.default=ft;var pt={};function dt(e){return(dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(pt,"__esModule",{value:!0}),pt.warnOnce=function(e,t){var n=!1;return function(){return n||(bt.default.window.console.warn(t),n=!0),e.apply(this,arguments)}},pt._getQBezierValue=Tt,pt.getQuadraticCurvePoint=function(e,t,n,r,o,i,a){return{x:Tt(a,e,n,o),y:Tt(a,t,r,i)}},pt.easeOutQuad=function(e,t,n,r){return-n*(e/=r)*(e-2)+t},pt.copyAction=function(e,t){return e.name=t.name,e.axis=t.axis,e.edges=t.edges,e},Object.defineProperty(pt,"win",{enumerable:!0,get:function(){return bt.default}}),Object.defineProperty(pt,"browser",{enumerable:!0,get:function(){return Ot.default}}),Object.defineProperty(pt,"clone",{enumerable:!0,get:function(){return wt.default}}),Object.defineProperty(pt,"events",{enumerable:!0,get:function(){return Pt.default}}),Object.defineProperty(pt,"extend",{enumerable:!0,get:function(){return _t.default}}),Object.defineProperty(pt,"getOriginXY",{enumerable:!0,get:function(){return xt.default}}),Object.defineProperty(pt,"hypot",{enumerable:!0,get:function(){return St.default}}),Object.defineProperty(pt,"normalizeListeners",{enumerable:!0,get:function(){return jt.default}}),Object.defineProperty(pt,"raf",{enumerable:!0,get:function(){return Mt.default}}),pt.rect=pt.pointer=pt.is=pt.dom=pt.arr=void 0;var vt=Dt(u);pt.arr=vt;var yt=Dt(C);pt.dom=yt;var mt=Dt(y);pt.is=mt;var gt=Dt(J);pt.pointer=gt;var ht=Dt(ge);pt.rect=ht;var bt=Et(s),Ot=Et(j),wt=Et(xe),Pt=Et(De),_t=Et(me),xt=Et(Je),St=Et(K),jt=Et(et),Mt=Et(ut);function Et(e){return e&&e.__esModule?e:{default:e}}function kt(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return kt=function(){return e},e}function Dt(e){if(e&&e.__esModule)return e;if(null===e||"object"!==dt(e)&&"function"!=typeof e)return{default:e};var t=kt();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}function Tt(e,t,n,r){var o=1-e;return o*o*t+2*o*e*n+e*e*r}var It={};Object.defineProperty(It,"__esModule",{value:!0}),It.default=It.defaults=void 0;var zt=It.defaults={base:{preventDefault:"auto",deltaSource:"page"},perAction:{enabled:!1,origin:{x:0,y:0}},actions:{}};It.default=zt;var Ct={};function Rt(e){return(Rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(Ct,"__esModule",{value:!0}),Ct.default=void 0;var Wt=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Rt(e)&&"function"!=typeof e)return{default:e};var t=function Ft(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(u),Xt=Yt(me),Nt=Yt(et);function Yt(e){return e&&e.__esModule?e:{default:e}}function qt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Vt(e,t){for(var n=0;n<t.length;n++){var r=t[n];if(e.immediatePropagationStopped)break;r(e)}}var Gt=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),qt(this,"options",void 0),qt(this,"types",{}),qt(this,"propagationStopped",!1),qt(this,"immediatePropagationStopped",!1),qt(this,"global",void 0),this.options=(0,Xt.default)({},e||{})}var n;return(n=[{key:"fire",value:function(e){var t,n=this.global;(t=this.types[e.type])&&Vt(e,t),!e.propagationStopped&&n&&(t=n[e.type])&&Vt(e,t)}},{key:"on",value:function(e,t){var n=(0,Nt.default)(e,t);for(e in n)this.types[e]=Wt.merge(this.types[e]||[],n[e])}},{key:"off",value:function(e,t){var n=(0,Nt.default)(e,t);for(e in n){var r=this.types[e];if(r&&r.length)for(var o=0;o<n[e].length;o++){var i=n[e][o],a=r.indexOf(i);-1!==a&&r.splice(a,1)}}}},{key:"getRect",value:function(){return null}}])&&function Lt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}(t.prototype,n),t}();Ct.default=Gt;var Ut={};function Bt(e){return(Bt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(Ut,"__esModule",{value:!0}),Ut.default=Ut.Interactable=void 0;var Ht=on(u),Kt=nn(j),$t=nn(xe),Qt=nn(De),Zt=nn(me),Jt=on(y),en=nn(et),tn=nn(Ct);function nn(e){return e&&e.__esModule?e:{default:e}}function rn(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return rn=function(){return e},e}function on(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Bt(e)&&"function"!=typeof e)return{default:e};var t=rn();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}function an(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function un(e,t,n){return t&&an(e.prototype,t),n&&an(e,n),e}function sn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ln=function(){function r(e,t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),sn(this,"options",void 0),sn(this,"_actions",void 0),sn(this,"target",void 0),sn(this,"events",new tn.default),sn(this,"_context",void 0),sn(this,"_win",void 0),sn(this,"_doc",void 0),this._actions=t.actions,this.target=e,this._context=t.context||n,this._win=(0,s.getWindow)((0,C.trySelector)(e)?this._context:e),this._doc=this._win.document,this.set(t)}return un(r,[{key:"_defaults",get:function(){return{base:{},perAction:{},actions:{}}}}]),un(r,[{key:"setOnEvents",value:function(e,t){return Jt.func(t.onstart)&&this.on("".concat(e,"start"),t.onstart),Jt.func(t.onmove)&&this.on("".concat(e,"move"),t.onmove),Jt.func(t.onend)&&this.on("".concat(e,"end"),t.onend),Jt.func(t.oninertiastart)&&this.on("".concat(e,"inertiastart"),t.oninertiastart),this}},{key:"updatePerActionListeners",value:function(e,t,n){(Jt.array(t)||Jt.object(t))&&this.off(e,t),(Jt.array(n)||Jt.object(n))&&this.on(e,n)}},{key:"setPerAction",value:function(e,t){var n=this._defaults;for(var r in t){var o=r,i=this.options[e],a=t[o];"listeners"===o&&this.updatePerActionListeners(e,i.listeners,a),Jt.array(a)?i[o]=Ht.from(a):Jt.plainObject(a)?(i[o]=(0,Zt.default)(i[o]||{},(0,$t.default)(a)),Jt.object(n.perAction[o])&&"enabled"in n.perAction[o]&&(i[o].enabled=!1!==a.enabled)):Jt.bool(a)&&Jt.object(n.perAction[o])?i[o].enabled=a:i[o]=a}}},{key:"getRect",value:function(e){return e=e||(Jt.element(this.target)?this.target:null),Jt.string(this.target)&&(e=e||this._context.querySelector(this.target)),(0,C.getElementRect)(e)}},{key:"rectChecker",value:function(e){return Jt.func(e)?(this.getRect=e,this):null===e?(delete this.getRect,this):this.getRect}},{key:"_backCompatOption",value:function(e,t){if((0,C.trySelector)(t)||Jt.object(t)){this.options[e]=t;for(var n=0;n<this._actions.names.length;n++){var r=this._actions.names[n];this.options[r][e]=t}return this}return this.options[e]}},{key:"origin",value:function(e){return this._backCompatOption("origin",e)}},{key:"deltaSource",value:function(e){return"page"===e||"client"===e?(this.options.deltaSource=e,this):this.options.deltaSource}},{key:"context",value:function(){return this._context}},{key:"inContext",value:function(e){return this._context===e.ownerDocument||(0,C.nodeContains)(this._context,e)}},{key:"testIgnoreAllow",value:function(e,t,n){return!this.testIgnore(e.ignoreFrom,t,n)&&this.testAllow(e.allowFrom,t,n)}},{key:"testAllow",value:function(e,t,n){return!e||!!Jt.element(n)&&(Jt.string(e)?(0,C.matchesUpTo)(n,e,t):!!Jt.element(e)&&(0,C.nodeContains)(e,n))}},{key:"testIgnore",value:function(e,t,n){return!(!e||!Jt.element(n))&&(Jt.string(e)?(0,C.matchesUpTo)(n,e,t):!!Jt.element(e)&&(0,C.nodeContains)(e,n))}},{key:"fire",value:function(e){return this.events.fire(e),this}},{key:"_onOff",value:function(e,t,n,r){Jt.object(t)&&!Jt.array(t)&&(r=n,n=null);var o="on"===e?"add":"remove",i=(0,en.default)(t,n);for(var a in i){"wheel"===a&&(a=Kt.default.wheelEvent);for(var u=0;u<i[a].length;u++){var s=i[a][u];Ht.contains(this._actions.eventTypes,a)?this.events[e](a,s):Jt.string(this.target)?Qt.default["".concat(o,"Delegate")](this.target,this._context,a,s,r):Qt.default[o](this.target,a,s,r)}}return this}},{key:"on",value:function(e,t,n){return this._onOff("on",e,t,n)}},{key:"off",value:function(e,t,n){return this._onOff("off",e,t,n)}},{key:"set",value:function(e){var t=this._defaults;for(var n in Jt.object(e)||(e={}),this.options=(0,$t.default)(t.base),this._actions.methodDict){var r=n,o=this._actions.methodDict[r];this.options[r]={},this.setPerAction(r,(0,Zt.default)((0,Zt.default)({},t.perAction),t.actions[r])),this[o](e[r])}for(var i in e)Jt.func(this[i])&&this[i](e[i]);return this}},{key:"unset",value:function(){if(Qt.default.remove(this.target,"all"),Jt.string(this.target))for(var e in Qt.default.delegatedEvents){var t=Qt.default.delegatedEvents[e];t.selectors[0]===this.target&&t.contexts[0]===this._context&&(t.selectors.splice(0,1),t.contexts.splice(0,1),t.listeners.splice(0,1)),Qt.default.remove(this._context,e,Qt.default.delegateListener),Qt.default.remove(this._context,e,Qt.default.delegateUseCapture,!0)}else Qt.default.remove(this.target,"all")}}]),r}(),cn=Ut.Interactable=ln;Ut.default=cn;var fn={};function pn(e){return(pn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(fn,"__esModule",{value:!0}),fn.default=void 0;var dn,vn=bn(u),yn=bn(C),mn=(dn=me)&&dn.__esModule?dn:{default:dn},gn=bn(y);function hn(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return hn=function(){return e},e}function bn(e){if(e&&e.__esModule)return e;if(null===e||"object"!==pn(e)&&"function"!=typeof e)return{default:e};var t=hn();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}function wn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Pn=function(){function t(e){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.scope=e,wn(this,"list",[]),wn(this,"selectorMap",{}),e.addListeners({"interactable:unset":function(e){var t=e.interactable,n=t.target,r=t._context,o=gn.string(n)?a.selectorMap[n]:n[a.scope.id],i=o.findIndex((function(e){return e.context===r}));o[i]&&(o[i].context=null,o[i].interactable=null),o.splice(i,1)}})}var n;return(n=[{key:"new",value:function(e,t){t=(0,mn.default)(t||{},{actions:this.scope.actions});var n=new this.scope.Interactable(e,t,this.scope.document),r={context:n._context,interactable:n};return this.scope.addDocument(n._doc),this.list.push(n),gn.string(e)?(this.selectorMap[e]||(this.selectorMap[e]=[]),this.selectorMap[e].push(r)):(n.target[this.scope.id]||Object.defineProperty(e,this.scope.id,{value:[],configurable:!0}),e[this.scope.id].push(r)),this.scope.fire("interactable:new",{target:e,options:t,interactable:n,win:this.scope._win}),n}},{key:"get",value:function(t,e){var n=e&&e.context||this.scope.document,r=gn.string(t),o=r?this.selectorMap[t]:t[this.scope.id];if(!o)return null;var i=vn.find(o,(function(e){return e.context===n&&(r||e.interactable.inContext(t))}));return i&&i.interactable}},{key:"forEachMatch",value:function(e,t){for(var n=0;n<this.list.length;n++){var r=this.list[n],o=void 0;if((gn.string(r.target)?gn.element(e)&&yn.matchesSelector(e,r.target):e===r.target)&&r.inContext(e)&&(o=t(r)),void 0!==o)return o}}}])&&function On(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}(t.prototype,n),t}();fn.default=Pn;var _n,xn,Sn={};function jn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Mn(e,t,n){return t&&jn(e.prototype,t),n&&jn(e,n),e}function En(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(Sn,"__esModule",{value:!0}),Sn.default=Sn.BaseEvent=Sn.EventPhase=void 0,Sn.EventPhase=_n,(xn=_n||(Sn.EventPhase=_n={})).Start="start",xn.Move="move",xn.End="end",xn._NONE="";var kn=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),En(this,"type",void 0),En(this,"target",void 0),En(this,"currentTarget",void 0),En(this,"interactable",void 0),En(this,"_interaction",void 0),En(this,"timeStamp",void 0),En(this,"immediatePropagationStopped",!1),En(this,"propagationStopped",!1),this._interaction=e}return Mn(t,[{key:"interaction",get:function(){return this._interaction._proxy}}]),Mn(t,[{key:"preventDefault",value:function(){}},{key:"stopPropagation",value:function(){this.propagationStopped=!0}},{key:"stopImmediatePropagation",value:function(){this.immediatePropagationStopped=this.propagationStopped=!0}}]),t}(),Dn=Sn.BaseEvent=kn;Sn.default=Dn;var Tn={};Object.defineProperty(Tn,"__esModule",{value:!0}),Tn.default=Tn.InteractEvent=Tn.EventPhase=void 0;var In,An,zn=Nn(me),Cn=Nn(Je),Rn=Nn(K),Wn=Nn(Sn),Xn=Nn(It);function Nn(e){return e&&e.__esModule?e:{default:e}}function Yn(e){return(Yn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ln(e){return(Ln=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function qn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Vn(e,t){return(Vn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Gn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Tn.EventPhase=In,(An=In||(Tn.EventPhase=In={})).Start="start",An.Move="move",An.End="end",An._NONE="";var Un=function(){function h(e,t,n,r,o,i,a,u){var s,c;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),s=!(c=Ln(h).call(this,e))||"object"!==Yn(c)&&"function"!=typeof c?qn(this):c,Gn(qn(s),"target",void 0),Gn(qn(s),"currentTarget",void 0),Gn(qn(s),"relatedTarget",void 0),Gn(qn(s),"screenX",void 0),Gn(qn(s),"screenY",void 0),Gn(qn(s),"button",void 0),Gn(qn(s),"buttons",void 0),Gn(qn(s),"ctrlKey",void 0),Gn(qn(s),"shiftKey",void 0),Gn(qn(s),"altKey",void 0),Gn(qn(s),"metaKey",void 0),Gn(qn(s),"page",void 0),Gn(qn(s),"client",void 0),Gn(qn(s),"delta",void 0),Gn(qn(s),"rect",void 0),Gn(qn(s),"x0",void 0),Gn(qn(s),"y0",void 0),Gn(qn(s),"t0",void 0),Gn(qn(s),"dt",void 0),Gn(qn(s),"duration",void 0),Gn(qn(s),"clientX0",void 0),Gn(qn(s),"clientY0",void 0),Gn(qn(s),"velocity",void 0),Gn(qn(s),"speed",void 0),Gn(qn(s),"swipe",void 0),Gn(qn(s),"timeStamp",void 0),Gn(qn(s),"dragEnter",void 0),Gn(qn(s),"dragLeave",void 0),Gn(qn(s),"axes",void 0),Gn(qn(s),"preEnd",void 0),o=o||e.element;var f=e.interactable,p=(f&&f.options||Xn.default).deltaSource,d=(0,Cn.default)(f,o,n),v="start"===r,y="end"===r,m=v?qn(s):e.prevEvent,g=v?e.coords.start:y?{page:m.page,client:m.client,timeStamp:e.coords.cur.timeStamp}:e.coords.cur;return s.page=(0,zn.default)({},g.page),s.client=(0,zn.default)({},g.client),s.rect=(0,zn.default)({},e.rect),s.timeStamp=g.timeStamp,y||(s.page.x-=d.x,s.page.y-=d.y,s.client.x-=d.x,s.client.y-=d.y),s.ctrlKey=t.ctrlKey,s.altKey=t.altKey,s.shiftKey=t.shiftKey,s.metaKey=t.metaKey,s.button=t.button,s.buttons=t.buttons,s.target=o,s.currentTarget=o,s.relatedTarget=i||null,s.preEnd=a,s.type=u||n+(r||""),s.interactable=f,s.t0=v?e.pointers[e.pointers.length-1].downTime:m.t0,s.x0=e.coords.start.page.x-d.x,s.y0=e.coords.start.page.y-d.y,s.clientX0=e.coords.start.client.x-d.x,s.clientY0=e.coords.start.client.y-d.y,s.delta=v||y?{x:0,y:0}:{x:s[p].x-m[p].x,y:s[p].y-m[p].y},s.dt=e.coords.delta.timeStamp,s.duration=s.timeStamp-s.t0,s.velocity=(0,zn.default)({},e.coords.velocity[p]),s.speed=(0,Rn.default)(s.velocity.x,s.velocity.y),s.swipe=y||"inertiastart"===r?s.getSwipe():null,s}var t;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Vn(e,t)}(h,Wn.default),(t=[{key:"getSwipe",value:function(){var e=this._interaction;if(e.prevEvent.speed<600||150<this.timeStamp-e.prevEvent.timeStamp)return null;var t=180*Math.atan2(e.prevEvent.velocityY,e.prevEvent.velocityX)/Math.PI;t<0&&(t+=360);var n=112.5<=t&&t<247.5,r=202.5<=t&&t<337.5;return{up:r,down:!r&&22.5<=t&&t<157.5,left:n,right:!n&&(292.5<=t||t<67.5),angle:t,speed:e.prevEvent.speed,velocity:{x:e.prevEvent.velocityX,y:e.prevEvent.velocityY}}}},{key:"preventDefault",value:function(){}},{key:"stopImmediatePropagation",value:function(){this.immediatePropagationStopped=this.propagationStopped=!0}},{key:"stopPropagation",value:function(){this.propagationStopped=!0}},{key:"pageX",get:function(){return this.page.x},set:function(e){this.page.x=e}},{key:"pageY",get:function(){return this.page.y},set:function(e){this.page.y=e}},{key:"clientX",get:function(){return this.client.x},set:function(e){this.client.x=e}},{key:"clientY",get:function(){return this.client.y},set:function(e){this.client.y=e}},{key:"dx",get:function(){return this.delta.x},set:function(e){this.delta.x=e}},{key:"dy",get:function(){return this.delta.y},set:function(e){this.delta.y=e}},{key:"velocityX",get:function(){return this.velocity.x},set:function(e){this.velocity.x=e}},{key:"velocityY",get:function(){return this.velocity.y},set:function(e){this.velocity.y=e}}])&&function Fn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}(h.prototype,t),h}(),Bn=Tn.InteractEvent=Un;Tn.default=Bn;var Hn={};Object.defineProperty(Hn,"__esModule",{value:!0}),Hn.default=Hn.PointerInfo=void 0;var $n=Hn.PointerInfo=function Kn(e,t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,Kn),this.id=e,this.pointer=t,this.event=n,this.downTime=r,this.downTarget=o};Hn.default=$n;var Qn={};function Zn(e){return(Zn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(Qn,"__esModule",{value:!0}),Qn.default=void 0;var Jn=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Zn(e)&&"function"!=typeof e)return{default:e};var t=function er(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(C),tr={methodOrder:["simulationResume","mouseOrPen","hasPointer","idle"],search:function(e){for(var t=0;t<tr.methodOrder.length;t++){var n;n=tr.methodOrder[t];var r=tr[n](e);if(r)return r}return null},simulationResume:function(e){var t=e.pointerType,n=e.eventType,r=e.eventTarget,o=e.scope;if(!/down|start/i.test(n))return null;for(var i=0;i<o.interactions.list.length;i++){var a=o.interactions.list[i],u=r;if(a.simulation&&a.simulation.allowResume&&a.pointerType===t)for(;u;){if(u===a.element)return a;u=Jn.parentNode(u)}}return null},mouseOrPen:function(e){var t,n=e.pointerId,r=e.pointerType,o=e.eventType,i=e.scope;if("mouse"!==r&&"pen"!==r)return null;for(var a=0;a<i.interactions.list.length;a++){var u=i.interactions.list[a];if(u.pointerType===r){if(u.simulation&&!nr(u,n))continue;if(u.interacting())return u;t=t||u}}if(t)return t;for(var s=0;s<i.interactions.list.length;s++){var l=i.interactions.list[s];if(!(l.pointerType!==r||/down/i.test(o)&&l.simulation))return l}return null},hasPointer:function(e){for(var t=e.pointerId,n=e.scope,r=0;r<n.interactions.list.length;r++){var o=n.interactions.list[r];if(nr(o,t))return o}return null},idle:function(e){for(var t=e.pointerType,n=e.scope,r=0;r<n.interactions.list.length;r++){var o=n.interactions.list[r];if(1===o.pointers.length){var i=o.interactable;if(i&&(!i.options.gesture||!i.options.gesture.enabled))continue}else if(2<=o.pointers.length)continue;if(!o.interacting()&&t===o.pointerType)return o}return null}};function nr(e,t){return e.pointers.some((function(e){return e.id===t}))}var rr=tr;Qn.default=rr;var or={};function ir(e){return(ir="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(or,"__esModule",{value:!0}),or.default=void 0;var ar=O({}),ur=cr(u),sr=cr(y);function lr(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return lr=function(){return e},e}function cr(e){if(e&&e.__esModule)return e;if(null===e||"object"!==ir(e)&&"function"!=typeof e)return{default:e};var t=lr();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}function fr(e){var t=e.interaction;if("drag"===t.prepared.name){var n=t.prepared.axis;"x"===n?(t.coords.cur.page.y=t.coords.start.page.y,t.coords.cur.client.y=t.coords.start.client.y,t.coords.velocity.client.y=0,t.coords.velocity.page.y=0):"y"===n&&(t.coords.cur.page.x=t.coords.start.page.x,t.coords.cur.client.x=t.coords.start.client.x,t.coords.velocity.client.x=0,t.coords.velocity.page.x=0)}}function pr(e){var t=e.iEvent,n=e.interaction;if("drag"===n.prepared.name){var r=n.prepared.axis;if("x"===r||"y"===r){var o="x"===r?"y":"x";t.page[o]=n.coords.start.page[o],t.client[o]=n.coords.start.client[o],t.delta[o]=0}}}ar.ActionName.Drag="drag";var dr={id:"actions/drag",install:function(e){var t=e.actions,n=e.Interactable,r=e.defaults;n.prototype.draggable=dr.draggable,t[ar.ActionName.Drag]=dr,t.names.push(ar.ActionName.Drag),ur.merge(t.eventTypes,["dragstart","dragmove","draginertiastart","dragresume","dragend"]),t.methodDict.drag="draggable",r.actions.drag=dr.defaults},listeners:{"interactions:before-action-move":fr,"interactions:action-resume":fr,"interactions:action-move":pr,"auto-start:check":function(e){var t=e.interaction,n=e.interactable,r=e.buttons,o=n.options.drag;if(o&&o.enabled&&(!t.pointerIsDown||!/mouse|pointer/.test(t.pointerType)||0!=(r&n.options.drag.mouseButtons)))return!(e.action={name:ar.ActionName.Drag,axis:"start"===o.lockAxis?o.startAxis:o.lockAxis})}},draggable:function(e){return sr.object(e)?(this.options.drag.enabled=!1!==e.enabled,this.setPerAction(ar.ActionName.Drag,e),this.setOnEvents(ar.ActionName.Drag,e),/^(xy|x|y|start)$/.test(e.lockAxis)&&(this.options.drag.lockAxis=e.lockAxis),/^(xy|x|y)$/.test(e.startAxis)&&(this.options.drag.startAxis=e.startAxis),this):sr.bool(e)?(this.options.drag.enabled=e,this):this.options.drag},beforeMove:fr,move:pr,defaults:{startAxis:"xy",lockAxis:"xy"},getCursor:function(){return"move"}},vr=dr;or.default=vr;var yr={};Object.defineProperty(yr,"__esModule",{value:!0}),yr.default=void 0;var mr,gr=(mr=Sn)&&mr.__esModule?mr:{default:mr},hr=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Or(e)&&"function"!=typeof e)return{default:e};var t=function br(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(u);function Or(e){return(Or="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Pr(e){return(Pr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function xr(e,t){return(xr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Sr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var jr=function(){function l(e,t,n){var r,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),r=!(i=Pr(l).call(this,t._interaction))||"object"!==Or(i)&&"function"!=typeof i?_r(this):i,Sr(_r(r),"target",void 0),Sr(_r(r),"dropzone",void 0),Sr(_r(r),"dragEvent",void 0),Sr(_r(r),"relatedTarget",void 0),Sr(_r(r),"draggable",void 0),Sr(_r(r),"timeStamp",void 0),Sr(_r(r),"propagationStopped",!1),Sr(_r(r),"immediatePropagationStopped",!1);var a="dragleave"===n?e.prev:e.cur,u=a.element,s=a.dropzone;return r.type=n,r.target=u,r.currentTarget=u,r.dropzone=s,r.dragEvent=t,r.relatedTarget=t.target,r.draggable=t.interactable,r.timeStamp=t.timeStamp,r}var t;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&xr(e,t)}(l,gr.default),(t=[{key:"reject",value:function(){var r=this,e=this._interaction.dropState;if("dropactivate"===this.type||this.dropzone&&e.cur.dropzone===this.dropzone&&e.cur.element===this.target)if(e.prev.dropzone=this.dropzone,e.prev.element=this.target,e.rejected=!0,e.events.enter=null,this.stopImmediatePropagation(),"dropactivate"===this.type){var t=e.activeDrops,n=hr.findIndex(t,(function(e){var t=e.dropzone,n=e.element;return t===r.dropzone&&n===r.target}));e.activeDrops.splice(n,1);var o=new l(e,this.dragEvent,"dropdeactivate");o.dropzone=this.dropzone,o.target=this.target,this.dropzone.fire(o)}else this.dropzone.fire(new l(e,this.dragEvent,"dragleave"))}},{key:"preventDefault",value:function(){}},{key:"stopPropagation",value:function(){this.propagationStopped=!0}},{key:"stopImmediatePropagation",value:function(){this.immediatePropagationStopped=this.propagationStopped=!0}}])&&function wr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}(l.prototype,t),l}();yr.default=jr;var Mr={};function Er(e){return(Er="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(Mr,"__esModule",{value:!0}),Mr.default=void 0;var kr=O({}),Dr=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Er(e)&&"function"!=typeof e)return{default:e};var t=function Ar(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(pt),Tr=zr(or),Ir=zr(yr);function zr(e){return e&&e.__esModule?e:{default:e}}function Cr(e,t){for(var n=0;n<e.slice().length;n++){var r=e.slice()[n],o=r.dropzone,i=r.element;t.dropzone=o,t.target=i,o.fire(t),t.propagationStopped=t.immediatePropagationStopped=!1}}function Rr(e,t){for(var n=function(e,t){for(var n=e.interactables,r=[],o=0;o<n.list.length;o++){var i=n.list[o];if(i.options.drop.enabled){var a=i.options.drop.accept;if(!(Dr.is.element(a)&&a!==t||Dr.is.string(a)&&!Dr.dom.matchesSelector(t,a)||Dr.is.func(a)&&!a({dropzone:i,draggableElement:t})))for(var u=Dr.is.string(i.target)?i._context.querySelectorAll(i.target):Dr.is.array(i.target)?i.target:[i.target],s=0;s<u.length;s++){var l=u[s];l!==t&&r.push({dropzone:i,element:l})}}}return r}(e,t),r=0;r<n.length;r++){var o=n[r];o.rect=o.dropzone.getRect(o.element)}return n}function Wr(e,t,n){for(var r=e.dropState,o=e.interactable,i=e.element,a=[],u=0;u<r.activeDrops.length;u++){var s=r.activeDrops[u],l=s.dropzone,c=s.element,f=s.rect;a.push(l.dropCheck(t,n,o,i,c,f)?c:null)}var p=Dr.dom.indexOfDeepestElement(a);return r.activeDrops[p]||null}function Xr(e,t,n){var r=e.dropState,o={enter:null,leave:null,activate:null,deactivate:null,move:null,drop:null};return"dragstart"===n.type&&(o.activate=new Ir.default(r,n,"dropactivate"),o.activate.target=null,o.activate.dropzone=null),"dragend"===n.type&&(o.deactivate=new Ir.default(r,n,"dropdeactivate"),o.deactivate.target=null,o.deactivate.dropzone=null),r.rejected||(r.cur.element!==r.prev.element&&(r.prev.dropzone&&(o.leave=new Ir.default(r,n,"dragleave"),n.dragLeave=o.leave.target=r.prev.element,n.prevDropzone=o.leave.dropzone=r.prev.dropzone),r.cur.dropzone&&(o.enter=new Ir.default(r,n,"dragenter"),n.dragEnter=r.cur.element,n.dropzone=r.cur.dropzone)),"dragend"===n.type&&r.cur.dropzone&&(o.drop=new Ir.default(r,n,"drop"),n.dropzone=r.cur.dropzone,n.relatedTarget=r.cur.element),"dragmove"===n.type&&r.cur.dropzone&&(o.move=new Ir.default(r,n,"dropmove"),(o.move.dragmove=n).dropzone=r.cur.dropzone)),o}function Nr(e,t){var n=e.dropState,r=n.activeDrops,o=n.cur,i=n.prev;t.leave&&i.dropzone.fire(t.leave),t.move&&o.dropzone.fire(t.move),t.enter&&o.dropzone.fire(t.enter),t.drop&&o.dropzone.fire(t.drop),t.deactivate&&Cr(r,t.deactivate),n.prev.dropzone=o.dropzone,n.prev.element=o.element}function Yr(e,t){var n=e.interaction,r=e.iEvent,o=e.event;if("dragmove"===r.type||"dragend"===r.type){var i=n.dropState;t.dynamicDrop&&(i.activeDrops=Rr(t,n.element));var a=r,u=Wr(n,a,o);i.rejected=i.rejected&&!!u&&u.dropzone===i.cur.dropzone&&u.element===i.cur.element,i.cur.dropzone=u&&u.dropzone,i.cur.element=u&&u.element,i.events=Xr(n,0,a)}}var Fr={id:"actions/drop",install:function(t){var e=t.actions,n=t.interact,r=t.Interactable,o=t.defaults;t.usePlugin(Tr.default),r.prototype.dropzone=function(e){return function(e,t){if(Dr.is.object(t)){if(e.options.drop.enabled=!1!==t.enabled,t.listeners){var n=Dr.normalizeListeners(t.listeners),r=Object.keys(n).reduce((function(e,t){return e[/^(enter|leave)/.test(t)?"drag".concat(t):/^(activate|deactivate|move)/.test(t)?"drop".concat(t):t]=n[t],e}),{});e.off(e.options.drop.listeners),e.on(r),e.options.drop.listeners=r}return Dr.is.func(t.ondrop)&&e.on("drop",t.ondrop),Dr.is.func(t.ondropactivate)&&e.on("dropactivate",t.ondropactivate),Dr.is.func(t.ondropdeactivate)&&e.on("dropdeactivate",t.ondropdeactivate),Dr.is.func(t.ondragenter)&&e.on("dragenter",t.ondragenter),Dr.is.func(t.ondragleave)&&e.on("dragleave",t.ondragleave),Dr.is.func(t.ondropmove)&&e.on("dropmove",t.ondropmove),/^(pointer|center)$/.test(t.overlap)?e.options.drop.overlap=t.overlap:Dr.is.number(t.overlap)&&(e.options.drop.overlap=Math.max(Math.min(1,t.overlap),0)),"accept"in t&&(e.options.drop.accept=t.accept),"checker"in t&&(e.options.drop.checker=t.checker),e}return Dr.is.bool(t)?(e.options.drop.enabled=t,e):e.options.drop}(this,e)},r.prototype.dropCheck=function(e,t,n,r,o,i){return function(e,t,n,r,o,i,a){var u=!1;if(!(a=a||e.getRect(i)))return!!e.options.drop.checker&&e.options.drop.checker(t,n,u,e,i,r,o);var s=e.options.drop.overlap;if("pointer"===s){var l=Dr.getOriginXY(r,o,kr.ActionName.Drag),c=Dr.pointer.getPageXY(t);c.x+=l.x,c.y+=l.y;var f=c.x>a.left&&c.x<a.right,p=c.y>a.top&&c.y<a.bottom;u=f&&p}var d=r.getRect(o);if(d&&"center"===s){var v=d.left+d.width/2,y=d.top+d.height/2;u=v>=a.left&&v<=a.right&&y>=a.top&&y<=a.bottom}return d&&Dr.is.number(s)&&(u=s<=Math.max(0,Math.min(a.right,d.right)-Math.max(a.left,d.left))*Math.max(0,Math.min(a.bottom,d.bottom)-Math.max(a.top,d.top))/(d.width*d.height)),e.options.drop.checker&&(u=e.options.drop.checker(t,n,u,e,i,r,o)),u}(this,e,t,n,r,o,i)},n.dynamicDrop=function(e){return Dr.is.bool(e)?(t.dynamicDrop=e,n):t.dynamicDrop},Dr.arr.merge(e.eventTypes,["dragenter","dragleave","dropactivate","dropdeactivate","dropmove","drop"]),e.methodDict.drop="dropzone",t.dynamicDrop=!1,o.actions.drop=Fr.defaults},listeners:{"interactions:before-action-start":function(e){var t=e.interaction;"drag"===t.prepared.name&&(t.dropState={cur:{dropzone:null,element:null},prev:{dropzone:null,element:null},rejected:null,events:null,activeDrops:[]})},"interactions:after-action-start":function(e,t){var n=e.interaction,r=e.iEvent;if("drag"===n.prepared.name){var o=n.dropState;o.activeDrops=null,o.events=null,o.activeDrops=Rr(t,n.element),o.events=Xr(n,0,r),o.events.activate&&(Cr(o.activeDrops,o.events.activate),t.fire("actions/drop:start",{interaction:n,dragEvent:r}))}},"interactions:action-move":Yr,"interactions:action-end":Yr,"interactions:after-action-move":function(e,t){var n=e.interaction,r=e.iEvent;"drag"===n.prepared.name&&(Nr(n,n.dropState.events),t.fire("actions/drop:move",{interaction:n,dragEvent:r}),n.dropState.events={})},"interactions:after-action-end":function(e,t){var n=e.interaction,r=e.iEvent;"drag"===n.prepared.name&&(Nr(n,n.dropState.events),t.fire("actions/drop:end",{interaction:n,dragEvent:r}))},"interactions:stop":function(e){var t=e.interaction;if("drag"===t.prepared.name){var n=t.dropState;n&&(n.activeDrops=null,n.events=null,n.cur.dropzone=null,n.cur.element=null,n.prev.dropzone=null,n.prev.element=null,n.rejected=!1)}}},getActiveDrops:Rr,getDrop:Wr,getDropEvents:Xr,fireDropEvents:Nr,defaults:{enabled:!1,accept:null,overlap:"pointer"}},Lr=Fr;Mr.default=Lr;var qr={};function Vr(e){return(Vr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(qr,"__esModule",{value:!0}),qr.default=void 0;var Gr,Ur=(Gr=Tn)&&Gr.__esModule?Gr:{default:Gr},Br=O({}),Hr=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Vr(e)&&"function"!=typeof e)return{default:e};var t=function Kr(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(pt);function $r(e){var t=e.interaction,n=e.iEvent,r=e.event,o=e.phase;if("gesture"===t.prepared.name){var i=t.pointers.map((function(e){return e.pointer})),a="start"===o,u="end"===o,s=t.interactable.options.deltaSource;if(n.touches=[i[0],i[1]],a)n.distance=Hr.pointer.touchDistance(i,s),n.box=Hr.pointer.touchBBox(i),n.scale=1,n.ds=0,n.angle=Hr.pointer.touchAngle(i,s),n.da=0,t.gesture.startDistance=n.distance,t.gesture.startAngle=n.angle;else if(u||r instanceof Ur.default){var l=t.prevEvent;n.distance=l.distance,n.box=l.box,n.scale=l.scale,n.ds=0,n.angle=l.angle,n.da=0}else n.distance=Hr.pointer.touchDistance(i,s),n.box=Hr.pointer.touchBBox(i),n.scale=n.distance/t.gesture.startDistance,n.angle=Hr.pointer.touchAngle(i,s),n.ds=n.scale-t.gesture.scale,n.da=n.angle-t.gesture.angle;t.gesture.distance=n.distance,t.gesture.angle=n.angle,Hr.is.number(n.scale)&&n.scale!==1/0&&!isNaN(n.scale)&&(t.gesture.scale=n.scale)}}Br.ActionName.Gesture="gesture";var Qr={id:"actions/gesture",before:["actions/drag","actions/resize"],install:function(e){var t=e.actions,n=e.Interactable,r=e.defaults;n.prototype.gesturable=function(e){return Hr.is.object(e)?(this.options.gesture.enabled=!1!==e.enabled,this.setPerAction(Br.ActionName.Gesture,e),this.setOnEvents(Br.ActionName.Gesture,e),this):Hr.is.bool(e)?(this.options.gesture.enabled=e,this):this.options.gesture},t[Br.ActionName.Gesture]=Qr,t.names.push(Br.ActionName.Gesture),Hr.arr.merge(t.eventTypes,["gesturestart","gesturemove","gestureend"]),t.methodDict.gesture="gesturable",r.actions.gesture=Qr.defaults},listeners:{"interactions:action-start":$r,"interactions:action-move":$r,"interactions:action-end":$r,"interactions:new":function(e){e.interaction.gesture={angle:0,distance:0,scale:1,startAngle:0,startDistance:0}},"auto-start:check":function(e){if(!(e.interaction.pointers.length<2)){var t=e.interactable.options.gesture;if(t&&t.enabled)return!(e.action={name:Br.ActionName.Gesture})}}},defaults:{},getCursor:function(){return""}},Zr=Qr;qr.default=Zr;var Jr={};function eo(e){return(eo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(Jr,"__esModule",{value:!0}),Jr.default=void 0,g({});var to,no=O({}),ro=so(u),oo=so(C),io=(to=me)&&to.__esModule?to:{default:to},ao=so(y);function uo(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return uo=function(){return e},e}function so(e){if(e&&e.__esModule)return e;if(null===e||"object"!==eo(e)&&"function"!=typeof e)return{default:e};var t=uo();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}function lo(e,t,n,r,o,i,a){if(!t)return!1;if(!0===t){var u=ao.number(i.width)?i.width:i.right-i.left,s=ao.number(i.height)?i.height:i.bottom-i.top;if(a=Math.min(a,("left"===e||"right"===e?u:s)/2),u<0&&("left"===e?e="right":"right"===e&&(e="left")),s<0&&("top"===e?e="bottom":"bottom"===e&&(e="top")),"left"===e)return n.x<(0<=u?i.left:i.right)+a;if("top"===e)return n.y<(0<=s?i.top:i.bottom)+a;if("right"===e)return n.x>(0<=u?i.right:i.left)-a;if("bottom"===e)return n.y>(0<=s?i.bottom:i.top)-a}return!!ao.element(r)&&(ao.element(t)?t===r:oo.matchesUpTo(r,t,o))}function co(e){var t=e.iEvent,n=e.interaction;n.prepared.name===no.ActionName.Resize&&n.resizeAxes&&(n.interactable.options.resize.square?("y"===n.resizeAxes?t.delta.x=t.delta.y:t.delta.y=t.delta.x,t.axes="xy"):(t.axes=n.resizeAxes,"x"===n.resizeAxes?t.delta.y=0:"y"===n.resizeAxes&&(t.delta.x=0)))}var fo={id:"actions/resize",before:["actions/drag"],install:function(t){var e=t.actions,n=t.browser,r=t.Interactable,o=t.defaults;fo.cursors=n.isIe9?{x:"e-resize",y:"s-resize",xy:"se-resize",top:"n-resize",left:"w-resize",bottom:"s-resize",right:"e-resize",topleft:"se-resize",bottomright:"se-resize",topright:"ne-resize",bottomleft:"ne-resize"}:{x:"ew-resize",y:"ns-resize",xy:"nwse-resize",top:"ns-resize",left:"ew-resize",bottom:"ns-resize",right:"ew-resize",topleft:"nwse-resize",bottomright:"nwse-resize",topright:"nesw-resize",bottomleft:"nesw-resize"},fo.defaultMargin=n.supportsTouch||n.supportsPointerEvent?20:10,r.prototype.resizable=function(e){return function(e,t,n){return ao.object(t)?(e.options.resize.enabled=!1!==t.enabled,e.setPerAction(no.ActionName.Resize,t),e.setOnEvents(no.ActionName.Resize,t),ao.string(t.axis)&&/^x$|^y$|^xy$/.test(t.axis)?e.options.resize.axis=t.axis:null===t.axis&&(e.options.resize.axis=n.defaults.actions.resize.axis),ao.bool(t.preserveAspectRatio)?e.options.resize.preserveAspectRatio=t.preserveAspectRatio:ao.bool(t.square)&&(e.options.resize.square=t.square),e):ao.bool(t)?(e.options.resize.enabled=t,e):e.options.resize}(this,e,t)},e[no.ActionName.Resize]=fo,e.names.push(no.ActionName.Resize),ro.merge(e.eventTypes,["resizestart","resizemove","resizeinertiastart","resizeresume","resizeend"]),e.methodDict.resize="resizable",o.actions.resize=fo.defaults},listeners:{"interactions:new":function(e){e.interaction.resizeAxes="xy"},"interactions:action-start":function(e){!function(e){var t=e.iEvent,n=e.interaction;if("resize"===n.prepared.name&&n.prepared.edges){var r=n.rect;n._rects={start:(0,io.default)({},r),corrected:(0,io.default)({},r),previous:(0,io.default)({},r),delta:{left:0,right:0,width:0,top:0,bottom:0,height:0}},t.edges=n.prepared.edges,t.rect=n._rects.corrected,t.deltaRect=n._rects.delta}}(e),co(e)},"interactions:action-move":function(e){!function(e){var t=e.iEvent,n=e.interaction;if("resize"===n.prepared.name&&n.prepared.edges){var r=n.interactable.options.resize.invert,o="reposition"===r||"negate"===r,i=n.rect,a=n._rects,u=a.start,s=a.corrected,l=a.delta,c=a.previous;if((0,io.default)(c,s),o){if((0,io.default)(s,i),"reposition"===r){if(s.top>s.bottom){var f=s.top;s.top=s.bottom,s.bottom=f}if(s.left>s.right){var p=s.left;s.left=s.right,s.right=p}}}else s.top=Math.min(i.top,u.bottom),s.bottom=Math.max(i.bottom,u.top),s.left=Math.min(i.left,u.right),s.right=Math.max(i.right,u.left);for(var d in s.width=s.right-s.left,s.height=s.bottom-s.top,s)l[d]=s[d]-c[d];t.edges=n.prepared.edges,t.rect=s,t.deltaRect=l}}(e),co(e)},"interactions:action-end":function(e){var t=e.iEvent,n=e.interaction;"resize"===n.prepared.name&&n.prepared.edges&&(t.edges=n.prepared.edges,t.rect=n._rects.corrected,t.deltaRect=n._rects.delta)},"auto-start:check":function(e){var t=e.interaction,n=e.interactable,r=e.element,o=e.rect,i=e.buttons;if(o){var a=(0,io.default)({},t.coords.cur.page),u=n.options.resize;if(u&&u.enabled&&(!t.pointerIsDown||!/mouse|pointer/.test(t.pointerType)||0!=(i&u.mouseButtons))){if(ao.object(u.edges)){var s={left:!1,right:!1,top:!1,bottom:!1};for(var l in s)s[l]=lo(l,u.edges[l],a,t._latestPointer.eventTarget,r,o,u.margin||fo.defaultMargin);s.left=s.left&&!s.right,s.top=s.top&&!s.bottom,(s.left||s.right||s.top||s.bottom)&&(e.action={name:no.ActionName.Resize,edges:s})}else{var c="y"!==u.axis&&a.x>o.right-fo.defaultMargin,f="x"!==u.axis&&a.y>o.bottom-fo.defaultMargin;(c||f)&&(e.action={name:"resize",axes:(c?"x":"")+(f?"y":"")})}return!e.action&&void 0}}}},defaults:{square:!(no.ActionName.Resize="resize"),preserveAspectRatio:!1,axis:"xy",margin:NaN,edges:null,invert:"none"},cursors:null,getCursor:function(e){var t=e.edges,n=e.axis,r=e.name,o=fo.cursors,i=null;if(n)i=o[r+n];else if(t){for(var a="",u=["top","bottom","left","right"],s=0;s<u.length;s++){var l=u[s];t[l]&&(a+=l)}i=o[a]}return i},defaultMargin:null},po=fo;Jr.default=po;var vo={};Object.defineProperty(vo,"__esModule",{value:!0}),vo.install=function(e){e.usePlugin(go.default),e.usePlugin(ho.default),e.usePlugin(yo.default),e.usePlugin(mo.default)},Object.defineProperty(vo,"drag",{enumerable:!0,get:function(){return yo.default}}),Object.defineProperty(vo,"drop",{enumerable:!0,get:function(){return mo.default}}),Object.defineProperty(vo,"gesture",{enumerable:!0,get:function(){return go.default}}),Object.defineProperty(vo,"resize",{enumerable:!0,get:function(){return ho.default}}),vo.id=void 0;var yo=bo(or),mo=bo(Mr),go=bo(qr),ho=bo(Jr);function bo(e){return e&&e.__esModule?e:{default:e}}vo.id="actions";var Oo={};function wo(e){return(wo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(Oo,"__esModule",{value:!0}),Oo.getContainer=ko,Oo.getScroll=Do,Oo.getScrollSize=function(e){return xo.window(e)&&(e=window.document.body),{x:e.scrollWidth,y:e.scrollHeight}},Oo.getScrollSizeDelta=function(e,t){var n=e.interaction,r=e.element,o=n&&n.interactable.options[n.prepared.name].autoScroll;if(!o||!o.enabled)return t(),{x:0,y:0};var i=ko(o.container,n.interactable,r),a=Do(i);t();var u=Do(i);return{x:u.x-a.x,y:u.y-a.y}},Oo.default=void 0;var Po,_o=Mo(C),xo=Mo(y),So=(Po=ut)&&Po.__esModule?Po:{default:Po};function jo(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return jo=function(){return e},e}function Mo(e){if(e&&e.__esModule)return e;if(null===e||"object"!==wo(e)&&"function"!=typeof e)return{default:e};var t=jo();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}var Eo={defaults:{enabled:!1,margin:60,container:null,speed:300},now:Date.now,interaction:null,i:0,x:0,y:0,isScrolling:!1,prevTime:0,margin:0,speed:0,start:function(e){Eo.isScrolling=!0,So.default.cancel(Eo.i),(e.autoScroll=Eo).interaction=e,Eo.prevTime=Eo.now(),Eo.i=So.default.request(Eo.scroll)},stop:function(){Eo.isScrolling=!1,Eo.interaction&&(Eo.interaction.autoScroll=null),So.default.cancel(Eo.i)},scroll:function(){var e=Eo.interaction,t=e.interactable,n=e.element,r=e.prepared.name,o=t.options[r].autoScroll,i=ko(o.container,t,n),a=Eo.now(),u=(a-Eo.prevTime)/1e3,s=o.speed*u;if(1<=s){var l={x:Eo.x*s,y:Eo.y*s};if(l.x||l.y){var c=Do(i);xo.window(i)?i.scrollBy(l.x,l.y):i&&(i.scrollLeft+=l.x,i.scrollTop+=l.y);var f=Do(i),p={x:f.x-c.x,y:f.y-c.y};(p.x||p.y)&&t.fire({type:"autoscroll",target:n,interactable:t,delta:p,interaction:e,container:i})}Eo.prevTime=a}Eo.isScrolling&&(So.default.cancel(Eo.i),Eo.i=So.default.request(Eo.scroll))},check:function(e,t){var n=e.options;return n[t].autoScroll&&n[t].autoScroll.enabled},onInteractionMove:function(e){var t=e.interaction,n=e.pointer;if(t.interacting()&&Eo.check(t.interactable,t.prepared.name))if(t.simulation)Eo.x=Eo.y=0;else{var r,o,i,a,u=t.interactable,s=t.element,l=t.prepared.name,c=u.options[l].autoScroll,f=ko(c.container,u,s);if(xo.window(f))a=n.clientX<Eo.margin,r=n.clientY<Eo.margin,o=n.clientX>f.innerWidth-Eo.margin,i=n.clientY>f.innerHeight-Eo.margin;else{var p=_o.getElementClientRect(f);a=n.clientX<p.left+Eo.margin,r=n.clientY<p.top+Eo.margin,o=n.clientX>p.right-Eo.margin,i=n.clientY>p.bottom-Eo.margin}Eo.x=o?1:a?-1:0,Eo.y=i?1:r?-1:0,Eo.isScrolling||(Eo.margin=c.margin,Eo.speed=c.speed,Eo.start(t))}}};function ko(e,t,n){return(xo.string(e)?(0,ge.getStringOptionResult)(e,t,n):e)||(0,s.getWindow)(n)}function Do(e){return xo.window(e)&&(e=window.document.body),{x:e.scrollLeft,y:e.scrollTop}}var To={id:"auto-scroll",install:function(e){var t=e.defaults,n=e.actions;(e.autoScroll=Eo).now=function(){return e.now()},n.eventTypes.push("autoscroll"),t.perAction.autoScroll=Eo.defaults},listeners:{"interactions:new":function(e){e.interaction.autoScroll=null},"interactions:destroy":function(e){e.interaction.autoScroll=null,Eo.stop(),Eo.interaction&&(Eo.interaction=null)},"interactions:stop":Eo.stop,"interactions:action-move":function(e){return Eo.onInteractionMove(e)}}};Oo.default=To;var Io={};function Ao(e){return(Ao="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(Io,"__esModule",{value:!0}),Io.default=void 0;var zo=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Ao(e)&&"function"!=typeof e)return{default:e};var t=function Co(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(y);function Ro(e){return zo.bool(e)?(this.options.styleCursor=e,this):null===e?(delete this.options.styleCursor,this):this.options.styleCursor}function Wo(e){return zo.func(e)?(this.options.actionChecker=e,this):null===e?(delete this.options.actionChecker,this):this.options.actionChecker}var Xo={id:"auto-start/interactableMethods",install:function(d){var e=d.Interactable;e.prototype.getAction=function(e,t,n,r){var o,i,a,u,s,l,f,p=(i=t,a=n,u=r,s=d,l=(o=this).getRect(u),f={action:null,interactable:o,interaction:a,element:u,rect:l,buttons:i.buttons||{0:1,1:4,3:8,4:16}[i.button]},s.fire("auto-start:check",f),f.action);return this.options.actionChecker?this.options.actionChecker(e,t,p,this,r,n):p},e.prototype.ignoreFrom=(0,pt.warnOnce)((function(e){return this._backCompatOption("ignoreFrom",e)}),"Interactable.ignoreFrom() has been deprecated. Use Interactble.draggable({ignoreFrom: newValue})."),e.prototype.allowFrom=(0,pt.warnOnce)((function(e){return this._backCompatOption("allowFrom",e)}),"Interactable.allowFrom() has been deprecated. Use Interactble.draggable({allowFrom: newValue})."),e.prototype.actionChecker=Wo,e.prototype.styleCursor=Ro}};Io.default=Xo;var No={};function Yo(e){return(Yo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(No,"__esModule",{value:!0}),No.default=void 0;var Fo,Lo=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Yo(e)&&"function"!=typeof e)return{default:e};var t=function Vo(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(pt),qo=(Fo=Io)&&Fo.__esModule?Fo:{default:Fo};function Go(e,t,n,r,o){return t.testIgnoreAllow(t.options[e.name],n,r)&&t.options[e.name].enabled&&Ko(t,n,e,o)?e:null}function Uo(e,t,n,r,o,i,a){for(var u=0,s=r.length;u<s;u++){var l=r[u],c=o[u],f=l.getAction(t,n,e,c);if(f){var p=Go(f,l,c,i,a);if(p)return{action:p,interactable:l,element:c}}}return{action:null,interactable:null,element:null}}function Bo(e,t,n,r,o){var i=[],a=[],u=r;function s(e){i.push(e),a.push(u)}for(;Lo.is.element(u);){i=[],a=[],o.interactables.forEachMatch(u,s);var l=Uo(e,t,n,i,a,r,o);if(l.action&&!l.interactable.options[l.action.name].manualStart)return l;u=Lo.dom.parentNode(u)}return{action:null,interactable:null,element:null}}function Ho(e,t,n){var r=t.action,o=t.interactable,i=t.element;r=r||{name:null},e.interactable=o,e.element=i,Lo.copyAction(e.prepared,r),e.rect=o&&r.name?o.getRect(i):null,Zo(e,n),n.fire("autoStart:prepared",{interaction:e})}function Ko(e,t,n,r){var o=e.options,i=o[n.name].max,a=o[n.name].maxPerElement,u=r.autoStart.maxInteractions,s=0,l=0,c=0;if(!(i&&a&&u))return!1;for(var f=0;f<r.interactions.list.length;f++){var p=r.interactions.list[f],d=p.prepared.name;if(p.interacting()){if(u<=++s)return!1;if(p.interactable===e){if(i<=(l+=d===n.name?1:0))return!1;if(p.element===t&&(c++,d===n.name&&a<=c))return!1}}}return 0<u}function $o(e,t){return Lo.is.number(e)?(t.autoStart.maxInteractions=e,this):t.autoStart.maxInteractions}function Qo(e,t,n){var r=n.autoStart.cursorElement;r&&r!==e&&(r.style.cursor=""),e.ownerDocument.documentElement.style.cursor=t,e.style.cursor=t,n.autoStart.cursorElement=t?e:null}function Zo(e,t){var n=e.interactable,r=e.element,o=e.prepared;if("mouse"===e.pointerType&&n&&n.options.styleCursor){var i="";if(o.name){var a=n.options[o.name].cursorChecker;i=Lo.is.func(a)?a(o,n,r,e._interacting):t.actions[o.name].getCursor(o)}Qo(e.element,i||"",t)}else t.autoStart.cursorElement&&Qo(t.autoStart.cursorElement,"",t)}var Jo={id:"auto-start/base",before:["actions","action/drag","actions/resize","actions/gesture"],install:function(t){var e=t.interact,n=t.defaults;t.usePlugin(qo.default),n.base.actionChecker=null,n.base.styleCursor=!0,Lo.extend(n.perAction,{manualStart:!1,max:1/0,maxPerElement:1,allowFrom:null,ignoreFrom:null,mouseButtons:1}),e.maxInteractions=function(e){return $o(e,t)},t.autoStart={maxInteractions:1/0,withinInteractionLimit:Ko,cursorElement:null}},listeners:{"interactions:down":function(e,t){var n=e.interaction,r=e.pointer,o=e.event,i=e.eventTarget;n.interacting()||Ho(n,Bo(n,r,o,i,t),t)},"interactions:move":function(e,t){var n,r,o,i,a,u;r=t,o=(n=e).interaction,i=n.pointer,a=n.event,u=n.eventTarget,"mouse"!==o.pointerType||o.pointerIsDown||o.interacting()||Ho(o,Bo(o,i,a,u,r),r),function(e,t){var n=e.interaction;if(n.pointerIsDown&&!n.interacting()&&n.pointerWasMoved&&n.prepared.name){t.fire("autoStart:before-start",e);var r=n.interactable,o=n.prepared.name;o&&r&&(r.options[o].manualStart||!Ko(r,n.element,n.prepared,t)?n.stop():(n.start(n.prepared,r,n.element),Zo(n,t)))}}(e,t)},"interactions:stop":function(e,t){var n=e.interaction,r=n.interactable;r&&r.options.styleCursor&&Qo(n.element,"",t)}},maxInteractions:$o,withinInteractionLimit:Ko,validateAction:Go};No.default=Jo;var ei={};function ti(e){return(ti="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(ei,"__esModule",{value:!0}),ei.default=void 0;var ni,ri=O({}),oi=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==ti(e)&&"function"!=typeof e)return{default:e};var t=function ai(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(y),ii=(ni=No)&&ni.__esModule?ni:{default:ni},ui={id:"auto-start/dragAxis",listeners:{"autoStart:before-start":function(e,r){var o=e.interaction,i=e.eventTarget,t=e.dx,n=e.dy;if("drag"===o.prepared.name){var a=Math.abs(t),u=Math.abs(n),s=o.interactable.options.drag,l=s.startAxis,c=u<a?"x":a<u?"y":"xy";if(o.prepared.axis="start"===s.lockAxis?c[0]:s.lockAxis,"xy"!=c&&"xy"!==l&&l!==c){function f(e){if(e!==o.interactable){var t=o.interactable.options.drag;if(!t.manualStart&&e.testIgnoreAllow(t,p,i)){var n=e.getAction(o.downPointer,o.downEvent,o,p);if(n&&n.name===ri.ActionName.Drag&&function(e,t){if(!t)return!1;var n=t.options[ri.ActionName.Drag].startAxis;return"xy"===e||"xy"===n||n===e}(c,e)&&ii.default.validateAction(n,e,p,i,r))return e}}}o.prepared.name=null;for(var p=i;oi.element(p);){var d=r.interactables.forEachMatch(p,f);if(d){o.prepared.name=ri.ActionName.Drag,o.interactable=d,o.element=p;break}p=(0,C.parentNode)(p)}}}}}};ei.default=ui;var si={};Object.defineProperty(si,"__esModule",{value:!0}),si.default=void 0;var li,ci=(li=No)&&li.__esModule?li:{default:li};function fi(e){var t=e.prepared&&e.prepared.name;if(!t)return null;var n=e.interactable.options;return n[t].hold||n[t].delay}var pi={id:"auto-start/hold",install:function(e){var t=e.defaults;e.usePlugin(ci.default),t.perAction.hold=0,t.perAction.delay=0},listeners:{"interactions:new":function(e){e.interaction.autoStartHoldTimer=null},"autoStart:prepared":function(e){var t=e.interaction,n=fi(t);0<n&&(t.autoStartHoldTimer=setTimeout((function(){t.start(t.prepared,t.interactable,t.element)}),n))},"interactions:move":function(e){var t=e.interaction,n=e.duplicate;t.pointerWasMoved&&!n&&clearTimeout(t.autoStartHoldTimer)},"autoStart:before-start":function(e){var t=e.interaction;0<fi(t)&&(t.prepared.name=null)}},getHoldDuration:fi};si.default=pi;var di={};Object.defineProperty(di,"__esModule",{value:!0}),di.install=function(e){e.usePlugin(vi.default),e.usePlugin(mi.default),e.usePlugin(yi.default)},Object.defineProperty(di,"autoStart",{enumerable:!0,get:function(){return vi.default}}),Object.defineProperty(di,"dragAxis",{enumerable:!0,get:function(){return yi.default}}),Object.defineProperty(di,"hold",{enumerable:!0,get:function(){return mi.default}}),di.id=void 0;var vi=gi(No),yi=gi(ei),mi=gi(si);function gi(e){return e&&e.__esModule?e:{default:e}}di.id="auto-start";var hi={};function bi(e){return(bi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(hi,"__esModule",{value:!0}),hi.install=ji,hi.default=void 0;var Oi,wi=(Oi=De)&&Oi.__esModule?Oi:{default:Oi},Pi=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==bi(e)&&"function"!=typeof e)return{default:e};var t=function _i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(y);function xi(e){return/^(always|never|auto)$/.test(e)?(this.options.preventDefault=e,this):Pi.bool(e)?(this.options.preventDefault=e?"always":"never",this):this.options.preventDefault}function Si(e){var t=e.interaction,n=e.event;t.interactable&&t.interactable.checkAndPreventDefault(n)}function ji(r){var e=r.Interactable;e.prototype.preventDefault=xi,e.prototype.checkAndPreventDefault=function(e){return function(e,t,n){var r=e.options.preventDefault;if("never"!==r)if("always"!==r){if(wi.default.supportsPassive&&/^touch(start|move)$/.test(n.type)){var o=(0,s.getWindow)(n.target).document,i=t.getDocOptions(o);if(!i||!i.events||!1!==i.events.passive)return}/^(mouse|pointer|touch)*(down|start)/i.test(n.type)||Pi.element(n.target)&&(0,C.matchesSelector)(n.target,"input,select,textarea,[contenteditable=true],[contenteditable=true] *")||n.preventDefault()}else n.preventDefault()}(this,r,e)},r.interactions.docEvents.push({type:"dragstart",listener:function(e){for(var t=0;t<r.interactions.list.length;t++){var n=r.interactions.list[t];if(n.element&&(n.element===e.target||(0,C.nodeContains)(n.element,e.target)))return void n.interactable.checkAndPreventDefault(e)}}})}var Mi={id:"core/interactablePreventDefault",install:ji,listeners:["down","move","up","cancel"].reduce((function(e,t){return e["interactions:".concat(t)]=Si,e}),{})};hi.default=Mi;var Di,Ti,Ei={};function ki(e){return(ki="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(Ei,"__esModule",{value:!0}),Ei.default=void 0,function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==ki(e)&&"function"!=typeof e)return{default:e};var t=function Ci(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n)}(y),(Ti=Di=Di||{}).touchAction="touchAction",Ti.boxSizing="boxSizing",Ti.noListeners="noListeners";var Yi={id:"dev-tools",install:function(){}};Ei.default=Yi;var Fi={};function Li(e){return(Li="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(Fi,"__esModule",{value:!0}),Fi.startAll=Ki,Fi.setAll=$i,Fi.prepareStates=Ji,Fi.setCoords=ea,Fi.restoreCoords=ta,Fi.shouldDo=na,Fi.getRectOffset=ra,Fi.makeModifier=function(e,r){function t(e){var t=e||{};for(var n in t.enabled=!1!==t.enabled,o)n in t||(t[n]=o[n]);return{options:t,methods:i,name:r}}var o=e.defaults,i={start:e.start,set:e.set,beforeEnd:e.beforeEnd,stop:e.stop};return r&&"string"==typeof r&&(t._defaults=o,t._methods=i),t},Fi.default=void 0;var qi,Vi=(qi=me)&&qi.__esModule?qi:{default:qi},Gi=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Li(e)&&"function"!=typeof e)return{default:e};var t=function Ui(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(ge);function Bi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Hi(e,t,n,r){var o=e.interaction,i=e.phase,a=o.interactable,u=o.element,s=o.edges,l=Ji(function(e){var n=e.interactable.options[e.prepared.name],t=n.modifiers;return t&&t.length?t.filter((function(e){return!e.options||!1!==e.options.enabled})):["snap","snapSize","snapEdges","restrict","restrictEdges","restrictSize"].map((function(e){var t=n[e];return t&&t.enabled&&{options:t,methods:t._methods}})).filter((function(e){return!!e}))}(o)),c=(0,Vi.default)({},o.rect),f=ra(c,t);o.modifiers.startOffset=f,o.modifiers.startDelta={x:0,y:0};var p={interaction:o,interactable:a,element:u,pageCoords:t,phase:i,rect:c,edges:s,startOffset:f,states:l,preEnd:!1,requireEndOnly:!1,prevCoords:n,prevRect:r};return o.modifiers.states=l,o.modifiers.result=null,Ki(p),o.modifiers.result=$i(p)}function Ki(e){for(var t=e.states,n=0;n<t.length;n++){var r=t[n];r.methods.start&&(e.state=r).methods.start(e)}e.interaction.edges=e.edges}function $i(e){var t=e.prevCoords,n=e.prevRect,r=e.phase,o=e.preEnd,i=e.requireEndOnly,a=e.states,u=e.rect;e.coords=(0,Vi.default)({},e.pageCoords),e.rect=(0,Vi.default)({},u);for(var s={delta:{x:0,y:0},rectDelta:{left:0,right:0,top:0,bottom:0},coords:e.coords,rect:e.rect,eventProps:[],changed:!0},l=e.edges||{left:!0,right:!0,top:!0,bottom:!0},c=0;c<a.length;c++){var f=a[c],p=f.options,d=(0,Vi.default)({},e.coords),v=null;f.methods.set&&na(p,o,i,r)&&(v=(e.state=f).methods.set(e),Gi.addEdges(l,e.rect,{x:e.coords.x-d.x,y:e.coords.y-d.y})),s.eventProps.push(v)}s.delta.x=e.coords.x-e.pageCoords.x,s.delta.y=e.coords.y-e.pageCoords.y,s.rectDelta.left=e.rect.left-u.left,s.rectDelta.right=e.rect.right-u.right,s.rectDelta.top=e.rect.top-u.top,s.rectDelta.bottom=e.rect.bottom-u.bottom;var y=!n||s.rect.left!==n.left||s.rect.right!==n.right||s.rect.top!==n.top||s.rect.bottom!==n.bottom;return s.changed=!t||t.x!==s.coords.x||t.y!==s.coords.y||y,s}function Qi(e){var t=e.interaction,n=e.phase,r=e.preEnd,o=e.skipModifiers,i=t.interactable,a=t.element,u=o?t.modifiers.states.slice(o):t.modifiers.states,s=e.prevCoords||(t.modifiers.result?t.modifiers.result.coords:null),l=e.prevRect||(t.modifiers.result?t.modifiers.result.rect:null),c=$i({interaction:t,interactable:i,element:a,preEnd:r,phase:n,pageCoords:e.modifiedCoords||t.coords.cur.page,prevCoords:s,rect:t.rect,edges:t.edges,prevRect:l,states:u,requireEndOnly:!1});if(!(t.modifiers.result=c).changed&&t.interacting())return!1;if(e.modifiedCoords){var f=t.coords.cur.page,p=e.modifiedCoords.x-f.x,d=e.modifiedCoords.y-f.y;c.coords.x+=p,c.coords.y+=d,c.delta.x+=p,c.delta.y+=d}ea(e)}function Zi(e){var t=e.interaction,n=t.modifiers.states;if(n&&n.length){for(var r=(0,Vi.default)({states:n,interactable:t.interactable,element:t.element,rect:null},e),o=0;o<n.length;o++){var i=n[o];(r.state=i).methods.stop&&i.methods.stop(r)}e.interaction.modifiers.states=null,e.interaction.modifiers.endResult=null}}function Ji(e){for(var t=[],n=0;n<e.length;n++){var r=e[n],o=r.options,i=r.methods,a=r.name;o&&!1===o.enabled||t.push({options:o,methods:i,index:n,name:a})}return t}function ea(e){var t=e.interaction,n=e.phase,r=t.coords.cur,o=t.coords.start,i=t.modifiers,a=i.result,u=i.startDelta,s=a.delta;"start"===n&&(0,Vi.default)(t.modifiers.startDelta,a.delta);for(var l=0;l<[[o,u],[r,s]].length;l++){var c=Bi([[o,u],[r,s]][l],2),f=c[0],p=c[1];f.page.x+=p.x,f.page.y+=p.y,f.client.x+=p.x,f.client.y+=p.y}var d=t.modifiers.result.rectDelta,v=e.rect||t.rect;v.left+=d.left,v.right+=d.right,v.top+=d.top,v.bottom+=d.bottom,v.width=v.right-v.left,v.height=v.bottom-v.top}function ta(e){var t=e.interaction,n=t.coords,r=t.rect,o=t.modifiers;if(o.result){for(var i=o.startDelta,a=o.result,u=a.delta,s=a.rectDelta,l=[[n.start,i],[n.cur,u]],c=0;c<l.length;c++){var f=Bi(l[c],2),p=f[0],d=f[1];p.page.x-=d.x,p.page.y-=d.y,p.client.x-=d.x,p.client.y-=d.y}r.left-=s.left,r.right-=s.right,r.top-=s.top,r.bottom-=s.bottom}}function na(e,t,n,r){return e?!1!==e.enabled&&(t||!e.endOnly)&&(!n||e.endOnly||e.alwaysOnEnd)&&(e.setStart||"start"!==r):!n}function ra(e,t){return e?{left:t.x-e.left,top:t.y-e.top,right:e.right-t.x,bottom:e.bottom-t.y}:{left:0,top:0,right:0,bottom:0}}function oa(e){var t=e.iEvent,n=e.interaction.modifiers.result;n&&(t.modifiers=n.eventProps)}var ia={id:"modifiers/base",install:function(e){e.defaults.perAction.modifiers=[]},listeners:{"interactions:new":function(e){e.interaction.modifiers={startOffset:{left:0,right:0,top:0,bottom:0},states:null,result:null,endResult:null,startDelta:null}},"interactions:before-action-start":function(e){Hi(e,e.interaction.coords.start.page,null,null),ea(e)},"interactions:after-action-start":ta,"interactions:before-action-move":Qi,"interactions:after-action-move":ta,"interactions:action-resume":function(e){var t=e.interaction.modifiers.result,n=t.coords,r=t.rect;Zi(e),Hi(e,e.interaction.coords.cur.page,n,r),Qi(e)},"interactions:before-action-end":function(e){var t=e.interaction,n=e.event,r=e.noPreEnd,o=t.modifiers.states;if(!r&&o&&o.length)for(var i=!1,a=0;a<o.length;a++){var u=o[a],s=(e.state=u).options,l=u.methods,c=l.beforeEnd&&l.beforeEnd(e);if(c)return t.modifiers.endResult=c,!1;!i&&na(s,!0,!0)&&(t.move({event:n,preEnd:!0}),i=!0)}},"interactions:action-start":oa,"interactions:action-move":oa,"interactions:action-end":oa,"interactions:stop":Zi},before:["actions","action/drag","actions/resize","actions/gesture"]};Fi.default=ia;var aa={};function ua(e){return(ua="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(aa,"__esModule",{value:!0}),aa.default=void 0;var sa,la=da(Fi),ca=da(pt),fa=(sa=ut)&&sa.__esModule?sa:{default:sa};function pa(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return pa=function(){return e},e}function da(e){if(e&&e.__esModule)return e;if(null===e||"object"!==ua(e)&&"function"!=typeof e)return{default:e};var t=pa();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}function va(e,t){var n=ha(e),r=n.resistance,o=-Math.log(n.endSpeed/t.v0)/r;t.x0=e.prevEvent.page.x,t.y0=e.prevEvent.page.y,t.t0=t.startEvent.timeStamp/1e3,t.sx=t.sy=0,t.modifiedXe=t.xe=(t.vx0-o)/r,t.modifiedYe=t.ye=(t.vy0-o)/r,t.te=o,t.lambda_v0=r/t.v0,t.one_ve_v0=1-n.endSpeed/t.v0}function ya(e){ga(e),ca.pointer.setCoordDeltas(e.coords.delta,e.coords.prev,e.coords.cur),ca.pointer.setCoordVelocity(e.coords.velocity,e.coords.delta);var t=e.inertia,n=ha(e).resistance,r=e._now()/1e3-t.t0;if(r<t.te){var o=1-(Math.exp(-n*r)-t.lambda_v0)/t.one_ve_v0;if(t.modifiedXe===t.xe&&t.modifiedYe===t.ye)t.sx=t.xe*o,t.sy=t.ye*o;else{var i=ca.getQuadraticCurvePoint(0,0,t.xe,t.ye,t.modifiedXe,t.modifiedYe,o);t.sx=i.x,t.sy=i.y}e.move({event:t.startEvent}),t.timeout=fa.default.request((function(){return ya(e)}))}else t.sx=t.modifiedXe,t.sy=t.modifiedYe,e.move({event:t.startEvent}),e.end(t.startEvent),t.active=!1,e.simulation=null;ca.pointer.copyCoords(e.coords.prev,e.coords.cur)}function ma(e){ga(e);var t=e.inertia,n=e._now()-t.t0,r=ha(e).smoothEndDuration;n<r?(t.sx=ca.easeOutQuad(n,0,t.xe,r),t.sy=ca.easeOutQuad(n,0,t.ye,r),e.move({event:t.startEvent}),t.timeout=fa.default.request((function(){return ma(e)}))):(t.sx=t.xe,t.sy=t.ye,e.move({event:t.startEvent}),e.end(t.startEvent),t.smoothEnd=t.active=!1,e.simulation=null)}function ga(e){var t=e.inertia;if(t.active){var n=t.upCoords.page,r=t.upCoords.client;ca.pointer.setCoords(e.coords.cur,[{pageX:n.x+t.sx,pageY:n.y+t.sy,clientX:r.x+t.sx,clientY:r.y+t.sy}],e._now())}}function ha(e){var t=e.interactable,n=e.prepared;return t&&t.options&&n.name&&t.options[n.name].inertia}Tn.EventPhase.Resume="resume",Tn.EventPhase.InertiaStart="inertiastart";var ba={id:"inertia",install:function(e){var t=e.defaults;e.usePlugin(la.default),t.perAction.inertia={enabled:!1,resistance:10,minSpeed:100,endSpeed:10,allowResume:!0,smoothEndDuration:300}},listeners:{"interactions:new":function(e){e.interaction.inertia={active:!1,smoothEnd:!1,allowResume:!1,upCoords:{},timeout:null}},"interactions:before-action-end":function(e,t){var n=e.interaction,r=e.event,o=e.noPreEnd,i=n.inertia;if(!n.interacting()||n.simulation&&n.simulation.active||o)return null;var a,u=ha(n),s=n._now(),l=n.coords.velocity.client,c=ca.hypot(l.x,l.y),f=!1,p=u&&u.enabled&&"gesture"!==n.prepared.name&&r!==i.startEvent,d=p&&s-n.coords.cur.timeStamp<50&&c>u.minSpeed&&c>u.endSpeed,v={interaction:n,interactable:n.interactable,element:n.element,rect:n.rect,edges:n.edges,pageCoords:n.coords.cur.page,states:p&&n.modifiers.states.map((function(e){return ca.extend({},e)})),preEnd:!0,prevCoords:null,prevRect:null,requireEndOnly:null,phase:Tn.EventPhase.InertiaStart};return p&&!d&&(v.prevCoords=n.modifiers.result.coords,v.prevRect=n.modifiers.result.rect,v.requireEndOnly=!1,f=(a=la.setAll(v)).changed),d||f?(ca.pointer.copyCoords(i.upCoords,n.coords.cur),la.setCoords(v),n.pointers[0].pointer=i.startEvent=new t.InteractEvent(n,r,n.prepared.name,Tn.EventPhase.InertiaStart,n.element),la.restoreCoords(v),i.t0=s,i.active=!0,i.allowResume=u.allowResume,n.simulation=i,n.interactable.fire(i.startEvent),d?(i.vx0=n.coords.velocity.client.x,i.vy0=n.coords.velocity.client.y,i.v0=c,va(n,i),ca.extend(v.pageCoords,n.coords.cur.page),v.pageCoords.x+=i.xe,v.pageCoords.y+=i.ye,v.prevCoords=null,v.prevRect=null,v.requireEndOnly=!0,a=la.setAll(v),i.modifiedXe+=a.delta.x,i.modifiedYe+=a.delta.y,i.timeout=fa.default.request((function(){return ya(n)}))):(i.smoothEnd=!0,i.xe=a.delta.x,i.ye=a.delta.y,i.sx=i.sy=0,i.timeout=fa.default.request((function(){return ma(n)}))),!1):null},"interactions:down":function(e,t){var n=e.interaction,r=e.event,o=e.pointer,i=e.eventTarget,a=n.inertia;if(a.active)for(var u=i;ca.is.element(u);){if(u===n.element){fa.default.cancel(a.timeout),a.active=!1,n.simulation=null,n.updatePointer(o,r,i,!0),ca.pointer.setCoords(n.coords.cur,n.pointers.map((function(e){return e.pointer})),n._now());var s={interaction:n,phase:Tn.EventPhase.Resume};t.fire("interactions:action-resume",s);var l=new t.InteractEvent(n,r,n.prepared.name,Tn.EventPhase.Resume,n.element);n._fireEvent(l),ca.pointer.copyCoords(n.coords.prev,n.coords.cur);break}u=ca.dom.parentNode(u)}},"interactions:stop":function(e){var t=e.interaction,n=t.inertia;n.active&&(fa.default.cancel(n.timeout),n.active=!1,t.simulation=null)}},before:["modifiers/base"],calcInertia:va,inertiaTick:ya,smothEndTick:ma,updateInertiaCoords:ga};aa.default=ba;var Oa={};Object.defineProperty(Oa,"__esModule",{value:!0}),Oa.default=void 0;var wa,Pa=(wa=me)&&wa.__esModule?wa:{default:wa};function _a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function xa(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?_a(Object(n),!0).forEach((function(e){Sa(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):_a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Sa(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ja(e,t,n){var r=e.startCoords,o=e.edgeSign;t?n.y=r.y+(n.x-r.x)*o:n.x=r.x+(n.y-r.y)*o}function Ma(e,t,n,r){var o=e.startRect,i=e.startCoords,a=e.ratio,u=e.edgeSign;if(t){var s=r.width/a;n.y=i.y+(s-o.height)*u}else{var l=r.height*a;n.x=i.x+(l-o.width)*u}}var Ea={start:function(e){var t=e.state,n=e.rect,r=e.edges,o=e.pageCoords,i=t.options.ratio,a=t.options,u=a.equalDelta,s=a.modifiers;"preserve"===i&&(i=n.width/n.height),t.startCoords=(0,Pa.default)({},o),t.startRect=(0,Pa.default)({},n),t.ratio=i,t.equalDelta=u;var l=t.linkedEdges={top:r.top||r.left&&!r.bottom,left:r.left||r.top&&!r.right,bottom:r.bottom||r.right&&!r.top,right:r.right||r.bottom&&!r.left};if(t.xIsPrimaryAxis=!(!r.left&&!r.right),t.equalDelta)t.edgeSign=(l.left?1:-1)*(l.top?1:-1);else{var c=t.xIsPrimaryAxis?l.top:l.left;t.edgeSign=c?-1:1}if((0,Pa.default)(e.edges,l),s&&s.length)return t.subStates=(0,Fi.prepareStates)(s).map((function(e){return e.options=xa({},e.options),e})),(0,Fi.startAll)(xa({},e,{states:t.subStates}))},set:function(e){var t=e.state,n=e.rect,r=e.coords,o=(0,Pa.default)({},r),i=t.equalDelta?ja:Ma;if(i(t,t.xIsPrimaryAxis,r,n),!t.subStates)return null;var a=(0,Pa.default)({},n);(0,ge.addEdges)(t.linkedEdges,a,{x:r.x-o.x,y:r.y-o.y});var u=(0,Fi.setAll)(xa({},e,{rect:a,edges:t.linkedEdges,pageCoords:r,states:t.subStates,prevCoords:r,prevRect:a})),s=u.delta;return u.changed&&(i(t,Math.abs(s.x)>Math.abs(s.y),u.coords,u.rect),(0,Pa.default)(r,u.coords)),u.eventProps},defaults:{ratio:"preserve",equalDelta:!1,modifiers:[],enabled:!1}};Oa.default=Ea;var ka={};function Da(e){return(Da="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(ka,"__esModule",{value:!0}),ka.getRestrictionRect=Wa,ka.default=void 0;var Ta,Ia=(Ta=me)&&Ta.__esModule?Ta:{default:Ta},Aa=Ra(y),za=Ra(ge);function Ca(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return Ca=function(){return e},e}function Ra(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Da(e)&&"function"!=typeof e)return{default:e};var t=Ca();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}function Wa(e,t,n){return Aa.func(e)?za.resolveRectLike(e,t.interactable,t.element,[n.x,n.y,t]):za.resolveRectLike(e,t.interactable,t.element)}var Xa={start:function(e){var t=e.rect,n=e.startOffset,r=e.state,o=e.interaction,i=e.pageCoords,a=r.options,u=a.elementRect,s=(0,Ia.default)({left:0,top:0,right:0,bottom:0},a.offset||{});if(t&&u){var l=Wa(a.restriction,o,i);if(l){var c=l.right-l.left-t.width,f=l.bottom-l.top-t.height;c<0&&(s.left+=c,s.right+=c),f<0&&(s.top+=f,s.bottom+=f)}s.left+=n.left-t.width*u.left,s.top+=n.top-t.height*u.top,s.right+=n.right-t.width*(1-u.right),s.bottom+=n.bottom-t.height*(1-u.bottom)}r.offset=s},set:function(e){var t=e.coords,n=e.interaction,r=e.state,o=r.options,i=r.offset,a=Wa(o.restriction,n,t);if(a){var u=za.xywhToTlbr(a);t.x=Math.max(Math.min(u.right-i.right,t.x),u.left+i.left),t.y=Math.max(Math.min(u.bottom-i.bottom,t.y),u.top+i.top)}},defaults:{restriction:null,elementRect:null,offset:null,endOnly:!1,enabled:!1}};ka.default=Xa;var Na={};function Ya(e){return(Ya="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(Na,"__esModule",{value:!0}),Na.default=void 0;var Fa,La=(Fa=me)&&Fa.__esModule?Fa:{default:Fa},qa=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Ya(e)&&"function"!=typeof e)return{default:e};var t=function Va(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(ge),Ga={top:1/0,left:1/0,bottom:-1/0,right:-1/0},Ua={top:-1/0,left:-1/0,bottom:1/0,right:1/0};function Ba(e,t){for(var n=["top","left","bottom","right"],r=0;r<n.length;r++){var o=n[r];o in e||(e[o]=t[o])}return e}var Ha={noInner:Ga,noOuter:Ua,start:function(e){var t,n=e.interaction,r=e.startOffset,o=e.state,i=o.options;if(i){var a=(0,ka.getRestrictionRect)(i.offset,n,n.coords.start.page);t=qa.rectToXY(a)}t=t||{x:0,y:0},o.offset={top:t.y+r.top,left:t.x+r.left,bottom:t.y-r.bottom,right:t.x-r.right}},set:function(e){var t=e.coords,n=e.edges,r=e.interaction,o=e.state,i=o.offset,a=o.options;if(n){var u=(0,La.default)({},t),s=(0,ka.getRestrictionRect)(a.inner,r,u)||{},l=(0,ka.getRestrictionRect)(a.outer,r,u)||{};Ba(s,Ga),Ba(l,Ua),n.top?t.y=Math.min(Math.max(l.top+i.top,u.y),s.top+i.top):n.bottom&&(t.y=Math.max(Math.min(l.bottom+i.bottom,u.y),s.bottom+i.bottom)),n.left?t.x=Math.min(Math.max(l.left+i.left,u.x),s.left+i.left):n.right&&(t.x=Math.max(Math.min(l.right+i.right,u.x),s.right+i.right))}},defaults:{inner:null,outer:null,offset:null,endOnly:!1,enabled:!1}};Na.default=Ha;var Ka={};Object.defineProperty(Ka,"__esModule",{value:!0}),Ka.default=void 0;var $a=Za(me),Qa=Za(ka);function Za(e){return e&&e.__esModule?e:{default:e}}var Ja=(0,$a.default)({get elementRect(){return{top:0,left:0,bottom:1,right:1}},set elementRect(e){}},Qa.default.defaults),eu={start:Qa.default.start,set:Qa.default.set,defaults:Ja};Ka.default=eu;var tu={};function nu(e){return(nu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(tu,"__esModule",{value:!0}),tu.default=void 0;var ru=uu(me),ou=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==nu(e)&&"function"!=typeof e)return{default:e};var t=function au(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(ge),iu=uu(Na);function uu(e){return e&&e.__esModule?e:{default:e}}var su={width:-1/0,height:-1/0},lu={width:1/0,height:1/0},cu={start:function(e){return iu.default.start(e)},set:function(e){var t=e.interaction,n=e.state,r=e.rect,o=e.edges,i=n.options;if(o){var a=ou.tlbrToXywh((0,ka.getRestrictionRect)(i.min,t,e.coords))||su,u=ou.tlbrToXywh((0,ka.getRestrictionRect)(i.max,t,e.coords))||lu;n.options={endOnly:i.endOnly,inner:(0,ru.default)({},iu.default.noInner),outer:(0,ru.default)({},iu.default.noOuter)},o.top?(n.options.inner.top=r.bottom-a.height,n.options.outer.top=r.bottom-u.height):o.bottom&&(n.options.inner.bottom=r.top+a.height,n.options.outer.bottom=r.top+u.height),o.left?(n.options.inner.left=r.right-a.width,n.options.outer.left=r.right-u.width):o.right&&(n.options.inner.right=r.left+a.width,n.options.outer.right=r.left+u.width),iu.default.set(e),n.options=i}},defaults:{min:null,max:null,endOnly:!1,enabled:!1}};tu.default=cu;var fu={};function pu(e){return(pu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(fu,"__esModule",{value:!0}),fu.default=void 0;var du=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==pu(e)&&"function"!=typeof e)return{default:e};var t=function vu(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(pt),yu={start:function(e){var t,n,r,o=e.interaction,i=e.interactable,a=e.element,u=e.rect,s=e.state,l=e.startOffset,c=s.options,f=c.offsetWithOrigin?(n=(t=e).interaction.element,du.rect.rectToXY(du.rect.resolveRectLike(t.state.options.origin,null,null,[n]))||du.getOriginXY(t.interactable,n,t.interaction.prepared.name)):{x:0,y:0};if("startCoords"===c.offset)r={x:o.coords.start.page.x,y:o.coords.start.page.y};else{var p=du.rect.resolveRectLike(c.offset,i,a,[o]);(r=du.rect.rectToXY(p)||{x:0,y:0}).x+=f.x,r.y+=f.y}var d=c.relativePoints;s.offsets=u&&d&&d.length?d.map((function(e,t){return{index:t,relativePoint:e,x:l.left-u.width*e.x+r.x,y:l.top-u.height*e.y+r.y}})):[du.extend({index:0,relativePoint:null},r)]},set:function(e){var t=e.interaction,n=e.coords,r=e.state,o=r.options,i=r.offsets,a=du.getOriginXY(t.interactable,t.element,t.prepared.name),u=du.extend({},n),s=[];o.offsetWithOrigin||(u.x-=a.x,u.y-=a.y);for(var l=0;l<i.length;l++)for(var c=i[l],f=u.x-c.x,p=u.y-c.y,d=0,v=o.targets.length;d<v;d++){var m,y=o.targets[d];(m=du.is.func(y)?y(f,p,t,c,d):y)&&s.push({x:(du.is.number(m.x)?m.x:f)+c.x,y:(du.is.number(m.y)?m.y:p)+c.y,range:du.is.number(m.range)?m.range:o.range,source:y,index:d,offset:c})}for(var g={target:null,inRange:!1,distance:0,range:0,delta:{x:0,y:0}},h=0;h<s.length;h++){var b=s[h],O=b.range,w=b.x-u.x,P=b.y-u.y,_=du.hypot(w,P),x=_<=O;O===1/0&&g.inRange&&g.range!==1/0&&(x=!1),g.target&&!(x?g.inRange&&O!==1/0?_/O<g.distance/g.range:O===1/0&&g.range!==1/0||_<g.distance:!g.inRange&&_<g.distance)||(g.target=b,g.distance=_,g.range=O,g.inRange=x,g.delta.x=w,g.delta.y=P)}return g.inRange&&(n.x=g.target.x,n.y=g.target.y),r.closest=g},defaults:{range:1/0,targets:null,offset:null,offsetWithOrigin:!0,origin:null,relativePoints:null,endOnly:!1,enabled:!1}};fu.default=yu;var mu={};function gu(e){return(gu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(mu,"__esModule",{value:!0}),mu.default=void 0;var hu=Pu(me),bu=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==gu(e)&&"function"!=typeof e)return{default:e};var t=function wu(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(y),Ou=Pu(fu);function Pu(e){return e&&e.__esModule?e:{default:e}}function _u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var xu={start:function(e){var t=e.state,n=e.edges,r=t.options;if(!n)return null;e.state={options:{targets:null,relativePoints:[{x:n.left?0:1,y:n.top?0:1}],offset:r.offset||"self",origin:{x:0,y:0},range:r.range}},t.targetFields=t.targetFields||[["width","height"],["x","y"]],Ou.default.start(e),t.offsets=e.state.offsets,e.state=t},set:function(e){var t=e.interaction,n=e.state,r=e.coords,o=n.options,i=n.offsets,a={x:r.x-i[0].x,y:r.y-i[0].y};n.options=(0,hu.default)({},o),n.options.targets=[];for(var u=0;u<(o.targets||[]).length;u++){var s=(o.targets||[])[u],l=void 0;if(l=bu.func(s)?s(a.x,a.y,t):s){for(var c=0;c<n.targetFields.length;c++){var f=_u(n.targetFields[c],2),p=f[0],d=f[1];if(p in l||d in l){l.x=l[p],l.y=l[d];break}}n.options.targets.push(l)}}var v=Ou.default.set(e);return n.options=o,v},defaults:{range:1/0,targets:null,offset:null,endOnly:!1,enabled:!1}};mu.default=xu;var Su={};Object.defineProperty(Su,"__esModule",{value:!0}),Su.default=void 0;var ju=ku(xe),Mu=ku(me),Eu=ku(mu);function ku(e){return e&&e.__esModule?e:{default:e}}var Du={start:function(e){var t=e.edges;return t?(e.state.targetFields=e.state.targetFields||[[t.left?"left":"right",t.top?"top":"bottom"]],Eu.default.start(e)):null},set:Eu.default.set,defaults:(0,Mu.default)((0,ju.default)(Eu.default.defaults),{offset:{x:0,y:0}})};Su.default=Du;var Tu={};Object.defineProperty(Tu,"__esModule",{value:!0}),Tu.aspectRatio=Tu.restrictSize=Tu.restrictEdges=Tu.restrictRect=Tu.restrict=Tu.snapEdges=Tu.snapSize=Tu.snap=void 0;var Iu=Yu(Oa),Au=Yu(Na),zu=Yu(ka),Cu=Yu(Ka),Ru=Yu(tu),Wu=Yu(Su),Xu=Yu(fu),Nu=Yu(mu);function Yu(e){return e&&e.__esModule?e:{default:e}}var Fu=(0,Fi.makeModifier)(Xu.default,"snap");Tu.snap=Fu;var Lu=(0,Fi.makeModifier)(Nu.default,"snapSize");Tu.snapSize=Lu;var qu=(0,Fi.makeModifier)(Wu.default,"snapEdges");Tu.snapEdges=qu;var Vu=(0,Fi.makeModifier)(zu.default,"restrict");Tu.restrict=Vu;var Gu=(0,Fi.makeModifier)(Cu.default,"restrictRect");Tu.restrictRect=Gu;var Uu=(0,Fi.makeModifier)(Au.default,"restrictEdges");Tu.restrictEdges=Uu;var Bu=(0,Fi.makeModifier)(Ru.default,"restrictSize");Tu.restrictSize=Bu;var Hu=(0,Fi.makeModifier)(Iu.default,"aspectRatio");Tu.aspectRatio=Hu;var Ku={};Object.defineProperty(Ku,"__esModule",{value:!0}),Ku.PointerEvent=Ku.default=void 0;var $u,Qu=($u=Sn)&&$u.__esModule?$u:{default:$u},Zu=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==es(e)&&"function"!=typeof e)return{default:e};var t=function Ju(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(J);function es(e){return(es="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ns(e){return(ns=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function rs(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function os(e,t){return(os=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function is(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var as=function(){function f(e,t,n,r,o,i){var a,s;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f),a=!(s=ns(f).call(this,o))||"object"!==es(s)&&"function"!=typeof s?rs(this):s,is(rs(a),"type",void 0),is(rs(a),"originalEvent",void 0),is(rs(a),"pointerId",void 0),is(rs(a),"pointerType",void 0),is(rs(a),"double",void 0),is(rs(a),"pageX",void 0),is(rs(a),"pageY",void 0),is(rs(a),"clientX",void 0),is(rs(a),"clientY",void 0),is(rs(a),"dt",void 0),is(rs(a),"eventable",void 0),Zu.pointerExtend(rs(a),n),n!==t&&Zu.pointerExtend(rs(a),t),a.timeStamp=i,a.originalEvent=n,a.type=e,a.pointerId=Zu.getPointerId(t),a.pointerType=Zu.getPointerType(t),a.target=r,a.currentTarget=null,"tap"===e){var l=o.getPointerIndex(t);a.dt=a.timeStamp-o.pointers[l].downTime;var c=a.timeStamp-o.tapTime;a.double=!!(o.prevTap&&"doubletap"!==o.prevTap.type&&o.prevTap.target===a.target&&c<500)}else"doubletap"===e&&(a.dt=t.timeStamp-o.tapTime);return a}var t;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&os(e,t)}(f,Qu.default),(t=[{key:"_subtractOrigin",value:function(e){var t=e.x,n=e.y;return this.pageX-=t,this.pageY-=n,this.clientX-=t,this.clientY-=n,this}},{key:"_addOrigin",value:function(e){var t=e.x,n=e.y;return this.pageX+=t,this.pageY+=n,this.clientX+=t,this.clientY+=n,this}},{key:"preventDefault",value:function(){this.originalEvent.preventDefault()}}])&&function ts(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}(f.prototype,t),f}();Ku.PointerEvent=Ku.default=as;var us={};function ss(e){return(ss="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(us,"__esModule",{value:!0}),us.default=void 0,ps(g({})),O({});var ls=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==ss(e)&&"function"!=typeof e)return{default:e};var t=function fs(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(pt),cs=ps(Ku);function ps(e){return e&&e.__esModule?e:{default:e}}var ds={id:"pointer-events/base",install:function(e){e.pointerEvents=ds,e.defaults.actions.pointerEvents=ds.defaults},listeners:{"interactions:new":function(e){var t=e.interaction;t.prevTap=null,t.tapTime=0},"interactions:update-pointer":function(e){var t=e.down,n=e.pointerInfo;!t&&n.hold||(n.hold={duration:1/0,timeout:null})},"interactions:move":function(e,t){var n=e.interaction,r=e.pointer,o=e.event,i=e.eventTarget,a=e.duplicate,u=n.getPointerIndex(r);a||n.pointerIsDown&&!n.pointerWasMoved||(n.pointerIsDown&&clearTimeout(n.pointers[u].hold.timeout),vs({interaction:n,pointer:r,event:o,eventTarget:i,type:"move"},t))},"interactions:down":function(e,t){!function(e,t){for(var n=e.interaction,r=e.pointer,o=e.event,i=e.eventTarget,a=e.pointerIndex,u=n.pointers[a].hold,s=ls.dom.getPath(i),l={interaction:n,pointer:r,event:o,eventTarget:i,type:"hold",targets:[],path:s,node:null},c=0;c<s.length;c++){var f=s[c];l.node=f,t.fire("pointerEvents:collect-targets",l)}if(l.targets.length){for(var p=1/0,d=0;d<l.targets.length;d++){var v=l.targets[d].eventable.options.holdDuration;v<p&&(p=v)}u.duration=p,u.timeout=setTimeout((function(){vs({interaction:n,eventTarget:i,pointer:r,event:o,type:"hold"},t)}),p)}}(e,t),vs(e,t)},"interactions:up":function(e,t){var n,r,o,i,a,u;ms(e),vs(e,t),r=t,o=(n=e).interaction,i=n.pointer,a=n.event,u=n.eventTarget,o.pointerWasMoved||vs({interaction:o,eventTarget:u,pointer:i,event:a,type:"tap"},r)},"interactions:cancel":function(e,t){ms(e),vs(e,t)}},PointerEvent:cs.default,fire:vs,collectEventTargets:ys,defaults:{holdDuration:600,ignoreFrom:null,allowFrom:null,origin:{x:0,y:0}},types:["down","move","up","cancel","tap","doubletap","hold"]};function vs(e,t){var n=e.interaction,r=e.pointer,o=e.event,i=e.eventTarget,a=e.type,u=e.targets,s=void 0===u?ys(e,t):u,l=new cs.default(a,r,o,i,n,t.now());t.fire("pointerEvents:new",{pointerEvent:l});for(var c={interaction:n,pointer:r,event:o,eventTarget:i,targets:s,type:a,pointerEvent:l},f=0;f<s.length;f++){var p=s[f];for(var d in p.props||{})l[d]=p.props[d];var v=ls.getOriginXY(p.eventable,p.node);if(l._subtractOrigin(v),l.eventable=p.eventable,l.currentTarget=p.node,p.eventable.fire(l),l._addOrigin(v),l.immediatePropagationStopped||l.propagationStopped&&f+1<s.length&&s[f+1].node!==l.currentTarget)break}if(t.fire("pointerEvents:fired",c),"tap"===a){var y=l.double?vs({interaction:n,pointer:r,event:o,eventTarget:i,type:"doubletap"},t):l;n.prevTap=y,n.tapTime=y.timeStamp}return l}function ys(e,t){var n=e.interaction,r=e.pointer,o=e.event,i=e.eventTarget,a=e.type,u=n.getPointerIndex(r),s=n.pointers[u];if("tap"===a&&(n.pointerWasMoved||!s||s.downTarget!==i))return[];for(var l=ls.dom.getPath(i),c={interaction:n,pointer:r,event:o,eventTarget:i,type:a,path:l,targets:[],node:null},f=0;f<l.length;f++){var p=l[f];c.node=p,t.fire("pointerEvents:collect-targets",c)}return"hold"===a&&(c.targets=c.targets.filter((function(e){return e.eventable.options.holdDuration===n.pointers[u].hold.duration}))),c.targets}function ms(e){var t=e.interaction,n=e.pointerIndex;t.pointers[n].hold&&clearTimeout(t.pointers[n].hold.timeout)}var gs=ds;us.default=gs;var hs={};Object.defineProperty(hs,"__esModule",{value:!0}),hs.default=void 0;var bs=function Os(e){return e&&e.__esModule?e:{default:e}}(us);function ws(e){var t=e.interaction;t.holdIntervalHandle&&(clearInterval(t.holdIntervalHandle),t.holdIntervalHandle=null)}var Ps={id:"pointer-events/holdRepeat",install:function(e){e.usePlugin(bs.default);var t=e.pointerEvents;t.defaults.holdRepeatInterval=0,t.types.push("holdrepeat")},listeners:["move","up","cancel","endall"].reduce((function(e,t){return e["pointerEvents:".concat(t)]=ws,e}),{"pointerEvents:new":function(e){var t=e.pointerEvent;"hold"===t.type&&(t.count=(t.count||0)+1)},"pointerEvents:fired":function(e,t){var n=e.interaction,r=e.pointerEvent,o=e.eventTarget,i=e.targets;if("hold"===r.type&&i.length){var a=i[0].eventable.options.holdRepeatInterval;a<=0||(n.holdIntervalHandle=setTimeout((function(){t.pointerEvents.fire({interaction:n,eventTarget:o,type:"hold",pointer:r,event:r},t)}),a))}}})};hs.default=Ps;var _s={};Object.defineProperty(_s,"__esModule",{value:!0}),_s.default=void 0;var xs,Ss=(xs=me)&&xs.__esModule?xs:{default:xs};function js(e){return(0,Ss.default)(this.events.options,e),this}var Ms={id:"pointer-events/interactableTargets",install:function(e){var t=e.pointerEvents,n=e.actions,r=e.Interactable;(0,u.merge)(n.eventTypes,t.types),r.prototype.pointerEvents=js;var o=r.prototype._backCompatOption;r.prototype._backCompatOption=function(e,t){var n=o.call(this,e,t);return n===this&&(this.events.options[e]=t),n}},listeners:{"pointerEvents:collect-targets":function(e,t){var r=e.targets,o=e.node,i=e.type,a=e.eventTarget;t.interactables.forEachMatch(o,(function(e){var t=e.events,n=t.options;t.types[i]&&t.types[i].length&&e.testIgnoreAllow(n,o,a)&&r.push({node:o,eventable:t,props:{interactable:e}})}))},"interactable:new":function(e){var t=e.interactable;t.events.getRect=function(e){return t.getRect(e)}},"interactable:set":function(e,t){var n=e.interactable,r=e.options;(0,Ss.default)(n.events.options,t.pointerEvents.defaults),(0,Ss.default)(n.events.options,r.pointerEvents||{})}}};_s.default=Ms;var Es={};function ks(e){return(ks="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(Es,"__esModule",{value:!0}),Es.install=function(e){e.usePlugin(Ds),e.usePlugin(Ts.default),e.usePlugin(Is.default)},Object.defineProperty(Es,"holdRepeat",{enumerable:!0,get:function(){return Ts.default}}),Object.defineProperty(Es,"interactableTargets",{enumerable:!0,get:function(){return Is.default}}),Es.pointerEvents=Es.id=void 0;var Ds=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==ks(e)&&"function"!=typeof e)return{default:e};var t=function zs(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(us);Es.pointerEvents=Ds;var Ts=As(hs),Is=As(_s);function As(e){return e&&e.__esModule?e:{default:e}}Es.id="pointer-events";var Cs={};function Ws(t){for(var e=t.actions,n=t.Interactable,r=0;r<e.names.length;r++){var o=e.names[r];e.eventTypes.push("".concat(o,"reflow"))}n.prototype.reflow=function(e){return function(u,s,l){function e(){var t=c[d],e=u.getRect(t);if(!e)return"break";var n=pt.arr.find(l.interactions.list,(function(e){return e.interacting()&&e.interactable===u&&e.element===t&&e.prepared.name===s.name})),r=void 0;if(n)n.move(),p&&(r=n._reflowPromise||new f((function(e){n._reflowResolve=e})));else{var o=pt.rect.tlbrToXywh(e),i={page:{x:o.x,y:o.y},client:{x:o.x,y:o.y},timeStamp:l.now()},a=pt.pointer.coordsToEvent(i);r=function(e,t,n,r,o){var i=e.interactions.new({pointerType:"reflow"}),a={interaction:i,event:o,pointer:o,eventTarget:n,phase:Tn.EventPhase.Reflow};i.interactable=t,i.element=n,i.prepared=(0,pt.extend)({},r),i.prevEvent=o,i.updatePointer(o,o,n,!0),i._doPhase(a);var u=pt.win.window.Promise?new pt.win.window.Promise((function(e){i._reflowResolve=e})):null;return i._reflowPromise=u,i.start(r,t,n),i._interacting?(i.move(a),i.end(o)):i.stop(),i.removePointer(o,o),i.pointerIsDown=!1,u}(l,u,t,s,a)}p&&p.push(r)}for(var c=pt.is.string(u.target)?pt.arr.from(u._context.querySelectorAll(u.target)):[u.target],f=pt.win.window.Promise,p=f?[]:null,d=0;d<c.length&&"break"!==e();d++);return p&&f.all(p).then((function(){return u}))}(this,e,t)}}Object.defineProperty(Cs,"__esModule",{value:!0}),Cs.install=Ws,Cs.default=void 0,g({});var Xs={id:Tn.EventPhase.Reflow="reflow",install:Ws,listeners:{"interactions:stop":function(e,t){var n=e.interaction;n.pointerType===Tn.EventPhase.Reflow&&(n._reflowResolve&&n._reflowResolve(),pt.arr.remove(t.interactions.list,n))}}};Cs.default=Xs;var Ns={};function Ys(e){return(Ys="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(Ns,"__esModule",{value:!0}),Ns.default=Ns.scope=Ns.interact=void 0;var Fs=O({}),Ls=Us(j),qs=Us(De),Vs=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Ys(e)&&"function"!=typeof e)return{default:e};var t=function Gs(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(pt);function Us(e){return e&&e.__esModule?e:{default:e}}var Bs={},Hs=new Fs.Scope;function Ks(e,t){var n=Hs.interactables.get(e,t);return n||((n=Hs.interactables.new(e,t)).events.global=Bs),n}Ns.scope=Hs,(Ns.interact=Ks).use=function(e,t){return Hs.usePlugin(e,t),Ks},Ks.isSet=function(e,t){return!!Hs.interactables.get(e,t&&t.context)},Ks.on=function(e,t,n){if(Vs.is.string(e)&&-1!==e.search(" ")&&(e=e.trim().split(/ +/)),Vs.is.array(e)){for(var r=0;r<e.length;r++){var o;o=e[r],Ks.on(o,t,n)}return Ks}if(Vs.is.object(e)){for(var i in e)Ks.on(i,e[i],t);return Ks}return Vs.arr.contains(Hs.actions.eventTypes,e)?Bs[e]?Bs[e].push(t):Bs[e]=[t]:qs.default.add(Hs.document,e,t,{options:n}),Ks},Ks.off=function(e,t,n){if(Vs.is.string(e)&&-1!==e.search(" ")&&(e=e.trim().split(/ +/)),Vs.is.array(e)){for(var r=0;r<e.length;r++){var o;o=e[r],Ks.off(o,t,n)}return Ks}if(Vs.is.object(e)){for(var i in e)Ks.off(i,e[i],t);return Ks}var a;return Vs.arr.contains(Hs.actions.eventTypes,e)?e in Bs&&-1!==(a=Bs[e].indexOf(t))&&Bs[e].splice(a,1):qs.default.remove(Hs.document,e,t,n),Ks},Ks.debug=function(){return Hs},Ks.getPointerAverage=Vs.pointer.pointerAverage,Ks.getTouchBBox=Vs.pointer.touchBBox,Ks.getTouchDistance=Vs.pointer.touchDistance,Ks.getTouchAngle=Vs.pointer.touchAngle,Ks.getElementRect=Vs.dom.getElementRect,Ks.getElementClientRect=Vs.dom.getElementClientRect,Ks.matchesSelector=Vs.dom.matchesSelector,Ks.closest=Vs.dom.closest,Ks.supportsTouch=function(){return Ls.default.supportsTouch},Ks.supportsPointerEvent=function(){return Ls.default.supportsPointerEvent},Ks.stop=function(){for(var e=0;e<Hs.interactions.list.length;e++)Hs.interactions.list[e].stop();return Ks},Ks.pointerMoveTolerance=function(e){return Vs.is.number(e)?(Hs.interactions.pointerMoveTolerance=e,Ks):Hs.interactions.pointerMoveTolerance},Hs.addListeners({"interactable:unset":function(e){var t=e.interactable;Hs.interactables.list.splice(Hs.interactables.list.indexOf(t),1);for(var n=0;n<Hs.interactions.list.length;n++){var r=Hs.interactions.list[n];r.interactable===t&&r.interacting()&&!r._ending&&r.stop()}}}),Ks.addDocument=function(e,t){return Hs.addDocument(e,t)},Ks.removeDocument=function(e){return Hs.removeDocument(e)};var $s=Hs.interact=Ks;Ns.default=$s;var Qs={};function Zs(e){return(Zs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(Qs,"__esModule",{value:!0}),Qs.init=function(e){for(var t in sl.scope.init(e),sl.default.use(nl.default),sl.default.use(al),sl.default.use(rl.default),sl.default.use(ol.default),sl.default.use(tl),sl.default.use(Js),il){var n=il[t],r=n._defaults,o=n._methods;r._methods=o,sl.scope.defaults.perAction[t]=r}return sl.default.use(el.default),sl.default.use(ul.default),sl.default},Qs.default=void 0;var Js=fl(vo),el=ll(Oo),tl=fl(di),nl=ll(hi),rl=ll(aa),ol=ll(Fi),il=fl(Tu),al=fl(Es),ul=ll(Cs),sl=fl(Ns);function ll(e){return e&&e.__esModule?e:{default:e}}function cl(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return cl=function(){return e},e}function fl(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Zs(e)&&"function"!=typeof e)return{default:e};var t=cl();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}sl.default.version="1.8.4";var pl=sl.default;Qs.default=pl;var dl={};function vl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}Object.defineProperty(dl,"__esModule",{value:!0}),dl.default=void 0,dl.default=function yl(v){function e(e,t){for(var n=v.range,r=v.limits,o=void 0===r?{left:-1/0,right:1/0,top:-1/0,bottom:1/0}:r,i=v.offset,a=void 0===i?{x:0,y:0}:i,u={range:n,grid:v,x:null,y:null},s=0;s<y.length;s++){var l=vl(y[s],2),c=l[0],f=l[1],p=Math.round((e-a.x)/v[c]),d=Math.round((t-a.y)/v[f]);u[c]=Math.max(o.left,Math.min(o.right,p*v[c]+a.x)),u[f]=Math.max(o.top,Math.min(o.bottom,d*v[f]+a.y))}return u}var y=[["x","y"],["left","top"],["right","bottom"],["width","height"]].filter((function(e){var t=vl(e,2),n=t[0],r=t[1];return n in v||r in v}));return e.grid=v,e.coordFields=y,e};var ml={};Object.defineProperty(ml,"__esModule",{value:!0}),Object.defineProperty(ml,"grid",{enumerable:!0,get:function(){return hl.default}});var gl,hl=(gl=dl)&&gl.__esModule?gl:{default:gl},bl={};Object.defineProperty(bl,"__esModule",{value:!0}),bl.init=El,bl.default=void 0;var Ol,wl=jl(Qs),Pl=jl(Tu),_l=(Ol=me)&&Ol.__esModule?Ol:{default:Ol},xl=jl(ml);function Sl(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return Sl=function(){return e},e}function jl(e){if(e&&e.__esModule)return e;if(null===e||"object"!==Ml(e)&&"function"!=typeof e)return{default:e};var t=Sl();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}function Ml(e){return(Ml="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function El(e){return(0,wl.init)(e),wl.default.use({id:"interactjs",install:function(){wl.default.modifiers=(0,_l.default)({},Pl),wl.default.snappers=xl,wl.default.createSnapGrid=wl.default.snappers.grid}})}"object"===("undefined"==typeof window?"undefined":Ml(window))&&window&&El(window);var kl=wl.default;bl.default=kl;var Dl={exports:{}};Object.defineProperty(Dl.exports,"__esModule",{value:!0});var Tl={};Dl.exports.default=void 0;var Il=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==zl(e)&&"function"!=typeof e)return{default:e};var t=function Al(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return e}();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(bl);function zl(e){return(zl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}if(Object.keys(Il).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(Tl,e)||Object.defineProperty(Dl.exports,e,{enumerable:!0,get:function(){return Il[e]}}))})),"object"===zl(Dl)&&Dl)try{Dl.exports=Il.default}catch(e){}Il.default.default=Il.default,Il.default.init=Il.init;var Cl=Il.default;return Dl.exports.default=Cl,Dl=Dl.exports}()}))),ViewportDataComponent=function(){function ViewportDataComponent(hostRef){Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.g)(this,hostRef)}return ViewportDataComponent.prototype.componentWillLoad=function(){interact(".data-header-cell").resizable({edges:{bottom:!1,right:!0},onend:function(event){var _b;setDimensionSize(((_b={})[parseInt(event.target.getAttribute("data-col"),10)]=event.rect.width,_b),"col"),event.target.style.width=event.rect.width+"px"}})},ViewportDataComponent.prototype.render=function(){for(var cells=[],_b=0,_c=colsStore$1.get("items");_b<_c.length;_b++){var col=_c[_b];cells.push(Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("div",{class:"data-header-cell","data-col":col.itemIndex,style:{width:col.size+"px",transform:"translateX("+col.start+"px)"}},dataStore.provider.header(col.itemIndex)))}return cells},Object.defineProperty(ViewportDataComponent.prototype,"element",{get:function(){return Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.c)(this)},enumerable:!0,configurable:!0}),ViewportDataComponent}(),RevogrViewportScrollable=function(){function class_2(hostRef){var _this=this;Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.g)(this,hostRef),this.scrollSize=0,this.preventArtificialScroll=!1,this.scrollVirtY=function(){if(_this.preventArtificialScroll)_this.preventArtificialScroll=!1;else{var target=_this.verticalVirtScroll,top=(null==target?void 0:target.scrollTop)||0;setViewPortCoordinate(top,"row"),_this.verticalScroll&&(_this.preventArtificialScroll=!0,_this.verticalScroll.scrollTop=top)}}}return class_2.prototype.scrollX=function(x){return __awaiter(this,void 0,void 0,(function(){var _a;return __generator(this,(function(_b){return x&&(this.horizontalScroll.scrollLeft=x),setViewPortCoordinate(x||(null===(_a=this.horizontalScroll)||void 0===_a?void 0:_a.scrollLeft)||0,"col"),[2]}))}))},class_2.prototype.scrollY=function(y){return __awaiter(this,void 0,void 0,(function(){var _a,top;return __generator(this,(function(_b){return this.preventArtificialScroll?(this.preventArtificialScroll=!1,[2]):(setViewPortCoordinate(top=y||(null===(_a=this.verticalScroll)||void 0===_a?void 0:_a.scrollTop)||0,"row"),this.verticalVirtScroll&&(this.preventArtificialScroll=!0,this.verticalVirtScroll.scrollTop=top),[2])}))}))},class_2.prototype.componentWillLoad=function(){var _this=this;this.scrollSize=function getScrollbarWidth(doc){var outer=doc.createElement("div");outer.style.visibility="hidden",outer.style.overflow="scroll",outer.style.msOverflowStyle="scrollbar",doc.body.appendChild(outer);var inner=doc.createElement("div");outer.appendChild(inner);var scrollbarWidth=outer.offsetWidth-inner.offsetWidth;return outer.parentNode.removeChild(outer),scrollbarWidth}(document);var oldValY=rowsStore.get("realSize"),oldValX=colsStore.get("realSize");this.scrollX(),this.scrollY(),rowsStore.onChange("realSize",(function(newVal){newVal<oldValY&&(_this.verticalScroll.scrollLeft+=newVal-oldValY),oldValY=newVal})),colsStore.onChange("realSize",(function(newVal){newVal<oldValX&&(_this.horizontalScroll.scrollLeft+=newVal-oldValX),oldValX=newVal}))},class_2.prototype.componentDidRender=function(){if(this.verticalVirtScroll.scrollHeight>this.verticalVirtScroll.clientHeight){var scrollSize=this.scrollSize||20;this.verticalVirtScroll.style.top=this.header.clientHeight+"px",this.verticalVirtScroll.style.width=scrollSize+"px",this.verticalScroll.style.marginRight=scrollSize+"px"}else this.verticalVirtScroll.style.width="0",this.verticalScroll.style.marginRight="0";this.horizontalScroll.scrollWidth>this.horizontalScroll.clientWidth?this.verticalVirtScroll.style.bottom=this.scrollSize+"px":this.verticalVirtScroll.style.bottom="0"},class_2.prototype.render=function(){var _this=this;return[Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("div",{class:"vertical-scroll",ref:function(el){_this.verticalVirtScroll=el},onScroll:function(){return _this.scrollVirtY()}},Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("div",{style:{height:rowsStore.get("realSize")+"px"}})),Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("div",{class:"horizontal-wrapper",ref:function(el){_this.horizontalScroll=el},onScroll:function(){return _this.scrollX()}},Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("div",{class:"inner-content-table"},Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("div",{class:"header-wrapper",ref:function(el){_this.header=el}},Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("slot",{name:"header"})),Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("div",{class:"vertical-wrapper"},Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("div",{class:"vertical-inner",ref:function(el){_this.verticalScroll=el},onScroll:function(){return _this.scrollY()}},Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("div",{style:{height:rowsStore.get("realSize")+"px",width:colsStore.get("realSize")+"px"}},Object(_index_c2c66e46_js__WEBPACK_IMPORTED_MODULE_0__.f)("slot",{name:"content"}))))))]},class_2}()}.call(this,__webpack_require__(79))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJldm9saXN0L3Jldm9ncmlkL2Rpc3QvZXNtLWVzNS9yZXZvLWdyaWRfNC5lbnRyeS5qcyJdLCJuYW1lcyI6WyJmbiIsIm1zIiwidGltZW91dElkIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsImFkb3B0IiwidGhlbiIsImFwcGx5IiwiX19nZW5lcmF0b3IiLCJib2R5IiwiZiIsInkiLCJ0IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwidGhpcyIsIm4iLCJ2Iiwib3AiLCJUeXBlRXJyb3IiLCJjYWxsIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsIl9fc3ByZWFkQXJyYXlzIiwicyIsImkiLCJpbCIsImFyZ3VtZW50cyIsInIiLCJBcnJheSIsImsiLCJhIiwiaiIsImpsIiwiaXNDb25uZWN0ZWQiLCJtYXliZUVsZW1lbnQiLCJjbGVhbnVwRWxlbWVudHMiLCJtYXAiLCJfYiIsIl9jIiwia2V5cyIsImtleSIsInNldCIsImdldCIsImZpbHRlciIsImFyZ3MiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwicmVtb3ZlRnJvbUFycmF5IiwiYXJyYXkiLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwiY3JlYXRlU3RvcmUiLCJkZWZhdWx0U3RhdGUiLCJvbiIsImVsbXNUb1VwZGF0ZSIsInN0YXRlcyIsIk1hcCIsIk9iamVjdCIsImVudHJpZXMiLCJoYW5kbGVycyIsInJlc2V0IiwicHJvcE5hbWUiLCJmb3JFYWNoIiwiY2IiLCJvbGRWYWx1ZSIsInN0YXRlIiwiUHJveHkiLCJvd25LZXlzIiwiZnJvbSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJoYXMiLCJldmVudE5hbWUiLCJjYWxsYmFjayIsIm9uQ2hhbmdlIiwidW5TZXQiLCJuZXdWYWx1ZSIsInVuUmVzZXQiLCJ1c2UiLCJzdWJzY3JpcHRpb25zIiwic3Vic2NyaXB0aW9uIiwiY3JlYXRlT2JzZXJ2YWJsZU1hcCIsImVsbSIsIml0ZW1zIiwiaW5jbHVkZXMiLCJhcHBlbmRUb01hcCIsImVsZW1lbnRzIiwiZWxtcyIsIm9iamVjdFByb3RvIiwicHJvdG90eXBlIiwiX2lzUHJvdG90eXBlIiwiaXNQcm90b3R5cGUiLCJDdG9yIiwiY29uc3RydWN0b3IiLCJfbmF0aXZlS2V5cyIsIm92ZXJBcmciLCJmdW5jIiwidHJhbnNmb3JtIiwiYXJnIiwiX292ZXJBcmciLCJoYXNPd25Qcm9wZXJ0eSIsIl9iYXNlS2V5cyIsImJhc2VLZXlzIiwib2JqZWN0IiwiY29tbW9uanNHbG9iYWwiLCJnbG9iYWxUaGlzIiwid2luZG93IiwiZ2xvYmFsIiwic2VsZiIsImNyZWF0ZUNvbW1vbmpzTW9kdWxlIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9mcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJfcm9vdCIsIkZ1bmN0aW9uIiwiX1N5bWJvbCIsIm9iamVjdFByb3RvJDIiLCJoYXNPd25Qcm9wZXJ0eSQxIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJ0b1N0cmluZyIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJ1bmRlZmluZWQiLCJfZ2V0UmF3VGFnIiwiZ2V0UmF3VGFnIiwiaXNPd24iLCJ0YWciLCJ1bm1hc2tlZCIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nJDEiLCJfb2JqZWN0VG9TdHJpbmciLCJvYmplY3RUb1N0cmluZyIsInN5bVRvU3RyaW5nVGFnJDEiLCJfYmFzZUdldFRhZyIsImJhc2VHZXRUYWciLCJpc09iamVjdF8xIiwiaXNPYmplY3QiLCJ0eXBlIiwidWlkIiwiaXNGdW5jdGlvbl8xIiwiaXNGdW5jdGlvbiIsIl9jb3JlSnNEYXRhIiwibWFza1NyY0tleSIsImV4ZWMiLCJJRV9QUk9UTyIsIl9pc01hc2tlZCIsImlzTWFza2VkIiwiZnVuY1RvU3RyaW5nIiwiX3RvU291cmNlIiwidG9Tb3VyY2UiLCJyZUlzSG9zdEN0b3IiLCJmdW5jUHJvdG8kMSIsIm9iamVjdFByb3RvJDQiLCJmdW5jVG9TdHJpbmckMSIsImhhc093blByb3BlcnR5JDIiLCJyZUlzTmF0aXZlIiwiUmVnRXhwIiwicmVwbGFjZSIsIl9iYXNlSXNOYXRpdmUiLCJiYXNlSXNOYXRpdmUiLCJ0ZXN0IiwiX2dldFZhbHVlIiwiZ2V0VmFsdWUiLCJfZ2V0TmF0aXZlIiwiZ2V0TmF0aXZlIiwiX0RhdGFWaWV3IiwiX01hcCIsIl9Qcm9taXNlIiwiX1NldCIsIl9XZWFrTWFwIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwiZ2V0VGFnIiwiQXJyYXlCdWZmZXIiLCJjdG9yU3RyaW5nIiwiX2dldFRhZyIsImlzTGVuZ3RoXzEiLCJpc0xlbmd0aCIsImlzQXJyYXlMaWtlXzEiLCJpc0FycmF5TGlrZSIsImlzQXJyYXlfMSIsImlzQXJyYXkiLCJpc09iamVjdExpa2VfMSIsImlzT2JqZWN0TGlrZSIsImlzU3RyaW5nXzEiLCJpc1N0cmluZyIsIl9iYXNlUHJvcGVydHkiLCJiYXNlUHJvcGVydHkiLCJfYXNjaWlTaXplIiwicmVIYXNVbmljb2RlIiwiX2hhc1VuaWNvZGUiLCJoYXNVbmljb2RlIiwic3RyaW5nIiwicnNBc3RyYWwiLCJyc0NvbWJvIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJlT3B0TW9kIiwicnNTZXEiLCJqb2luIiwicnNTeW1ib2wiLCJyZVVuaWNvZGUiLCJfdW5pY29kZVNpemUiLCJ1bmljb2RlU2l6ZSIsImxhc3RJbmRleCIsIl9zdHJpbmdTaXplIiwic3RyaW5nU2l6ZSIsInNpemVfMSIsInNpemUiLCJjb2xsZWN0aW9uIiwiX2FycmF5RWFjaCIsImFycmF5RWFjaCIsIml0ZXJhdGVlIiwiX2Jhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiZnJvbVJpZ2h0Iiwia2V5c0Z1bmMiLCJpdGVyYWJsZSIsInByb3BzIiwiX2NyZWF0ZUJhc2VGb3IiLCJfYmFzZVRpbWVzIiwiYmFzZVRpbWVzIiwiX2Jhc2VJc0FyZ3VtZW50cyIsImJhc2VJc0FyZ3VtZW50cyIsIm9iamVjdFByb3RvJDUiLCJoYXNPd25Qcm9wZXJ0eSQzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJpc0FyZ3VtZW50c18xIiwic3R1YkZhbHNlXzEiLCJzdHViRmFsc2UiLCJpc0J1ZmZlcl8xIiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJCdWZmZXIiLCJpc0J1ZmZlciIsInJlSXNVaW50IiwiX2lzSW5kZXgiLCJpc0luZGV4IiwidHlwZWRBcnJheVRhZ3MiLCJfYmFzZUlzVHlwZWRBcnJheSIsImJhc2VJc1R5cGVkQXJyYXkiLCJfYmFzZVVuYXJ5IiwiYmFzZVVuYXJ5IiwiX25vZGVVdGlsIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJ0eXBlcyIsInJlcXVpcmUiLCJiaW5kaW5nIiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheV8xIiwiaGFzT3duUHJvcGVydHkkNCIsIl9hcnJheUxpa2VLZXlzIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsIlN0cmluZyIsImtleXNfMSIsIl9iYXNlRWFjaCIsImNyZWF0ZUJhc2VFYWNoIiwiZWFjaEZ1bmMiLCJfY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiaWRlbnRpdHlfMSIsImlkZW50aXR5IiwiX2Nhc3RGdW5jdGlvbiIsImNhc3RGdW5jdGlvbiIsImVhY2giLCJzZXRTdG9yZSIsInN0b3JlIiwiZGF0YSIsInZhbCIsIkRhdGFQcm92aWRlck9iamVjdCIsImMiLCJyb3dEYXRhTW9kZWwiLCJwcm9wIiwibW9kZWwiLCJfYSIsIkhlYWRlclByb3ZpZGVyT2JqZWN0IiwiZ2V0Q29sdW1uIiwibmFtZSIsInRlbXBsYXRlIiwiY2VsbFRlbXBsYXRlIiwiRGF0YVByb3ZpZGVyIiwiY29sdW1uUHJvdmlkZXIiLCJkYXRhUHJvdmlkZXIiLCJ0cGwiLCJoZWFkZXIiLCJEYXRhU291cmNlIiwicHJvdmlkZXIiLCJzZXREYXRhIiwic2V0Q29sdW1uIiwiY29sdW1ucyIsImlzU3ltYm9sXzEiLCJpc1N5bWJvbCIsIm5hdGl2ZUZsb29yIiwiTWF0aCIsImZsb29yIiwibmF0aXZlTWluIiwibWluIiwiX2Jhc2VTb3J0ZWRJbmRleEJ5IiwiYmFzZVNvcnRlZEluZGV4QnkiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsInZhbElzTmFOIiwidmFsSXNOdWxsIiwidmFsSXNTeW1ib2wiLCJ2YWxJc1VuZGVmaW5lZCIsIm1pZCIsImNvbXB1dGVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsIk1BWF9BUlJBWV9MRU5HVEgiLCJfYmFzZVNvcnRlZEluZGV4IiwiYmFzZVNvcnRlZEluZGV4IiwiTUFYX0FSUkFZX0xFTkdUSCQxIiwic29ydGVkSW5kZXhfMSIsInNvcnRlZEluZGV4IiwicmFuZ2UiLCJzdGFydEF0IiwicmVzIiwiZW5kIiwic2ltcGxlQ29tcGFyZSIsImVsMSIsImVsMiIsImdldFVwZGF0ZWRJdGVtc0J5UG9zaXRpb24iLCJwb3MiLCJyZWFsQ291bnQiLCJ2aXJ0dWFsU2l6ZSIsImRpbWVuc2lvbiIsInRvVXBkYXRlIiwiYWN0aXZlSXRlbSIsImdldE9mZnNldCIsIm9yaWdTaXplIiwiaXRlbUluZGV4Iiwic3RhcnQiLCJjdXJyZW50UGxhY2UiLCJpbmRleGVzIiwicG9zaXRpb25JbmRleGVzIiwicG9zaXRpb25JdGVtIiwicG9zaXRpb25JbmRleFRvQ29vcmRpbmF0ZSIsInJlbGF0aXZlUG9zIiwicmVsYXRpdmVJbmRleCIsIm9yaWdpbkl0ZW1TaXplIiwiZmlyc3RJdGVtIiwiZ2V0Rmlyc3RJdGVtIiwiY2hhbmdlZE9mZnNldFN0YXJ0IiwibmV3RGF0YSIsInJlY29tYmluZUJ5T2Zmc2V0IiwiaW5kZXhTaXplIiwiaXRlbUluZGV4ZXMiLCJvZmZzZXQiLCJwb3NpdGl2ZURpcmVjdGlvbiIsImxhc3RJdGVtIiwiZ2V0TGFzdEl0ZW0iLCJzaXplXzIiLCJnZXRJdGVtU2l6ZSIsIm5ld0luZGV4Iiwic2l6ZXMiLCJyZWFsU2l6ZSIsInNwbGljZSIsImNoYW5nZWQiLCJzaXplXzMiLCJ1bnNoaWZ0IiwibmV3SXRlbSIsInByZXZJdGVtIiwiYWJzIiwiZXh0cmEiLCJhZGRNaXNzaW5nSXRlbXMiLCJnZXRJdGVtcyIsInN0YXJ0SW5kZXgiLCJtYXhTaXplIiwibWF4Q291bnQiLCJleGlzdGluZ0NvbGxlY3Rpb24iLCJvcHQiLCJjdXJyZW50U2l6ZSIsIm5ld1NpemUiLCJfYXJyYXlSZWR1Y2UiLCJhcnJheVJlZHVjZSIsImFjY3VtdWxhdG9yIiwiaW5pdEFjY3VtIiwiX2xpc3RDYWNoZUNsZWFyIiwibGlzdENhY2hlQ2xlYXIiLCJfX2RhdGFfXyIsImVxXzEiLCJlcSIsIm90aGVyIiwiX2Fzc29jSW5kZXhPZiIsImFzc29jSW5kZXhPZiIsIl9saXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVEZWxldGUiLCJfbGlzdENhY2hlR2V0IiwibGlzdENhY2hlR2V0IiwiX2xpc3RDYWNoZUhhcyIsImxpc3RDYWNoZUhhcyIsIl9saXN0Q2FjaGVTZXQiLCJsaXN0Q2FjaGVTZXQiLCJMaXN0Q2FjaGUiLCJjbGVhciIsImVudHJ5IiwiX0xpc3RDYWNoZSIsIl9zdGFja0NsZWFyIiwic3RhY2tDbGVhciIsIl9zdGFja0RlbGV0ZSIsInN0YWNrRGVsZXRlIiwiX3N0YWNrR2V0Iiwic3RhY2tHZXQiLCJfc3RhY2tIYXMiLCJzdGFja0hhcyIsIl9uYXRpdmVDcmVhdGUiLCJfaGFzaENsZWFyIiwiaGFzaENsZWFyIiwiX2hhc2hEZWxldGUiLCJoYXNoRGVsZXRlIiwiaGFzT3duUHJvcGVydHkkNSIsIl9oYXNoR2V0IiwiaGFzaEdldCIsImhhc093blByb3BlcnR5JDYiLCJfaGFzaEhhcyIsImhhc2hIYXMiLCJfaGFzaFNldCIsImhhc2hTZXQiLCJIYXNoIiwiX0hhc2giLCJfbWFwQ2FjaGVDbGVhciIsIm1hcENhY2hlQ2xlYXIiLCJfaXNLZXlhYmxlIiwiaXNLZXlhYmxlIiwiX2dldE1hcERhdGEiLCJnZXRNYXBEYXRhIiwiX21hcENhY2hlRGVsZXRlIiwibWFwQ2FjaGVEZWxldGUiLCJfbWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUdldCIsIl9tYXBDYWNoZUhhcyIsIm1hcENhY2hlSGFzIiwiX21hcENhY2hlU2V0IiwibWFwQ2FjaGVTZXQiLCJNYXBDYWNoZSIsIl9NYXBDYWNoZSIsIl9zdGFja1NldCIsInN0YWNrU2V0IiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiU3RhY2siLCJfU3RhY2siLCJfc2V0Q2FjaGVBZGQiLCJzZXRDYWNoZUFkZCIsIl9zZXRDYWNoZUhhcyIsInNldENhY2hlSGFzIiwiU2V0Q2FjaGUiLCJ2YWx1ZXMiLCJhZGQiLCJfU2V0Q2FjaGUiLCJfYXJyYXlTb21lIiwiYXJyYXlTb21lIiwicHJlZGljYXRlIiwiX2NhY2hlSGFzIiwiY2FjaGVIYXMiLCJjYWNoZSIsIl9lcXVhbEFycmF5cyIsImVxdWFsQXJyYXlzIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJlcXVhbEZ1bmMiLCJzdGFjayIsImlzUGFydGlhbCIsImFyckxlbmd0aCIsIm90aExlbmd0aCIsInN0YWNrZWQiLCJzZWVuIiwiYXJyVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib3RoSW5kZXgiLCJfVWludDhBcnJheSIsIlVpbnQ4QXJyYXkiLCJfbWFwVG9BcnJheSIsIm1hcFRvQXJyYXkiLCJfc2V0VG9BcnJheSIsInNldFRvQXJyYXkiLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJ2YWx1ZU9mIiwiX2VxdWFsQnlUYWciLCJlcXVhbEJ5VGFnIiwiYnl0ZUxlbmd0aCIsImJ5dGVPZmZzZXQiLCJidWZmZXIiLCJtZXNzYWdlIiwiY29udmVydCIsIl9hcnJheVB1c2giLCJhcnJheVB1c2giLCJfYmFzZUdldEFsbEtleXMiLCJiYXNlR2V0QWxsS2V5cyIsInN5bWJvbHNGdW5jIiwiX2FycmF5RmlsdGVyIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsInN0dWJBcnJheV8xIiwic3R1YkFycmF5IiwicHJvcGVydHlJc0VudW1lcmFibGUkMSIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJfZ2V0U3ltYm9scyIsInN5bWJvbCIsIl9nZXRBbGxLZXlzIiwiZ2V0QWxsS2V5cyIsImhhc093blByb3BlcnR5JDciLCJfZXF1YWxPYmplY3RzIiwiZXF1YWxPYmplY3RzIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJza2lwQ3RvciIsIm9ialZhbHVlIiwib2JqQ3RvciIsIm90aEN0b3IiLCJoYXNPd25Qcm9wZXJ0eSQ4IiwiX2Jhc2VJc0VxdWFsRGVlcCIsImJhc2VJc0VxdWFsRGVlcCIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwiX2Jhc2VJc0VxdWFsIiwiYmFzZUlzRXF1YWwiLCJfYmFzZUlzTWF0Y2giLCJiYXNlSXNNYXRjaCIsInNvdXJjZSIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUckNCIsIl9pc1N0cmljdENvbXBhcmFibGUiLCJpc1N0cmljdENvbXBhcmFibGUiLCJfZ2V0TWF0Y2hEYXRhIiwiZ2V0TWF0Y2hEYXRhIiwiX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwibWF0Y2hlc1N0cmljdENvbXBhcmFibGUiLCJfYmFzZU1hdGNoZXMiLCJiYXNlTWF0Y2hlcyIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJfaXNLZXkiLCJpc0tleSIsIm1lbW9pemUiLCJyZXNvbHZlciIsIm1lbW9pemVkIiwiQ2FjaGUiLCJtZW1vaXplXzEiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwiX3N0cmluZ1RvUGF0aCIsIm1lbW9pemVDYXBwZWQiLCJfbWVtb2l6ZUNhcHBlZCIsImNoYXJDb2RlQXQiLCJtYXRjaCIsIm51bWJlciIsInF1b3RlIiwic3ViU3RyaW5nIiwiX2FycmF5TWFwIiwiYXJyYXlNYXAiLCJzeW1ib2xQcm90byQxIiwic3ltYm9sVG9TdHJpbmciLCJfYmFzZVRvU3RyaW5nIiwiYmFzZVRvU3RyaW5nIiwidG9TdHJpbmdfMSIsIl9jYXN0UGF0aCIsImNhc3RQYXRoIiwiX3RvS2V5IiwidG9LZXkiLCJfYmFzZUdldCIsImJhc2VHZXQiLCJwYXRoIiwiZ2V0XzEiLCJkZWZhdWx0VmFsdWUiLCJfYmFzZUhhc0luIiwiYmFzZUhhc0luIiwiX2hhc1BhdGgiLCJoYXNQYXRoIiwiaGFzRnVuYyIsImhhc0luXzEiLCJoYXNJbiIsIl9iYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsIkNPTVBBUkVfUEFSVElBTF9GTEFHJDUiLCJfYmFzZVByb3BlcnR5RGVlcCIsImJhc2VQcm9wZXJ0eURlZXAiLCJwcm9wZXJ0eV8xIiwicHJvcGVydHkiLCJfYmFzZUl0ZXJhdGVlIiwiYmFzZUl0ZXJhdGVlIiwiX2Jhc2VSZWR1Y2UiLCJiYXNlUmVkdWNlIiwicmVkdWNlXzEiLCJyZWR1Y2UiLCJjYWxjdWxhdGVEaW1lbnNpb25EYXRhIiwibmV3U2l6ZXMiLCJpdGVtSW5kZXhUb0Nvb3JkaW5hdGUiLCJuZXdUb3RhbCIsImFzc2lnbiIsIm5ld0luZGV4ZXMiLCJwYXJzZUludCIsInVwZGF0ZWRJbmRleGVzQ2FjaGUiLCJtZXJnZVNvcnRlZEFycmF5IiwiYXJyMSIsImFycjIiLCJjb21wYXJlRm4iLCJtZXJnZWQiLCJpbmRleDEiLCJpbmRleDIiLCJjdXJyZW50IiwiaXNBcnIxRGVwbGV0ZWQiLCJpc0FycjJEZXBsZXRlZCIsInByZXZpb3VzIiwicm93c1N0b3JlIiwiY29sc1N0b3JlIiwiZ2V0Q3VycmVudFN0YXRlIiwiZ2V0U3RvcmVCeVR5cGUiLCJzZXRTZXR0aW5ncyIsImRpbWVuc2lvblR5cGUiLCJzZXRSZWFsU2l6ZSIsImNvdW50Iiwic2V0RGltZW5zaW9uU2l6ZSIsInNldFZpZXdQb3J0RGltZW5zaW9uIiwiZ2V0U3RvcmVCeVR5cGUkMSIsImNoYW5nZWRDb29yZGluYXRlIiwiY2hhbmdlZFNpemUiLCJzaXplXzQiLCJyb3dzU3RvcmUkMSIsImZyYW1lT2Zmc2V0IiwiY29sc1N0b3JlJDEiLCJnZXRJdGVtcyQxIiwic2V0Vmlld3BvcnQiLCJzZXRWaWV3UG9ydENvb3JkaW5hdGUiLCJwb3NpdGlvbiIsIm91dHNpemUiLCJtYXhDb29yZGluYXRlIiwiaXNBY3RpdmVSYW5nZSIsImRhdGFTdG9yZSIsImluaXRpYWxTZXR0aW5ncyIsImRlZmF1bHRDb2x1bW5TaXplIiwiZGVmYXVsdFJvd1NpemUiLCJmcmFtZVNpemUiLCJkaW1lbnNpb25zIiwiUmV2b0dyaWQiLCJjbGFzc18xIiwiaG9zdFJlZiIsInNldHRpbmdzIiwib25TZXR0aW5nc0NoYW5nZSIsIm5ld1ZhbCIsIm9sZFZhbCIsImRhdGFDaGFuZ2VkIiwicm93cyIsImNvbHVtbkNoYW5nZWQiLCJjb2xzIiwiY29tcG9uZW50V2lsbExvYWQiLCJyb3ciLCJjb2wiLCJjb21wb25lbnREaWRMb2FkIiwiX3RoaXMiLCJSZXNpemVPYnNlcnZlciIsInJlc2l6ZU9ic2VydmVyIiwiZWxlbWVudCIsImNsaWVudEhlaWdodCIsImNsaWVudFdpZHRoIiwidmlld3BvcnQiLCJzY3JvbGxYIiwic2Nyb2xsWSIsIm9ic2VydmUiLCJjb21wb25lbnREaWRVbmxvYWQiLCJkaXNjb25uZWN0IiwicmVuZGVyIiwiY2xhc3MiLCJyZWYiLCJlbCIsInNsb3QiLCJkZWZpbmVQcm9wZXJ0eSIsInN0eWxlIiwiUmV2b2dyRGF0YSIsInJvd3NFbHMiLCJjZWxscyIsIl9kIiwiX2YiLCJ3aWR0aCIsImhlaWdodCIsImludGVyYWN0IiwidW53cmFwRXhwb3J0cyIsIngiLCJfX2VzTW9kdWxlIiwicGFyZW50IiwiTyIsIlNjb3BlIiwiQWN0aW9uTmFtZSIsIm8iLCJwIiwiZGVmYXVsdCIsIldlYWtNYXAiLCJwdCIsIkl0IiwiQ3QiLCJ1IiwiVXQiLCJsIiwiVG4iLCJFIiwiZCIsIlJlZmVyZW5jZUVycm9yIiwiUmVmbGVjdCIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJtIiwiaCIsIndyaXRhYmxlIiwiYiIsInciLCJ3aW4iLCJicm93c2VyIiwicmFmIiwiUyIsImV2ZW50cyIsImNvbmNhdCIsInJhbmRvbSIsImNsb25lIiwibmFtZXMiLCJtZXRob2REaWN0IiwiZXZlbnRUeXBlcyIsImxpc3QiLCJyZW1vdmVEb2N1bWVudCIsInRhcmdldCIsIkludGVyYWN0YWJsZSIsImNyZWF0ZSIsImZpcmUiLCJvcHRpb25zIiwiaW50ZXJhY3RhYmxlIiwiaW50ZXJhY3Rpb25zIiwic3RvcCIsImludGVyYWN0aW9uIiwiZGVzdHJveSIsImRlZmF1bHRzIiwibGlzdGVuZXJNYXBzIiwiaWQiLCJNIiwiaW5pdCIsInVzZVBsdWdpbiIsImRvY3VtZW50IiwiX3BsdWdpbnMiLCJwbHVnaW5Jc0luc3RhbGxlZCIsImluc3RhbGwiLCJsaXN0ZW5lcnMiLCJiZWZvcmUiLCJnZXREb2NJbmRleCIsImdldFdpbmRvdyIsImV4dGVuZCIsImRvY3VtZW50cyIsImRvYyIsIm9uV2luZG93VW5sb2FkIiwic2NvcGUiLCJyZW1vdmUiLCJEYXRlIiwibm93IiwiRGUiLCJKIiwiUW4iLCJyZXR1cm4iLCJnZXRQb2ludGVyVHlwZSIsImdldEV2ZW50VGFyZ2V0cyIsInByZXZUb3VjaFRpbWUiLCJjaGFuZ2VkVG91Y2hlcyIsInBvaW50ZXIiLCJwb2ludGVySWQiLCJnZXRQb2ludGVySWQiLCJwb2ludGVyVHlwZSIsImV2ZW50VHlwZSIsImV2ZW50VGFyZ2V0IiwiY3VyRXZlbnRUYXJnZXQiLCJzdXBwb3J0c1BvaW50ZXJFdmVudCIsInBvaW50ZXJJc0Rvd24iLCJ0aW1lU3RhbXAiLCJzZWFyY2giLCJzZWFyY2hEZXRhaWxzIiwibmV3IiwiZG9jRXZlbnRzIiwiaXNJT1MiLCJwYXNzaXZlIiwiZGVsZWdhdGVkRXZlbnRzIiwiZGVsZWdhdGVMaXN0ZW5lciIsImRlbGVnYXRlVXNlQ2FwdHVyZSIsImxpc3RlbmVyIiwicEV2ZW50VHlwZXMiLCJfaW50ZXJhY3RpbmciLCJwb2ludGVycyIsInNvbWUiLCJDIiwibm9kZUNvbnRhaW5zIiwiZG93blRhcmdldCIsInJlbW92ZVBvaW50ZXIiLCJldmVudCIsIlBvaW50ZXJFdmVudCIsImRvd24iLCJwb2ludGVyRG93biIsIm1vdmUiLCJwb2ludGVyTW92ZSIsInVwIiwicG9pbnRlclVwIiwiY2FuY2VsIiwiZG9jdW1lbnRCbHVyIiwiSW50ZXJhY3Rpb24iLCJwb2ludGVyTW92ZVRvbGVyYW5jZSIsInNjb3BlRmlyZSIsIm9uRG9jU2lnbmFsIiwiZG9PbkludGVyYWN0aW9ucyIsIm1ldGhvZE5hbWVzIiwiX1Byb3h5TWV0aG9kcyIsIl9Qcm94eVZhbHVlcyIsIkhuIiwicHJlcGFyZWQiLCJwb2ludGVyV2FzTW92ZWQiLCJfcHJveHkiLCJpbnRlcmFjdGluZyIsImF4aXMiLCJlZGdlcyIsIndhcm5PbmNlIiwibmV3Q29vcmRzIiwicHJldiIsImN1ciIsImRlbHRhIiwidmVsb2NpdHkiLCJfc2NvcGVGaXJlIiwidXBkYXRlUG9pbnRlciIsInBvaW50ZXJJbmRleCIsIkdlc3R1cmUiLCJlbmFibGVkIiwiY29weUFjdGlvbiIsInJlY3QiLCJnZXRSZWN0IiwiX3N0b3BwZWQiLCJfZG9QaGFzZSIsImRvd25FdmVudCIsInBoYXNlIiwiRXZlbnRQaGFzZSIsIlN0YXJ0Iiwic2ltdWxhdGlvbiIsIm1vZGlmaWVycyIsImVuZFJlc3VsdCIsInNldENvb3JkcyIsImNvb3JkcyIsIl9ub3ciLCJwYWdlIiwiY2xpZW50IiwiaHlwb3QiLCJnZXRQb2ludGVySW5kZXgiLCJkeCIsImR5IiwiZHVwbGljYXRlIiwic2V0Q29vcmREZWx0YXMiLCJzZXRDb29yZFZlbG9jaXR5IiwiY29weUNvb3JkcyIsInNldFplcm9Db29yZHMiLCJfbGF0ZXN0UG9pbnRlciIsIk1vdmUiLCJfZW5kaW5nIiwiRW5kIiwicHJldkV2ZW50IiwiYXJyIiwiZmluZEluZGV4IiwicG9pbnRlckV4dGVuZCIsImRvd25Qb2ludGVyIiwiZG93blRpbWUiLCJfdXBkYXRlTGF0ZXN0UG9pbnRlciIsInBvaW50ZXJJbmZvIiwicHJlRW5kIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwiYWRkRWRnZXMiLCJkZWx0YVNvdXJjZSIsImlFdmVudCIsIl9jcmVhdGVQcmVwYXJlZEV2ZW50IiwiX2ZpcmVFdmVudCIsIkRvY3VtZW50RnJhZ21lbnQiLCJTVkdFbGVtZW50IiwiU1ZHU1ZHRWxlbWVudCIsIlNWR0VsZW1lbnRJbnN0YW5jZSIsIkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsIkV2ZW50IiwiVG91Y2giLCJNU1BvaW50ZXJFdmVudCIsImNvbnRhaW5zIiwibWVyZ2UiLCJmaW5kIiwiV2luZG93IiwicmVhbFdpbmRvdyIsImNyZWF0ZVRleHROb2RlIiwib3duZXJEb2N1bWVudCIsIndyYXAiLCJkZWZhdWx0VmlldyIsInBsYWluT2JqZWN0IiwiYm9vbCIsImRvY0ZyYWciLCJub2RlTmFtZSIsIkkiLCJUIiwiRCIsIkEiLCJuYXZpZ2F0b3IiLCJzdXBwb3J0c1RvdWNoIiwiRG9jdW1lbnRUb3VjaCIsInBvaW50ZXJFbmFibGVkIiwicGxhdGZvcm0iLCJpc0lPUzciLCJhcHBWZXJzaW9uIiwiaXNJZTkiLCJ1c2VyQWdlbnQiLCJpc09wZXJhTW9iaWxlIiwiYXBwTmFtZSIsInByZWZpeGVkTWF0Y2hlc1NlbGVjdG9yIiwib3ZlciIsIm91dCIsIndoZWVsRXZlbnQiLCJ6IiwiUiIsInBhcmVudE5vZGUiLCJjbG9zZXN0IiwiTiIsIkciLCJWIiwibWF0Y2hlc1NlbGVjdG9yIiwiaW5kZXhPZkRlZXBlc3RFbGVtZW50IiwiVSIsIlgiLCJvd25lclNWR0VsZW1lbnQiLCJsYXN0Q2hpbGQiLCJwcmV2aW91c1NpYmxpbmciLCJZIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInpJbmRleCIsIm1hdGNoZXNVcFRvIiwiZ2V0QWN0dWFsRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiZ2V0U2Nyb2xsWFkiLCJCIiwiZ2V0RWxlbWVudENsaWVudFJlY3QiLCJIIiwiZ2V0RWxlbWVudFJlY3QiLCJXIiwiZ2V0UGF0aCIsInRyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsInEiLCJMIiwiRiIsImhvc3QiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZ2V0Q2xpZW50UmVjdHMiLCJLIiwic3FydCIsIiQiLCJRIiwicHJlZml4ZWRQcm9wUkVzIiwid2Via2l0IiwibW96IiwiWiIsImVlIiwibWF4IiwiaXNOYXRpdmVQb2ludGVyIiwiY2UiLCJnZXRYWSIsImZlIiwiZ2V0UGFnZVhZIiwicGUiLCJnZXRDbGllbnRYWSIsImRlIiwiaWUiLCJpZGVudGlmaWVyIiwieWUiLCJnZXRUb3VjaFBhaXIiLCJ2ZSIsInBvaW50ZXJBdmVyYWdlIiwidG91Y2hCQm94IiwidG91Y2hlcyIsInBhZ2VYIiwicGFnZVkiLCJ0b3VjaERpc3RhbmNlIiwib2UiLCJ0b3VjaEFuZ2xlIiwiYXRhbjIiLCJQSSIsIm5lIiwiY29tcG9zZWRQYXRoIiwicmUiLCJjdXJyZW50VGFyZ2V0IiwiY29vcmRzVG9FdmVudCIsImJ1dHRvbnMiLCJhZSIsInRlIiwibGUiLCJzZSIsInVlIiwiY2xpZW50WCIsImNsaWVudFkiLCJzY3JlZW5YIiwic2NyZWVuWSIsIm1lIiwiZ2UiLCJoZSIsImdldFN0cmluZ09wdGlvblJlc3VsdCIsIl9lIiwicmVzb2x2ZVJlY3RMaWtlIiwid2UiLCJyZWN0VG9YWSIsInh5d2hUb1RsYnIiLCJPZSIsInRsYnJUb1h5d2giLCJiZSIsIlBlIiwieGUiLCJTZSIsIk1lIiwiamUiLCJrZSIsIkVlIiwiVGUiLCJGYWtlRXZlbnQiLCJJZSIsIkFlIiwiWGUiLCJ6ZSIsIkNlIiwiUmUiLCJXZSIsIlllIiwiRmUiLCJMZSIsInFlIiwiVmUiLCJHZSIsIktlIiwidHlwZUNvdW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJRZSIsInN1cHBvcnRzT3B0aW9ucyIsImNhcHR1cmUiLCJVZSIsIkJlIiwiJGUiLCJzZWxlY3RvcnMiLCJjb250ZXh0cyIsIkhlIiwib3JpZ2luYWxFdmVudCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiTmUiLCJhZGREZWxlZ2F0ZSIsInJlbW92ZURlbGVnYXRlIiwic3VwcG9ydHNQYXNzaXZlIiwiX2VsZW1lbnRzIiwiX3RhcmdldHMiLCJjcmVhdGVFbGVtZW50IiwiWmUiLCJKZSIsIm9yaWdpbiIsImV0IiwidHQiLCJvdCIsImF0IiwicnQiLCJudCIsIml0IiwidHJpbSIsInNwbGl0IiwidXQiLCJzdCIsImx0IiwiY3QiLCJmdCIsInJlcXVlc3QiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImR0IiwiYnQiLCJjb25zb2xlIiwid2FybiIsIl9nZXRRQmV6aWVyVmFsdWUiLCJUdCIsImdldFF1YWRyYXRpY0N1cnZlUG9pbnQiLCJlYXNlT3V0UXVhZCIsIk90Iiwid3QiLCJQdCIsIl90IiwieHQiLCJTdCIsImp0IiwiTXQiLCJpcyIsImRvbSIsInZ0IiwiRHQiLCJ5dCIsIm10IiwiZ3QiLCJodCIsIkV0Iiwia3QiLCJ6dCIsImJhc2UiLCJwZXJBY3Rpb24iLCJhY3Rpb25zIiwiUnQiLCJXdCIsIkZ0IiwiWHQiLCJZdCIsIk50IiwicXQiLCJWdCIsImltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsIkd0IiwicHJvcGFnYXRpb25TdG9wcGVkIiwiTHQiLCJCdCIsIkh0IiwiS3QiLCJubiIsIiR0IiwiUXQiLCJadCIsIkp0IiwiZW4iLCJ0biIsInJuIiwiYW4iLCJ1biIsInNuIiwibG4iLCJfYWN0aW9ucyIsIl9jb250ZXh0IiwiY29udGV4dCIsIl93aW4iLCJfZG9jIiwib25zdGFydCIsIm9ubW92ZSIsIm9uZW5kIiwib25pbmVydGlhc3RhcnQiLCJvZmYiLCJfZGVmYXVsdHMiLCJ1cGRhdGVQZXJBY3Rpb25MaXN0ZW5lcnMiLCJfYmFja0NvbXBhdE9wdGlvbiIsInRlc3RJZ25vcmUiLCJpZ25vcmVGcm9tIiwidGVzdEFsbG93IiwiYWxsb3dGcm9tIiwiX29uT2ZmIiwic2V0UGVyQWN0aW9uIiwiY24iLCJwbiIsImRuIiwidm4iLCJibiIsInluIiwibW4iLCJnbiIsImhuIiwid24iLCJQbiIsImFkZExpc3RlbmVycyIsInNlbGVjdG9yTWFwIiwiYWRkRG9jdW1lbnQiLCJpbkNvbnRleHQiLCJPbiIsIl9uIiwieG4iLCJTbiIsImpuIiwiTW4iLCJFbiIsIkJhc2VFdmVudCIsIl9OT05FIiwia24iLCJfaW50ZXJhY3Rpb24iLCJEbiIsIkludGVyYWN0RXZlbnQiLCJJbiIsIkFuIiwiem4iLCJObiIsIkNuIiwiUm4iLCJXbiIsIlhuIiwiWW4iLCJMbiIsInFuIiwiVm4iLCJHbiIsIlVuIiwiY3RybEtleSIsImFsdEtleSIsInNoaWZ0S2V5IiwibWV0YUtleSIsImJ1dHRvbiIsInJlbGF0ZWRUYXJnZXQiLCJ0MCIsIngwIiwieTAiLCJjbGllbnRYMCIsImNsaWVudFkwIiwiZHVyYXRpb24iLCJzcGVlZCIsInN3aXBlIiwiZ2V0U3dpcGUiLCJ2ZWxvY2l0eVkiLCJ2ZWxvY2l0eVgiLCJhbmdsZSIsIkZuIiwiQm4iLCJQb2ludGVySW5mbyIsIiRuIiwiS24iLCJabiIsIkpuIiwiZXIiLCJ0ciIsIm1ldGhvZE9yZGVyIiwic2ltdWxhdGlvblJlc3VtZSIsImFsbG93UmVzdW1lIiwibW91c2VPclBlbiIsIm5yIiwiaGFzUG9pbnRlciIsImlkbGUiLCJnZXN0dXJlIiwicnIiLCJvciIsImlyIiwiYXIiLCJ1ciIsImNyIiwic3IiLCJsciIsImZyIiwicHIiLCJEcmFnIiwiZHIiLCJkcmFnZ2FibGUiLCJkcmFnIiwibW91c2VCdXR0b25zIiwiYWN0aW9uIiwibG9ja0F4aXMiLCJzdGFydEF4aXMiLCJzZXRPbkV2ZW50cyIsImJlZm9yZU1vdmUiLCJnZXRDdXJzb3IiLCJ2ciIsInlyIiwibXIiLCJnciIsImhyIiwiT3IiLCJiciIsIlByIiwiX3IiLCJ4ciIsIlNyIiwianIiLCJkcm9wem9uZSIsImRyYWdFdmVudCIsImRyb3BTdGF0ZSIsImVudGVyIiwiYWN0aXZlRHJvcHMiLCJ3ciIsIk1yIiwiRXIiLCJrciIsIkRyIiwiQXIiLCJUciIsInpyIiwiSXIiLCJDciIsInNsaWNlIiwiUnIiLCJpbnRlcmFjdGFibGVzIiwiZHJvcCIsImFjY2VwdCIsImRyYWdnYWJsZUVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiV3IiLCJkcm9wQ2hlY2siLCJYciIsImxlYXZlIiwiYWN0aXZhdGUiLCJkZWFjdGl2YXRlIiwiZHJhZ0xlYXZlIiwicHJldkRyb3B6b25lIiwiZHJhZ0VudGVyIiwiZHJhZ21vdmUiLCJOciIsIllyIiwiZHluYW1pY0Ryb3AiLCJGciIsIm5vcm1hbGl6ZUxpc3RlbmVycyIsIm9uZHJvcCIsIm9uZHJvcGFjdGl2YXRlIiwib25kcm9wZGVhY3RpdmF0ZSIsIm9uZHJhZ2VudGVyIiwib25kcmFnbGVhdmUiLCJvbmRyb3Btb3ZlIiwib3ZlcmxhcCIsImNoZWNrZXIiLCJnZXRPcmlnaW5YWSIsImdldEFjdGl2ZURyb3BzIiwiZ2V0RHJvcCIsImdldERyb3BFdmVudHMiLCJmaXJlRHJvcEV2ZW50cyIsIkxyIiwicXIiLCJWciIsIkdyIiwiVXIiLCJCciIsIkhyIiwiS3IiLCIkciIsImRpc3RhbmNlIiwiYm94Iiwic2NhbGUiLCJkcyIsImRhIiwic3RhcnREaXN0YW5jZSIsInN0YXJ0QW5nbGUiLCJpc05hTiIsIlFyIiwiZ2VzdHVyYWJsZSIsIlpyIiwiSnIiLCJlbyIsInRvIiwibm8iLCJybyIsInNvIiwib28iLCJpbyIsImFvIiwidW8iLCJsbyIsImNvIiwiUmVzaXplIiwicmVzaXplQXhlcyIsInJlc2l6ZSIsInNxdWFyZSIsImF4ZXMiLCJmbyIsImN1cnNvcnMiLCJ4eSIsInRvcGxlZnQiLCJib3R0b21yaWdodCIsInRvcHJpZ2h0IiwiYm90dG9tbGVmdCIsImRlZmF1bHRNYXJnaW4iLCJyZXNpemFibGUiLCJwcmVzZXJ2ZUFzcGVjdFJhdGlvIiwiX3JlY3RzIiwiY29ycmVjdGVkIiwiZGVsdGFSZWN0IiwiaW52ZXJ0IiwibWFyZ2luIiwiTmFOIiwicG8iLCJ2byIsImdvIiwiaG8iLCJ5byIsIm1vIiwiYm8iLCJPbyIsIndvIiwiZ2V0Q29udGFpbmVyIiwia28iLCJnZXRTY3JvbGwiLCJEbyIsImdldFNjcm9sbFNpemUiLCJ4byIsInNjcm9sbFdpZHRoIiwic2Nyb2xsSGVpZ2h0IiwiZ2V0U2Nyb2xsU2l6ZURlbHRhIiwiYXV0b1Njcm9sbCIsImNvbnRhaW5lciIsIlBvIiwiX28iLCJNbyIsIlNvIiwiam8iLCJFbyIsImlzU2Nyb2xsaW5nIiwicHJldlRpbWUiLCJzY3JvbGwiLCJzY3JvbGxCeSIsImNoZWNrIiwib25JbnRlcmFjdGlvbk1vdmUiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJUbyIsIklvIiwiQW8iLCJ6byIsIkNvIiwiUm8iLCJzdHlsZUN1cnNvciIsIldvIiwiYWN0aW9uQ2hlY2tlciIsIlhvIiwiZ2V0QWN0aW9uIiwiMCIsIjEiLCIzIiwiNCIsIk5vIiwiWW8iLCJGbyIsIkxvIiwiVm8iLCJxbyIsIkdvIiwidGVzdElnbm9yZUFsbG93IiwiS28iLCJVbyIsIkJvIiwiZm9yRWFjaE1hdGNoIiwibWFudWFsU3RhcnQiLCJIbyIsIlpvIiwibWF4UGVyRWxlbWVudCIsImF1dG9TdGFydCIsIm1heEludGVyYWN0aW9ucyIsIiRvIiwiUW8iLCJjdXJzb3JFbGVtZW50IiwiY3Vyc29yIiwiY3Vyc29yQ2hlY2tlciIsIkpvIiwid2l0aGluSW50ZXJhY3Rpb25MaW1pdCIsInZhbGlkYXRlQWN0aW9uIiwiZWkiLCJ0aSIsIm5pIiwicmkiLCJvaSIsImFpIiwiaWkiLCJ1aSIsInNpIiwibGkiLCJjaSIsImZpIiwiaG9sZCIsImRlbGF5IiwicGkiLCJhdXRvU3RhcnRIb2xkVGltZXIiLCJnZXRIb2xkRHVyYXRpb24iLCJkaSIsInZpIiwibWkiLCJ5aSIsImdpIiwiaGkiLCJiaSIsImppIiwiT2kiLCJ3aSIsIlBpIiwiX2kiLCJ4aSIsIlNpIiwiY2hlY2tBbmRQcmV2ZW50RGVmYXVsdCIsImdldERvY09wdGlvbnMiLCJNaSIsIkRpIiwiVGkiLCJFaSIsImtpIiwiQ2kiLCJ0b3VjaEFjdGlvbiIsImJveFNpemluZyIsIm5vTGlzdGVuZXJzIiwiWWkiLCJGaSIsIkxpIiwic3RhcnRBbGwiLCJLaSIsInNldEFsbCIsIiRpIiwicHJlcGFyZVN0YXRlcyIsIkppIiwiZWEiLCJyZXN0b3JlQ29vcmRzIiwidGEiLCJzaG91bGREbyIsIm5hIiwiZ2V0UmVjdE9mZnNldCIsInJhIiwibWFrZU1vZGlmaWVyIiwibWV0aG9kcyIsImJlZm9yZUVuZCIsIl9tZXRob2RzIiwicWkiLCJWaSIsIkdpIiwiVWkiLCJCaSIsIkhpIiwic3RhcnRPZmZzZXQiLCJzdGFydERlbHRhIiwicGFnZUNvb3JkcyIsInJlcXVpcmVFbmRPbmx5IiwicHJldkNvb3JkcyIsInByZXZSZWN0IiwicmVjdERlbHRhIiwiZXZlbnRQcm9wcyIsIlFpIiwic2tpcE1vZGlmaWVycyIsIm1vZGlmaWVkQ29vcmRzIiwiWmkiLCJlbmRPbmx5IiwiYWx3YXlzT25FbmQiLCJzZXRTdGFydCIsIm9hIiwiaWEiLCJub1ByZUVuZCIsImFhIiwidWEiLCJzYSIsImxhIiwiY2EiLCJmYSIsInBhIiwidmEiLCJoYSIsInJlc2lzdGFuY2UiLCJsb2ciLCJlbmRTcGVlZCIsInYwIiwic3RhcnRFdmVudCIsInN4Iiwic3kiLCJtb2RpZmllZFhlIiwidngwIiwibW9kaWZpZWRZZSIsInZ5MCIsImxhbWJkYV92MCIsIm9uZV92ZV92MCIsInlhIiwiZ2EiLCJpbmVydGlhIiwiZXhwIiwidGltZW91dCIsImFjdGl2ZSIsIm1hIiwic21vb3RoRW5kRHVyYXRpb24iLCJzbW9vdGhFbmQiLCJ1cENvb3JkcyIsIlJlc3VtZSIsIkluZXJ0aWFTdGFydCIsImJhIiwibWluU3BlZWQiLCJjYWxjSW5lcnRpYSIsImluZXJ0aWFUaWNrIiwic21vdGhFbmRUaWNrIiwidXBkYXRlSW5lcnRpYUNvb3JkcyIsIk9hIiwid2EiLCJQYSIsInhhIiwiU2EiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImphIiwic3RhcnRDb29yZHMiLCJlZGdlU2lnbiIsIk1hIiwic3RhcnRSZWN0IiwicmF0aW8iLCJFYSIsImVxdWFsRGVsdGEiLCJsaW5rZWRFZGdlcyIsInhJc1ByaW1hcnlBeGlzIiwic3ViU3RhdGVzIiwia2EiLCJEYSIsImdldFJlc3RyaWN0aW9uUmVjdCIsIldhIiwiVGEiLCJJYSIsIkFhIiwiUmEiLCJ6YSIsIkNhIiwiWGEiLCJlbGVtZW50UmVjdCIsInJlc3RyaWN0aW9uIiwiTmEiLCJZYSIsIkZhIiwiTGEiLCJxYSIsIlZhIiwiR2EiLCJVYSIsIkJhIiwiSGEiLCJub0lubmVyIiwibm9PdXRlciIsImlubmVyIiwib3V0ZXIiLCJLYSIsIiRhIiwiWmEiLCJRYSIsIkphIiwiZXUiLCJ0dSIsIm51IiwicnUiLCJ1dSIsIm91IiwiYXUiLCJpdSIsInN1IiwibHUiLCJjdSIsImZ1IiwicHUiLCJkdSIsInZ1IiwieXUiLCJvZmZzZXRXaXRoT3JpZ2luIiwicmVsYXRpdmVQb2ludHMiLCJvZmZzZXRzIiwicmVsYXRpdmVQb2ludCIsInRhcmdldHMiLCJpblJhbmdlIiwibXUiLCJndSIsImh1IiwiUHUiLCJidSIsInd1IiwiT3UiLCJfdSIsInh1IiwidGFyZ2V0RmllbGRzIiwiU3UiLCJqdSIsImt1IiwiTXUiLCJFdSIsIkR1IiwiVHUiLCJhc3BlY3RSYXRpbyIsInJlc3RyaWN0U2l6ZSIsInJlc3RyaWN0RWRnZXMiLCJyZXN0cmljdFJlY3QiLCJyZXN0cmljdCIsInNuYXBFZGdlcyIsInNuYXBTaXplIiwic25hcCIsIkl1IiwiWXUiLCJBdSIsInp1IiwiQ3UiLCJSdSIsIld1IiwiWHUiLCJOdSIsIkZ1IiwiTHUiLCJxdSIsIlZ1IiwiR3UiLCJVdSIsIkJ1IiwiSHUiLCJLdSIsIiR1IiwiUXUiLCJadSIsImVzIiwiSnUiLCJucyIsInJzIiwib3MiLCJhcyIsInRhcFRpbWUiLCJkb3VibGUiLCJwcmV2VGFwIiwidHMiLCJ1cyIsInNzIiwicHMiLCJscyIsImZzIiwiY3MiLCJwb2ludGVyRXZlbnRzIiwidnMiLCJub2RlIiwiZXZlbnRhYmxlIiwiaG9sZER1cmF0aW9uIiwiY29sbGVjdEV2ZW50VGFyZ2V0cyIsInlzIiwicG9pbnRlckV2ZW50IiwiX3N1YnRyYWN0T3JpZ2luIiwiX2FkZE9yaWdpbiIsImdzIiwiaHMiLCJicyIsIk9zIiwid3MiLCJob2xkSW50ZXJ2YWxIYW5kbGUiLCJjbGVhckludGVydmFsIiwiUHMiLCJob2xkUmVwZWF0SW50ZXJ2YWwiLCJfcyIsInhzIiwiU3MiLCJqcyIsIk1zIiwiRXMiLCJrcyIsIkRzIiwiVHMiLCJJcyIsInpzIiwiQXMiLCJDcyIsIldzIiwicmVmbG93IiwiX3JlZmxvd1Byb21pc2UiLCJfcmVmbG93UmVzb2x2ZSIsIlJlZmxvdyIsImFsbCIsIlhzIiwiTnMiLCJZcyIsIkZzIiwiTHMiLCJVcyIsInFzIiwiVnMiLCJHcyIsIkJzIiwiSHMiLCJLcyIsImlzU2V0IiwiZGVidWciLCJnZXRQb2ludGVyQXZlcmFnZSIsImdldFRvdWNoQkJveCIsImdldFRvdWNoRGlzdGFuY2UiLCJnZXRUb3VjaEFuZ2xlIiwiJHMiLCJRcyIsIlpzIiwic2wiLCJubCIsImFsIiwicmwiLCJvbCIsInRsIiwiSnMiLCJ1bCIsImZsIiwibGwiLCJjbCIsInZlcnNpb24iLCJwbCIsImRsIiwidmwiLCJ5bCIsImxpbWl0cyIsImdyaWQiLCJyb3VuZCIsImNvb3JkRmllbGRzIiwibWwiLCJobCIsImdsIiwiYmwiLCJFbCIsIk9sIiwid2wiLCJQbCIsIl9sIiwieGwiLCJTbCIsIk1sIiwic25hcHBlcnMiLCJjcmVhdGVTbmFwR3JpZCIsImtsIiwiRGwiLCJUbCIsIklsIiwiemwiLCJBbCIsIkNsIiwiVmlld3BvcnREYXRhQ29tcG9uZW50IiwiZ2V0QXR0cmlidXRlIiwiUmV2b2dyVmlld3BvcnRTY3JvbGxhYmxlIiwiY2xhc3NfMiIsInNjcm9sbFNpemUiLCJwcmV2ZW50QXJ0aWZpY2lhbFNjcm9sbCIsInNjcm9sbFZpcnRZIiwidmVydGljYWxWaXJ0U2Nyb2xsIiwidmVydGljYWxTY3JvbGwiLCJob3Jpem9udGFsU2Nyb2xsIiwiZ2V0U2Nyb2xsYmFyV2lkdGgiLCJ2aXNpYmlsaXR5Iiwib3ZlcmZsb3ciLCJtc092ZXJmbG93U3R5bGUiLCJhcHBlbmRDaGlsZCIsInNjcm9sbGJhcldpZHRoIiwib2Zmc2V0V2lkdGgiLCJyZW1vdmVDaGlsZCIsIm9sZFZhbFkiLCJvbGRWYWxYIiwiY29tcG9uZW50RGlkUmVuZGVyIiwibWFyZ2luUmlnaHQiLCJvblNjcm9sbCJdLCJtYXBwaW5ncyI6Im1JQUFBLDBjQXFEeUJBLEdBQUlDLEdBQ3JCQyxVQXREUix5RUFBSUMsVUFBd0MsU0FBVUMsUUFBU0MsV0FBWUMsRUFBR0MsV0FFMUUsT0FBTyxJQUFLRCxJQUFNQSxFQUFJRSxXQUFVLFNBQVVDLFFBQVNDLFFBQy9DLFNBQVNDLFVBQVVDLE9BQVMsSUFBTUMsS0FBS04sVUFBVU8sS0FBS0YsUUFBVyxNQUFPRyxHQUFLTCxPQUFPSyxJQUNwRixTQUFTQyxTQUFTSixPQUFTLElBQU1DLEtBQUtOLFVBQWlCLE1BQUVLLFFBQVcsTUFBT0csR0FBS0wsT0FBT0ssSUFDdkYsU0FBU0YsS0FBS0ksUUFBVUEsT0FBT0MsS0FBT1QsUUFBUVEsT0FBT0ws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LFVBQVV0bEIsSUFBSSxZQUFjLFNBQzdNLDBEQUFFLE1BQU8sQ0FBRWdwQixNQUFPLHFCQUFzQkMsSUFBSyxTQUFVQyxJQUFNZixNQUFNd29DLGlCQUFtQnpuQyxJQUFPc29DLFNBQVUsV0FBYyxPQUFPcnBDLE1BQU1PLFlBQWdCLDBEQUFFLE1BQU8sQ0FBRU0sTUFBTyx1QkFBeUIsMERBQUUsTUFBTyxDQUFFQSxNQUFPLGlCQUFrQkMsSUFBSyxTQUFVQyxJQUFNZixNQUFNaFksT0FBUytZLEtBQVMsMERBQUUsT0FBUSxDQUFFdFosS0FBTSxZQUFjLDBEQUFFLE1BQU8sQ0FBRW9aLE1BQU8sb0JBQXNCLDBEQUFFLE1BQU8sQ0FBRUEsTUFBTyxpQkFBa0JDLElBQUssU0FBVUMsSUFBTWYsTUFBTXVvQyxlQUFpQnhuQyxJQUFPc29DLFNBQVUsV0FBYyxPQUFPcnBDLE1BQU1RLFlBQWdCLDBEQUFFLE1BQU8sQ0FBRVUsTUFBTyxDQUFFTyxPQUFRdEUsVUFBVXRsQixJQUFJLFlBQWMsS0FBTTJwQixNQUFPcEUsVUFBVXZsQixJQUFJLFlBQWMsT0FBVSwwREFBRSxPQUFRLENBQUU0UCxLQUFNLG1CQUdobUJ5Z0QsUUFqR2tDLEkiLCJmaWxlIjoiNy5kNzE4MTE0MzAwZWQ1ZThjYWM5Yy5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xudmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcbiAgICByZXR1cm4gcjtcbn07XG5pbXBvcnQgeyBnIGFzIGdldFJlbmRlcmluZ1JlZiwgZiBhcyBmb3JjZVVwZGF0ZSwgaCwgciBhcyByZWdpc3Rlckluc3RhbmNlLCBjIGFzIGdldEVsZW1lbnQgfSBmcm9tICcuL2luZGV4LWMyYzY2ZTQ2LmpzJztcbnZhciBhcHBlbmRUb01hcCA9IGZ1bmN0aW9uIChtYXAsIHByb3BOYW1lLCB2YWx1ZSkge1xuICAgIHZhciBpdGVtcyA9IG1hcC5nZXQocHJvcE5hbWUpO1xuICAgIGlmICghaXRlbXMpIHtcbiAgICAgICAgbWFwLnNldChwcm9wTmFtZSwgW3ZhbHVlXSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpdGVtcy5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XG4gICAgfVxufTtcbnZhciBkZWJvdW5jZSA9IGZ1bmN0aW9uIChmbiwgbXMpIHtcbiAgICB2YXIgdGltZW91dElkO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9iID0gMDsgX2IgPCBhcmd1bWVudHMubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICBhcmdzW19iXSA9IGFyZ3VtZW50c1tfYl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVvdXRJZCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lb3V0SWQgPSAwO1xuICAgICAgICAgICAgZm4uYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgICAgfSwgbXMpO1xuICAgIH07XG59O1xuLyoqXG4gKiBDaGVjayBpZiBhIHBvc3NpYmxlIGVsZW1lbnQgaXNDb25uZWN0ZWQuXG4gKiBUaGUgcHJvcGVydHkgbWlnaHQgbm90IGJlIHRoZXJlLCBzbyB3ZSBjaGVjayBmb3IgaXQuXG4gKlxuICogV2Ugd2FudCBpdCB0byByZXR1cm4gdHJ1ZSBpZiBpc0Nvbm5lY3RlZCBpcyBub3QgYSBwcm9wZXJ0eSxcbiAqIG90aGVyd2lzZSB3ZSB3b3VsZCByZW1vdmUgdGhlc2UgZWxlbWVudHMgYW5kIHdvdWxkIG5vdCB1cGRhdGUuXG4gKlxuICogQmV0dGVyIGxlYWsgaW4gRWRnZSB0aGFuIHRvIGJlIHVzZWxlc3MuXG4gKi9cbnZhciBpc0Nvbm5lY3RlZCA9IGZ1bmN0aW9uIChtYXliZUVsZW1lbnQpIHsgcmV0dXJuICEoJ2lzQ29ubmVjdGVkJyBpbiBtYXliZUVsZW1lbnQpIHx8IG1heWJlRWxlbWVudC5pc0Nvbm5lY3RlZDsgfTtcbnZhciBjbGVhbnVwRWxlbWVudHMgPSBkZWJvdW5jZShmdW5jdGlvbiAobWFwKSB7XG4gICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IG1hcC5rZXlzKCk7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgIHZhciBrZXkgPSBfY1tfYl07XG4gICAgICAgIG1hcC5zZXQoa2V5LCBtYXAuZ2V0KGtleSkuZmlsdGVyKGlzQ29ubmVjdGVkKSk7XG4gICAgfVxufSwgMjAwMCk7XG52YXIgc3RlbmNpbFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChfYikge1xuICAgIHZhciBvbiA9IF9iLm9uO1xuICAgIHZhciBlbG1zVG9VcGRhdGUgPSBuZXcgTWFwKCk7XG4gICAgaWYgKHR5cGVvZiBnZXRSZW5kZXJpbmdSZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIG5vdCBpbiBhIHN0ZW5jaWwgcHJvamVjdCwgd2UgZG8gbm90aGluZy5cbiAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBub3QgcmVhbGx5IGV4cG9ydGVkIGJ5IEBzdGVuY2lsL2NvcmUuXG4gICAgICAgIG9uKCdnZXQnLCBmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICAgICAgICAgIHZhciBlbG0gPSBnZXRSZW5kZXJpbmdSZWYoKTtcbiAgICAgICAgICAgIGlmIChlbG0pIHtcbiAgICAgICAgICAgICAgICBhcHBlbmRUb01hcChlbG1zVG9VcGRhdGUsIHByb3BOYW1lLCBlbG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgb24oJ3NldCcsIGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gZWxtc1RvVXBkYXRlLmdldChwcm9wTmFtZSk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICBlbG1zVG9VcGRhdGUuc2V0KHByb3BOYW1lLCBlbGVtZW50cy5maWx0ZXIoZm9yY2VVcGRhdGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsZWFudXBFbGVtZW50cyhlbG1zVG9VcGRhdGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgb24oJ3Jlc2V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZWxtc1RvVXBkYXRlLmZvckVhY2goZnVuY3Rpb24gKGVsbXMpIHsgcmV0dXJuIGVsbXMuZm9yRWFjaChmb3JjZVVwZGF0ZSk7IH0pO1xuICAgICAgICAgICAgY2xlYW51cEVsZW1lbnRzKGVsbXNUb1VwZGF0ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG52YXIgY3JlYXRlT2JzZXJ2YWJsZU1hcCA9IGZ1bmN0aW9uIChkZWZhdWx0U3RhdGUpIHtcbiAgICB2YXIgc3RhdGVzID0gbmV3IE1hcChPYmplY3QuZW50cmllcyhkZWZhdWx0U3RhdGUgIT09IG51bGwgJiYgZGVmYXVsdFN0YXRlICE9PSB2b2lkIDAgPyBkZWZhdWx0U3RhdGUgOiB7fSkpO1xuICAgIHZhciBoYW5kbGVycyA9IHtcbiAgICAgICAgZ2V0OiBbXSxcbiAgICAgICAgc2V0OiBbXSxcbiAgICAgICAgcmVzZXQ6IFtdLFxuICAgIH07XG4gICAgdmFyIHJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzdGF0ZXMgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKGRlZmF1bHRTdGF0ZSAhPT0gbnVsbCAmJiBkZWZhdWx0U3RhdGUgIT09IHZvaWQgMCA/IGRlZmF1bHRTdGF0ZSA6IHt9KSk7XG4gICAgICAgIGhhbmRsZXJzLnJlc2V0LmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IHJldHVybiBjYigpOyB9KTtcbiAgICB9O1xuICAgIHZhciBnZXQgPSBmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICAgICAgaGFuZGxlcnMuZ2V0LmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IHJldHVybiBjYihwcm9wTmFtZSk7IH0pO1xuICAgICAgICByZXR1cm4gc3RhdGVzLmdldChwcm9wTmFtZSk7XG4gICAgfTtcbiAgICB2YXIgc2V0ID0gZnVuY3Rpb24gKHByb3BOYW1lLCB2YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSBzdGF0ZXMuZ2V0KHByb3BOYW1lKTtcbiAgICAgICAgaWYgKG9sZFZhbHVlICE9PSB2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBzdGF0ZXMuc2V0KHByb3BOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zZXQuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHsgcmV0dXJuIGNiKHByb3BOYW1lLCB2YWx1ZSwgb2xkVmFsdWUpOyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0YXRlID0gKHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyB7fVxuICAgICAgICA6IG5ldyBQcm94eShkZWZhdWx0U3RhdGUsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKF8sIHByb3BOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldChwcm9wTmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3duS2V5czogZnVuY3Rpb24gKF8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShzdGF0ZXMua2V5cygpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXM6IGZ1bmN0aW9uIChfLCBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZXMuaGFzKHByb3BOYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChfLCBwcm9wTmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZXQocHJvcE5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICB2YXIgb24gPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBoYW5kbGVyc1tldmVudE5hbWVdLnB1c2goY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVtb3ZlRnJvbUFycmF5KGhhbmRsZXJzW2V2ZW50TmFtZV0sIGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBvbkNoYW5nZSA9IGZ1bmN0aW9uIChwcm9wTmFtZSwgY2IpIHtcbiAgICAgICAgdmFyIHVuU2V0ID0gb24oJ3NldCcsIGZ1bmN0aW9uIChrZXksIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgIGNiKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB1blJlc2V0ID0gb24oJ3Jlc2V0JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gY2IoZGVmYXVsdFN0YXRlW3Byb3BOYW1lXSk7IH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdW5TZXQoKTtcbiAgICAgICAgICAgIHVuUmVzZXQoKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciB1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9iID0gMDsgX2IgPCBhcmd1bWVudHMubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zW19iXSA9IGFyZ3VtZW50c1tfYl07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnNldCkge1xuICAgICAgICAgICAgICAgIG9uKCdzZXQnLCBzdWJzY3JpcHRpb24uc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24uZ2V0KSB7XG4gICAgICAgICAgICAgICAgb24oJ2dldCcsIHN1YnNjcmlwdGlvbi5nZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbi5yZXNldCkge1xuICAgICAgICAgICAgICAgIG9uKCdyZXNldCcsIHN1YnNjcmlwdGlvbi5yZXNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICBnZXQ6IGdldCxcbiAgICAgICAgc2V0OiBzZXQsXG4gICAgICAgIG9uOiBvbixcbiAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgICAgICB1c2U6IHVzZSxcbiAgICAgICAgcmVzZXQ6IHJlc2V0LFxuICAgIH07XG59O1xudmFyIHJlbW92ZUZyb21BcnJheSA9IGZ1bmN0aW9uIChhcnJheSwgaXRlbSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgICAgIGFycmF5Lmxlbmd0aC0tO1xuICAgIH1cbn07XG52YXIgY3JlYXRlU3RvcmUgPSBmdW5jdGlvbiAoZGVmYXVsdFN0YXRlKSB7XG4gICAgdmFyIG1hcCA9IGNyZWF0ZU9ic2VydmFibGVNYXAoZGVmYXVsdFN0YXRlKTtcbiAgICBzdGVuY2lsU3Vic2NyaXB0aW9uKG1hcCk7XG4gICAgcmV0dXJuIG1hcDtcbn07XG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gICAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciwgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG4gICAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cbnZhciBfaXNQcm90b3R5cGUgPSBpc1Byb3RvdHlwZTtcbi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xufVxudmFyIF9vdmVyQXJnID0gb3ZlckFyZztcbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gX292ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG52YXIgX25hdGl2ZUtleXMgPSBuYXRpdmVLZXlzO1xuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvJDEgPSBPYmplY3QucHJvdG90eXBlO1xuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90byQxLmhhc093blByb3BlcnR5O1xuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgIGlmICghX2lzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIF9uYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG52YXIgX2Jhc2VLZXlzID0gYmFzZUtleXM7XG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcbmZ1bmN0aW9uIHVud3JhcEV4cG9ydHMoeCkge1xuICAgIHJldHVybiB4ICYmIHguX19lc01vZHVsZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ2RlZmF1bHQnKSA/IHhbJ2RlZmF1bHQnXSA6IHg7XG59XG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG4gICAgcmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGNvbW1vbmpzR2xvYmFsID09ICdvYmplY3QnICYmIGNvbW1vbmpzR2xvYmFsICYmIGNvbW1vbmpzR2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGNvbW1vbmpzR2xvYmFsO1xudmFyIF9mcmVlR2xvYmFsID0gZnJlZUdsb2JhbDtcbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBfZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xudmFyIF9yb290ID0gcm9vdDtcbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCQxID0gX3Jvb3QuU3ltYm9sO1xudmFyIF9TeW1ib2wgPSBTeW1ib2wkMTtcbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byQyID0gT2JqZWN0LnByb3RvdHlwZTtcbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5JDEgPSBvYmplY3RQcm90byQyLmhhc093blByb3BlcnR5O1xuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8kMi50b1N0cmluZztcbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gX1N5bWJvbCA/IF9TeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5JDEuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLCB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgdHJ5IHtcbiAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkgeyB9XG4gICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBfZ2V0UmF3VGFnID0gZ2V0UmF3VGFnO1xuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvJDMgPSBPYmplY3QucHJvdG90eXBlO1xuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nJDEgPSBvYmplY3RQcm90byQzLnRvU3RyaW5nO1xuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nJDEuY2FsbCh2YWx1ZSk7XG59XG52YXIgX29iamVjdFRvU3RyaW5nID0gb2JqZWN0VG9TdHJpbmc7XG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJywgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyQxID0gX1N5bWJvbCA/IF9TeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICB9XG4gICAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyQxICYmIHN5bVRvU3RyaW5nVGFnJDEgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBfZ2V0UmF3VGFnKHZhbHVlKVxuICAgICAgICA6IF9vYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG52YXIgX2Jhc2VHZXRUYWcgPSBiYXNlR2V0VGFnO1xuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxudmFyIGlzT2JqZWN0XzEgPSBpc09iamVjdDtcbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJywgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdF8xKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgIHZhciB0YWcgPSBfYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cbnZhciBpc0Z1bmN0aW9uXzEgPSBpc0Z1bmN0aW9uO1xuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSBfcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG52YXIgX2NvcmVKc0RhdGEgPSBjb3JlSnNEYXRhO1xuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhfY29yZUpzRGF0YSAmJiBfY29yZUpzRGF0YS5rZXlzICYmIF9jb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICAgIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxudmFyIF9pc01hc2tlZCA9IGlzTWFza2VkO1xuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG52YXIgX3RvU291cmNlID0gdG9Tb3VyY2U7XG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvJDEgPSBGdW5jdGlvbi5wcm90b3R5cGUsIG9iamVjdFByb3RvJDQgPSBPYmplY3QucHJvdG90eXBlO1xuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyQxID0gZnVuY1Byb3RvJDEudG9TdHJpbmc7XG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSQyID0gb2JqZWN0UHJvdG8kNC5oYXNPd25Qcm9wZXJ0eTtcbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgIGZ1bmNUb1N0cmluZyQxLmNhbGwoaGFzT3duUHJvcGVydHkkMikucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCcpO1xuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0XzEodmFsdWUpIHx8IF9pc01hc2tlZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb25fMSh2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QoX3RvU291cmNlKHZhbHVlKSk7XG59XG52YXIgX2Jhc2VJc05hdGl2ZSA9IGJhc2VJc05hdGl2ZTtcbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG52YXIgX2dldFZhbHVlID0gZ2V0VmFsdWU7XG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSBfZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgIHJldHVybiBfYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxudmFyIF9nZXROYXRpdmUgPSBnZXROYXRpdmU7XG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBfZ2V0TmF0aXZlKF9yb290LCAnRGF0YVZpZXcnKTtcbnZhciBfRGF0YVZpZXcgPSBEYXRhVmlldztcbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAkMSA9IF9nZXROYXRpdmUoX3Jvb3QsICdNYXAnKTtcbnZhciBfTWFwID0gTWFwJDE7XG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IF9nZXROYXRpdmUoX3Jvb3QsICdQcm9taXNlJyk7XG52YXIgX1Byb21pc2UgPSBQcm9taXNlO1xuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IF9nZXROYXRpdmUoX3Jvb3QsICdTZXQnKTtcbnZhciBfU2V0ID0gU2V0O1xuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAkMSA9IF9nZXROYXRpdmUoX3Jvb3QsICdXZWFrTWFwJyk7XG52YXIgX1dlYWtNYXAgPSBXZWFrTWFwJDE7XG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLCBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLCBzZXRUYWcgPSAnW29iamVjdCBTZXRdJywgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IF90b1NvdXJjZShfRGF0YVZpZXcpLCBtYXBDdG9yU3RyaW5nID0gX3RvU291cmNlKF9NYXApLCBwcm9taXNlQ3RvclN0cmluZyA9IF90b1NvdXJjZShfUHJvbWlzZSksIHNldEN0b3JTdHJpbmcgPSBfdG9Tb3VyY2UoX1NldCksIHdlYWtNYXBDdG9yU3RyaW5nID0gX3RvU291cmNlKF9XZWFrTWFwKTtcbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBfYmFzZUdldFRhZztcbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoX0RhdGFWaWV3ICYmIGdldFRhZyhuZXcgX0RhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChfTWFwICYmIGdldFRhZyhuZXcgX01hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChfUHJvbWlzZSAmJiBnZXRUYWcoX1Byb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChfU2V0ICYmIGdldFRhZyhuZXcgX1NldCkgIT0gc2V0VGFnKSB8fFxuICAgIChfV2Vha01hcCAmJiBnZXRUYWcobmV3IF9XZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICAgIGdldFRhZyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gX2Jhc2VHZXRUYWcodmFsdWUpLCBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLCBjdG9yU3RyaW5nID0gQ3RvciA/IF90b1NvdXJjZShDdG9yKSA6ICcnO1xuICAgICAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgICAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cbnZhciBfZ2V0VGFnID0gZ2V0VGFnO1xuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cbnZhciBpc0xlbmd0aF8xID0gaXNMZW5ndGg7XG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoXzEodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbl8xKHZhbHVlKTtcbn1cbnZhciBpc0FycmF5TGlrZV8xID0gaXNBcnJheUxpa2U7XG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBpc0FycmF5XzEgPSBpc0FycmF5O1xuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cbnZhciBpc09iamVjdExpa2VfMSA9IGlzT2JqZWN0TGlrZTtcbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJztcbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N0cmluZygnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N0cmluZygxKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoIWlzQXJyYXlfMSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlXzEodmFsdWUpICYmIF9iYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xufVxudmFyIGlzU3RyaW5nXzEgPSBpc1N0cmluZztcbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG59XG52YXIgX2Jhc2VQcm9wZXJ0eSA9IGJhc2VQcm9wZXJ0eTtcbi8qKlxuICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAqL1xudmFyIGFzY2lpU2l6ZSA9IF9iYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xudmFyIF9hc2NpaVNpemUgPSBhc2NpaVNpemU7XG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJywgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJywgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJywgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLCByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZic7XG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNaV0ogPSAnXFxcXHUyMDBkJztcbi8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xudmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcbi8qKlxuICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbn1cbnZhciBfaGFzVW5pY29kZSA9IGhhc1VuaWNvZGU7XG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSQxID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLCByc0NvbWJvTWFya3NSYW5nZSQxID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLCByZUNvbWJvSGFsZk1hcmtzUmFuZ2UkMSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJywgcnNDb21ib1N5bWJvbHNSYW5nZSQxID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLCByc0NvbWJvUmFuZ2UkMSA9IHJzQ29tYm9NYXJrc1JhbmdlJDEgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UkMSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UkMSwgcnNWYXJSYW5nZSQxID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZic7XG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlJDEgKyAnXScsIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UkMSArICddJywgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UkMSArICddJywgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JywgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLCByc1pXSiQxID0gJ1xcXFx1MjAwZCc7XG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbnZhciByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSQxICsgJ10/JywgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiQxICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLCByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbnZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcbi8qKlxuICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICAgIHZhciByZXN1bHQgPSByZVVuaWNvZGUubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICArK3Jlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBfdW5pY29kZVNpemUgPSB1bmljb2RlU2l6ZTtcbi8qKlxuICogR2V0cyB0aGUgbnVtYmVyIG9mIHN5bWJvbHMgaW4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1NpemUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIF9oYXNVbmljb2RlKHN0cmluZylcbiAgICAgICAgPyBfdW5pY29kZVNpemUoc3RyaW5nKVxuICAgICAgICA6IF9hc2NpaVNpemUoc3RyaW5nKTtcbn1cbnZhciBfc3RyaW5nU2l6ZSA9IHN0cmluZ1NpemU7XG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnJDEgPSAnW29iamVjdCBNYXBdJywgc2V0VGFnJDEgPSAnW29iamVjdCBTZXRdJztcbi8qKlxuICogR2V0cyB0aGUgc2l6ZSBvZiBgY29sbGVjdGlvbmAgYnkgcmV0dXJuaW5nIGl0cyBsZW5ndGggZm9yIGFycmF5LWxpa2VcbiAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5zaXplKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gKiAvLyA9PiAyXG4gKlxuICogXy5zaXplKCdwZWJibGVzJyk7XG4gKiAvLyA9PiA3XG4gKi9cbmZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChpc0FycmF5TGlrZV8xKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZ18xKGNvbGxlY3Rpb24pID8gX3N0cmluZ1NpemUoY29sbGVjdGlvbikgOiBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICB9XG4gICAgdmFyIHRhZyA9IF9nZXRUYWcoY29sbGVjdGlvbik7XG4gICAgaWYgKHRhZyA9PSBtYXBUYWckMSB8fCB0YWcgPT0gc2V0VGFnJDEpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICB9XG4gICAgcmV0dXJuIF9iYXNlS2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG59XG52YXIgc2l6ZV8xID0gc2l6ZTtcbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG52YXIgX2FycmF5RWFjaCA9IGFycmF5RWFjaDtcbi8qKlxuICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLCBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLCBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9O1xufVxudmFyIF9jcmVhdGVCYXNlRm9yID0gY3JlYXRlQmFzZUZvcjtcbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IF9jcmVhdGVCYXNlRm9yKCk7XG52YXIgX2Jhc2VGb3IgPSBiYXNlRm9yO1xuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLCByZXN1bHQgPSBBcnJheShuKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBfYmFzZVRpbWVzID0gYmFzZVRpbWVzO1xuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0TGlrZV8xKHZhbHVlKSAmJiBfYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cbnZhciBfYmFzZUlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzO1xuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvJDUgPSBPYmplY3QucHJvdG90eXBlO1xuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkkMyA9IG9iamVjdFByb3RvJDUuaGFzT3duUHJvcGVydHk7XG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvJDUucHJvcGVydHlJc0VudW1lcmFibGU7XG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBfYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IF9iYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gaXNPYmplY3RMaWtlXzEodmFsdWUpICYmIGhhc093blByb3BlcnR5JDMuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xudmFyIGlzQXJndW1lbnRzXzEgPSBpc0FyZ3VtZW50cztcbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxudmFyIHN0dWJGYWxzZV8xID0gc3R1YkZhbHNlO1xudmFyIGlzQnVmZmVyXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4gICAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbiAgICB2YXIgZnJlZUV4cG9ydHMgPSBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG4gICAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICAgIHZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgJ29iamVjdCcgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuICAgIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gICAgdmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBfcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xuICAgIHZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZV8xO1xuICAgIG1vZHVsZS5leHBvcnRzID0gaXNCdWZmZXI7XG59KTtcbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIkMSA9IDkwMDcxOTkyNTQ3NDA5OTE7XG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIkMSA6IGxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAgICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxudmFyIF9pc0luZGV4ID0gaXNJbmRleDtcbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnJDEgPSAnW29iamVjdCBBcmd1bWVudHNdJywgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLCBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLCBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLCBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsIGZ1bmNUYWckMSA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsIG1hcFRhZyQyID0gJ1tvYmplY3QgTWFwXScsIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLCBvYmplY3RUYWckMSA9ICdbb2JqZWN0IE9iamVjdF0nLCByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJywgc2V0VGFnJDIgPSAnW29iamVjdCBTZXRdJywgc3RyaW5nVGFnJDEgPSAnW29iamVjdCBTdHJpbmddJywgd2Vha01hcFRhZyQxID0gJ1tvYmplY3QgV2Vha01hcF0nO1xudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJywgZGF0YVZpZXdUYWckMSA9ICdbb2JqZWN0IERhdGFWaWV3XScsIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJywgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLCBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLCBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJywgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICAgIHR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbiAgICAgICAgdHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbiAgICAgICAgICAgIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgICAgICAgICAgICAgICB0eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWckMV0gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxuICAgIHR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbiAgICAgICAgdHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWckMV0gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gICAgICAgICAgICB0eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnJDFdID1cbiAgICAgICAgICAgICAgICB0eXBlZEFycmF5VGFnc1ttYXBUYWckMl0gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbiAgICAgICAgICAgICAgICAgICAgdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnJDFdID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlZEFycmF5VGFnc1tzZXRUYWckMl0gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWckMV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWckMV0gPSBmYWxzZTtcbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gaXNPYmplY3RMaWtlXzEodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoXzEodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW19iYXNlR2V0VGFnKHZhbHVlKV07XG59XG52YXIgX2Jhc2VJc1R5cGVkQXJyYXkgPSBiYXNlSXNUeXBlZEFycmF5O1xuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9O1xufVxudmFyIF9iYXNlVW5hcnkgPSBiYXNlVW5hcnk7XG52YXIgX25vZGVVdGlsID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAgIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG4gICAgdmFyIGZyZWVFeHBvcnRzID0gZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuICAgIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbiAgICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmICdvYmplY3QnID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcbiAgICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuICAgIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuICAgIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICAgIHZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgX2ZyZWVHbG9iYWwucHJvY2VzcztcbiAgICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgICB2YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgICAgICAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcbiAgICAgICAgICAgIGlmICh0eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgICAgICAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgIH0oKSk7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbn0pO1xuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gX25vZGVVdGlsICYmIF9ub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IF9iYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBfYmFzZUlzVHlwZWRBcnJheTtcbnZhciBpc1R5cGVkQXJyYXlfMSA9IGlzVHlwZWRBcnJheTtcbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byQ2ID0gT2JqZWN0LnByb3RvdHlwZTtcbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5JDQgPSBvYmplY3RQcm90byQ2Lmhhc093blByb3BlcnR5O1xuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheV8xKHZhbHVlKSwgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHNfMSh2YWx1ZSksIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXJfMSh2YWx1ZSksIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXlfMSh2YWx1ZSksIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSwgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBfYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLCBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eSQ0LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICAgX2lzSW5kZXgoa2V5LCBsZW5ndGgpKSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBfYXJyYXlMaWtlS2V5cyA9IGFycmF5TGlrZUtleXM7XG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgcmV0dXJuIGlzQXJyYXlMaWtlXzEob2JqZWN0KSA/IF9hcnJheUxpa2VLZXlzKG9iamVjdCkgOiBfYmFzZUtleXMob2JqZWN0KTtcbn1cbnZhciBrZXlzXzEgPSBrZXlzO1xuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICByZXR1cm4gb2JqZWN0ICYmIF9iYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNfMSk7XG59XG52YXIgX2Jhc2VGb3JPd24gPSBiYXNlRm9yT3duO1xuLyoqXG4gKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlXzEoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLCBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLCBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfTtcbn1cbnZhciBfY3JlYXRlQmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaDtcbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gKi9cbnZhciBiYXNlRWFjaCA9IF9jcmVhdGVCYXNlRWFjaChfYmFzZUZvck93bik7XG52YXIgX2Jhc2VFYWNoID0gYmFzZUVhY2g7XG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG59XG52YXIgaWRlbnRpdHlfMSA9IGlkZW50aXR5O1xuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5XzE7XG59XG52YXIgX2Nhc3RGdW5jdGlvbiA9IGNhc3RGdW5jdGlvbjtcbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGFsaWFzIGVhY2hcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICogQHNlZSBfLmZvckVhY2hSaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICpcbiAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAqICAgY29uc29sZS5sb2coa2V5KTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgZnVuYyA9IGlzQXJyYXlfMShjb2xsZWN0aW9uKSA/IF9hcnJheUVhY2ggOiBfYmFzZUVhY2g7XG4gICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgX2Nhc3RGdW5jdGlvbihpdGVyYXRlZSkpO1xufVxudmFyIGZvckVhY2hfMSA9IGZvckVhY2g7XG52YXIgZWFjaCA9IGZvckVhY2hfMTtcbi8qKlxuKiBHbG9iYWwgc3RvcmVzIGRhdGFcbiovXG5mdW5jdGlvbiBzZXRTdG9yZShzdG9yZSwgZGF0YSkge1xuICAgIGVhY2goZGF0YSwgZnVuY3Rpb24gKHZhbCwga2V5KSB7XG4gICAgICAgIHN0b3JlLnNldChrZXksIHZhbCk7XG4gICAgfSk7XG59XG52YXIgRGF0YVByb3ZpZGVyT2JqZWN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERhdGFQcm92aWRlck9iamVjdChzdG9yZSkge1xuICAgICAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgfVxuICAgIERhdGFQcm92aWRlck9iamVjdC5wcm90b3R5cGUuZGF0YSA9IGZ1bmN0aW9uIChyLCBjKSB7XG4gICAgICAgIHZhciBfYiA9IHRoaXMucm93RGF0YU1vZGVsKHIsIGMpLCBwcm9wID0gX2IucHJvcCwgbW9kZWwgPSBfYi5tb2RlbDtcbiAgICAgICAgcmV0dXJuIG1vZGVsW3Byb3BdIHx8ICcnO1xuICAgIH07XG4gICAgRGF0YVByb3ZpZGVyT2JqZWN0LnByb3RvdHlwZS5yb3dEYXRhTW9kZWwgPSBmdW5jdGlvbiAociwgYykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBwcm9wID0gKF9hID0gdGhpcy5zdG9yZS5nZXQoJ2NvbHVtbnMnKVtjXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnByb3A7XG4gICAgICAgIHZhciBtb2RlbCA9IHRoaXMuc3RvcmUuZ2V0KCdkYXRhJylbcl0gfHwge307XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcm9wOiBwcm9wLCBtb2RlbDogbW9kZWxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBEYXRhUHJvdmlkZXJPYmplY3Q7XG59KCkpO1xudmFyIEhlYWRlclByb3ZpZGVyT2JqZWN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEhlYWRlclByb3ZpZGVyT2JqZWN0KHN0b3JlKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB9XG4gICAgSGVhZGVyUHJvdmlkZXJPYmplY3QucHJvdG90eXBlLmRhdGEgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5nZXRDb2x1bW4oYykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lKSB8fCAnJztcbiAgICB9O1xuICAgIEhlYWRlclByb3ZpZGVyT2JqZWN0LnByb3RvdHlwZS50ZW1wbGF0ZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuZ2V0Q29sdW1uKGMpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2VsbFRlbXBsYXRlO1xuICAgIH07XG4gICAgSGVhZGVyUHJvdmlkZXJPYmplY3QucHJvdG90eXBlLmdldENvbHVtbiA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLmdldCgnY29sdW1ucycpW2NdO1xuICAgIH07XG4gICAgcmV0dXJuIEhlYWRlclByb3ZpZGVyT2JqZWN0O1xufSgpKTtcbnZhciBEYXRhUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGF0YVByb3ZpZGVyKHN0b3JlKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICAgICAgdGhpcy5jb2x1bW5Qcm92aWRlciA9IG5ldyBIZWFkZXJQcm92aWRlck9iamVjdCh0aGlzLnN0b3JlKTtcbiAgICAgICAgdGhpcy5kYXRhUHJvdmlkZXIgPSBuZXcgRGF0YVByb3ZpZGVyT2JqZWN0KHRoaXMuc3RvcmUpO1xuICAgIH1cbiAgICBEYXRhUHJvdmlkZXIucHJvdG90eXBlLmRhdGEgPSBmdW5jdGlvbiAociwgYykge1xuICAgICAgICB2YXIgdHBsID0gdGhpcy5jb2x1bW5Qcm92aWRlci50ZW1wbGF0ZShjKTtcbiAgICAgICAgaWYgKHRwbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRwbChoLCB0aGlzLmRhdGFQcm92aWRlci5yb3dEYXRhTW9kZWwociwgYykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFQcm92aWRlci5kYXRhKHIsIGMpO1xuICAgIH07XG4gICAgRGF0YVByb3ZpZGVyLnByb3RvdHlwZS5oZWFkZXIgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5Qcm92aWRlci5kYXRhKGMpO1xuICAgIH07XG4gICAgcmV0dXJuIERhdGFQcm92aWRlcjtcbn0oKSk7XG52YXIgRGF0YVNvdXJjZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEYXRhU291cmNlKHN0b3JlKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICAgICAgdGhpcy5wcm92aWRlciA9IG5ldyBEYXRhUHJvdmlkZXIodGhpcy5zdG9yZSk7XG4gICAgfVxuICAgIERhdGFTb3VyY2UucHJvdG90eXBlLnNldERhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBzZXRTdG9yZSh0aGlzLnN0b3JlLCB7IGRhdGE6IGRhdGEgfSk7XG4gICAgfTtcbiAgICBEYXRhU291cmNlLnByb3RvdHlwZS5zZXRDb2x1bW4gPSBmdW5jdGlvbiAoY29sdW1ucykge1xuICAgICAgICBzZXRTdG9yZSh0aGlzLnN0b3JlLCB7IGNvbHVtbnM6IGNvbHVtbnMgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGF0YVNvdXJjZTtcbn0oKSk7XG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlXzEodmFsdWUpICYmIF9iYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxudmFyIGlzU3ltYm9sXzEgPSBpc1N5bWJvbDtcbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG52YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTUsIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxO1xuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vciwgbmF0aXZlTWluID0gTWF0aC5taW47XG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4QnlgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhCeWBcbiAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gKiAgaW50byBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlLCByZXRIaWdoZXN0KSB7XG4gICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCwgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLCB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sXzEodmFsdWUpLCB2YWxJc1VuZGVmaW5lZCA9IHZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLCBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLCBvdGhJc0RlZmluZWQgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLCBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCwgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsIG90aElzU3ltYm9sID0gaXNTeW1ib2xfMShjb21wdXRlZCk7XG4gICAgICAgIGlmICh2YWxJc05hTikge1xuICAgICAgICAgICAgdmFyIHNldExvdyA9IHJldEhpZ2hlc3QgfHwgb3RoSXNSZWZsZXhpdmU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsSXNVbmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsSXNTeW1ib2wpIHtcbiAgICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAhb3RoSXNOdWxsICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc1N5bWJvbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3RoSXNOdWxsIHx8IG90aElzU3ltYm9sKSB7XG4gICAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXRMb3cpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuYXRpdmVNaW4oaGlnaCwgTUFYX0FSUkFZX0lOREVYKTtcbn1cbnZhciBfYmFzZVNvcnRlZEluZGV4QnkgPSBiYXNlU29ydGVkSW5kZXhCeTtcbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG52YXIgTUFYX0FSUkFZX0xFTkdUSCQxID0gNDI5NDk2NzI5NSwgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCQxID4+PiAxO1xuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAqIHBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBvZiBgYXJyYXlgIHRvIGRldGVybWluZSB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICogIGludG8gYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgIHZhciBsb3cgPSAwLCBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09PSB2YWx1ZSAmJiBoaWdoIDw9IEhBTEZfTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSwgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuICAgICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbF8xKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAgIChyZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICB9XG4gICAgcmV0dXJuIF9iYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5XzEsIHJldEhpZ2hlc3QpO1xufVxudmFyIF9iYXNlU29ydGVkSW5kZXggPSBiYXNlU29ydGVkSW5kZXg7XG4vKipcbiAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gKiAgaW50byBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gKiAvLyA9PiAxXG4gKi9cbmZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgIHJldHVybiBfYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG59XG52YXIgc29ydGVkSW5kZXhfMSA9IHNvcnRlZEluZGV4O1xuZnVuY3Rpb24gcmFuZ2Uoc2l6ZSwgc3RhcnRBdCkge1xuICAgIGlmIChzdGFydEF0ID09PSB2b2lkIDApIHsgc3RhcnRBdCA9IDA7IH1cbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGVuZCA9IHN0YXJ0QXQgKyBzaXplO1xuICAgIGZvciAodmFyIGkgPSBzdGFydEF0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG4vLyAoYXJyMVtpbmRleDFdIDwgYXJyMltpbmRleDJdKVxuZnVuY3Rpb24gc2ltcGxlQ29tcGFyZShlbDEsIGVsMikge1xuICAgIHJldHVybiBlbDEgPCBlbDI7XG59XG5mdW5jdGlvbiBtZXJnZVNvcnRlZEFycmF5KGFycjEsIGFycjIsIGNvbXBhcmVGbikge1xuICAgIGlmIChjb21wYXJlRm4gPT09IHZvaWQgMCkgeyBjb21wYXJlRm4gPSBzaW1wbGVDb21wYXJlOyB9XG4gICAgdmFyIG1lcmdlZCA9IFtdO1xuICAgIHZhciBpbmRleDEgPSAwO1xuICAgIHZhciBpbmRleDIgPSAwO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB3aGlsZSAoY3VycmVudCA8IChhcnIxLmxlbmd0aCArIGFycjIubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaXNBcnIxRGVwbGV0ZWQgPSBpbmRleDEgPj0gYXJyMS5sZW5ndGg7XG4gICAgICAgIHZhciBpc0FycjJEZXBsZXRlZCA9IGluZGV4MiA+PSBhcnIyLmxlbmd0aDtcbiAgICAgICAgaWYgKCFpc0FycjFEZXBsZXRlZCAmJiAoaXNBcnIyRGVwbGV0ZWQgfHwgY29tcGFyZUZuKGFycjFbaW5kZXgxXSwgYXJyMltpbmRleDJdKSkpIHtcbiAgICAgICAgICAgIG1lcmdlZFtjdXJyZW50XSA9IGFycjFbaW5kZXgxXTtcbiAgICAgICAgICAgIGluZGV4MSsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWVyZ2VkW2N1cnJlbnRdID0gYXJyMltpbmRleDJdO1xuICAgICAgICAgICAgaW5kZXgyKys7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCsrO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkO1xufVxuZnVuY3Rpb24gZ2V0U2Nyb2xsYmFyV2lkdGgoZG9jKSB7XG4gICAgLy8gQ3JlYXRpbmcgaW52aXNpYmxlIGNvbnRhaW5lclxuICAgIHZhciBvdXRlciA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBvdXRlci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgb3V0ZXIuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJzsgLy8gZm9yY2luZyBzY3JvbGxiYXIgdG8gYXBwZWFyXG4gICAgb3V0ZXIuc3R5bGUubXNPdmVyZmxvd1N0eWxlID0gJ3Njcm9sbGJhcic7IC8vIG5lZWRlZCBmb3IgV2luSlMgYXBwc1xuICAgIGRvYy5ib2R5LmFwcGVuZENoaWxkKG91dGVyKTtcbiAgICAvLyBDcmVhdGluZyBpbm5lciBlbGVtZW50IGFuZCBwbGFjaW5nIGl0IGluIHRoZSBjb250YWluZXJcbiAgICB2YXIgaW5uZXIgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgb3V0ZXIuYXBwZW5kQ2hpbGQoaW5uZXIpO1xuICAgIC8vIENhbGN1bGF0aW5nIGRpZmZlcmVuY2UgYmV0d2VlbiBjb250YWluZXIncyBmdWxsIHdpZHRoIGFuZCB0aGUgY2hpbGQgd2lkdGhcbiAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSAob3V0ZXIub2Zmc2V0V2lkdGggLSBpbm5lci5vZmZzZXRXaWR0aCk7XG4gICAgLy8gUmVtb3ZpbmcgdGVtcG9yYXJ5IGVsZW1lbnRzIGZyb20gdGhlIERPTVxuICAgIG91dGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob3V0ZXIpO1xuICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aDtcbn1cbi8qKlxuKiBVcGRhdGUgaXRlbXMgYmFzZWQgb24gbmV3IHNjcm9sbCBwb3NpdGlvblxuKiBJZiB2aWV3cG9ydCB3YXNuJ3QgY2hhbmdlZCBmdWxseSBzaW1wbGUgcmVjb21iaW5hdGlvbiBvZiBwb3NpdGlvbnNcbiogT3RoZXJ3aXNlIHJlYnVpbGQgdmlld3BvcnQgaXRlbXNcbiovXG5mdW5jdGlvbiBnZXRVcGRhdGVkSXRlbXNCeVBvc2l0aW9uKHBvcywgaXRlbXMsIHJlYWxDb3VudCwgdmlydHVhbFNpemUsIGRpbWVuc2lvbikge1xuICAgIHZhciBfYiwgX2M7XG4gICAgdmFyIGFjdGl2ZUl0ZW0gPSBnZXRPZmZzZXQoZGltZW5zaW9uLCBwb3MsIGRpbWVuc2lvbi5vcmlnaW5JdGVtU2l6ZSk7XG4gICAgdmFyIGZpcnN0SXRlbSA9IGdldEZpcnN0SXRlbShpdGVtcyk7XG4gICAgdmFyIHRvVXBkYXRlO1xuICAgIC8vIGRvIHNpbXBsZSBwb3NpdGlvbiByZXBsYWNlbWVudCBpZiBpdGVtcyBhbHJlYWR5IHByZXNlbnQgaW4gdmlld3BvcnRcbiAgICBpZiAoZmlyc3RJdGVtKSB7XG4gICAgICAgIHZhciBjaGFuZ2VkT2Zmc2V0U3RhcnQgPSBhY3RpdmVJdGVtLml0ZW1JbmRleCAtIChmaXJzdEl0ZW0uaXRlbUluZGV4IHx8IDApO1xuICAgICAgICBpZiAoY2hhbmdlZE9mZnNldFN0YXJ0KSB7XG4gICAgICAgICAgICAvLyB0cnkgdG9kbyBzaW1wbGUgcmVjb21iaW5hdGlvblxuICAgICAgICAgICAgdmFyIG5ld0RhdGEgPSByZWNvbWJpbmVCeU9mZnNldCh7XG4gICAgICAgICAgICAgICAgbmV3SXRlbTogYWN0aXZlSXRlbSxcbiAgICAgICAgICAgICAgICBwcmV2SXRlbTogZmlyc3RJdGVtLFxuICAgICAgICAgICAgICAgIGRpbWVuc2lvbjogZGltZW5zaW9uLFxuICAgICAgICAgICAgICAgIHBvc2l0aXZlRGlyZWN0aW9uOiBjaGFuZ2VkT2Zmc2V0U3RhcnQgPiAtMSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IE1hdGguYWJzKGNoYW5nZWRPZmZzZXRTdGFydClcbiAgICAgICAgICAgIH0sIGl0ZW1zKTtcbiAgICAgICAgICAgIGlmIChuZXdEYXRhKSB7XG4gICAgICAgICAgICAgICAgdG9VcGRhdGUgPSBuZXdEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgcGFydGlhbCByZXBsYWNlbWVudCBhZGQgaXRlbXMgaWYgcmV2by12aWV3cG9ydCBoYXMgc29tZSBzcGFjZSBsZWZ0XG4gICAgICAgICAgICBpZiAodG9VcGRhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXh0cmEgPSBhZGRNaXNzaW5nSXRlbXMoYWN0aXZlSXRlbSwgcmVhbENvdW50LCB2aXJ0dWFsU2l6ZSwgdG9VcGRhdGUsIGRpbWVuc2lvbik7XG4gICAgICAgICAgICAgICAgaWYgKGV4dHJhLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAoX2IgPSB0b1VwZGF0ZS5pdGVtcykucHVzaC5hcHBseShfYiwgZXh0cmEuaXRlbXMpO1xuICAgICAgICAgICAgICAgICAgICAoX2MgPSB0b1VwZGF0ZS5pdGVtSW5kZXhlcykucHVzaC5hcHBseShfYywgZXh0cmEuaXRlbUluZGV4ZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBuZXcgY29sbGVjdGlvbiBpZiBubyBpdGVtcyBhZnRlciByZXBsYWNlbWVudCBmdWxsIHJlcGxhY2VtZW50XG4gICAgaWYgKCF0b1VwZGF0ZSkge1xuICAgICAgICB0b1VwZGF0ZSA9IGdldEl0ZW1zKHtcbiAgICAgICAgICAgIHNpemVzOiBkaW1lbnNpb24uc2l6ZXMsXG4gICAgICAgICAgICBzdGFydDogYWN0aXZlSXRlbS5zdGFydCxcbiAgICAgICAgICAgIHN0YXJ0SW5kZXg6IGFjdGl2ZUl0ZW0uaXRlbUluZGV4LFxuICAgICAgICAgICAgb3JpZ1NpemU6IGRpbWVuc2lvbi5vcmlnaW5JdGVtU2l6ZSxcbiAgICAgICAgICAgIG1heFNpemU6IHZpcnR1YWxTaXplLFxuICAgICAgICAgICAgbWF4Q291bnQ6IHJlYWxDb3VudFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRvVXBkYXRlO1xufVxuLy8gaWYgcGFydGlhbCByZXBsYWNlbWVudCBhZGQgaXRlbXMgaWYgcmV2by12aWV3cG9ydCBoYXMgc29tZSBzcGFjZSBsZWZ0XG5mdW5jdGlvbiBhZGRNaXNzaW5nSXRlbXMoZmlyc3RJdGVtLCByZWFsQ291bnQsIHZpcnR1YWxTaXplLCBleGlzdGluZ0NvbGxlY3Rpb24sIGRpbWVuc2lvbikge1xuICAgIHZhciBsYXN0SXRlbSA9IGdldExhc3RJdGVtKGV4aXN0aW5nQ29sbGVjdGlvbik7XG4gICAgdmFyIGRhdGEgPSBnZXRJdGVtcyh7XG4gICAgICAgIHNpemVzOiBkaW1lbnNpb24uc2l6ZXMsXG4gICAgICAgIHN0YXJ0OiBsYXN0SXRlbS5lbmQsXG4gICAgICAgIHN0YXJ0SW5kZXg6IGxhc3RJdGVtLml0ZW1JbmRleCArIDEsXG4gICAgICAgIG9yaWdTaXplOiBkaW1lbnNpb24ub3JpZ2luSXRlbVNpemUsXG4gICAgICAgIG1heFNpemU6IHZpcnR1YWxTaXplIC0gKGxhc3RJdGVtLmVuZCAtIGZpcnN0SXRlbS5zdGFydCksXG4gICAgICAgIG1heENvdW50OiByZWFsQ291bnQgLSBsYXN0SXRlbS5pdGVtSW5kZXhcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBpdGVtczogZGF0YS5pdGVtcyxcbiAgICAgICAgaXRlbUluZGV4ZXM6IHJhbmdlKGRhdGEuaXRlbXMubGVuZ3RoLCBleGlzdGluZ0NvbGxlY3Rpb24uaXRlbXMubGVuZ3RoKVxuICAgIH07XG59XG4vLyBnZXQgZmlyc3QgaXRlbSBpbiByZXZvLXZpZXdwb3J0XG5mdW5jdGlvbiBnZXRPZmZzZXQoZGltZW5zaW9uLCBwb3MsIG9yaWdTaXplKSB7XG4gICAgdmFyIGl0ZW0gPSB7XG4gICAgICAgIGl0ZW1JbmRleDogMCxcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogMFxuICAgIH07XG4gICAgdmFyIGN1cnJlbnRQbGFjZSA9IGRpbWVuc2lvbi5pbmRleGVzLmxlbmd0aCA/IHNvcnRlZEluZGV4XzEoZGltZW5zaW9uLnBvc2l0aW9uSW5kZXhlcywgcG9zKSA6IDA7XG4gICAgLy8gbm90IGZvdW5kIG9yIGZpcnN0IGluZGV4XG4gICAgaWYgKCFjdXJyZW50UGxhY2UpIHtcbiAgICAgICAgaXRlbS5pdGVtSW5kZXggPSBNYXRoLmZsb29yKHBvcyAvIG9yaWdTaXplKTtcbiAgICAgICAgaXRlbS5zdGFydCA9IGl0ZW0uaXRlbUluZGV4ICogb3JpZ1NpemU7XG4gICAgICAgIGl0ZW0uZW5kID0gaXRlbS5zdGFydCArIG9yaWdTaXplO1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gICAgdmFyIHBvc2l0aW9uSXRlbSA9IGRpbWVuc2lvbi5wb3NpdGlvbkluZGV4VG9Db29yZGluYXRlW2N1cnJlbnRQbGFjZSAtIDFdO1xuICAgIC8vIGlmIGl0ZW0gaGFzIHNwZWNpZmllZCBzaXplXG4gICAgaWYgKHBvc2l0aW9uSXRlbS5lbmQgPiBwb3MpIHtcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uSXRlbTtcbiAgICB9XG4gICAgLy8gc3BlY2lhbCBzaXplIGl0ZW0gd2FzIHByZXNlbnQgYmVmb3JlXG4gICAgdmFyIHJlbGF0aXZlUG9zID0gcG9zIC0gcG9zaXRpb25JdGVtLmVuZDtcbiAgICB2YXIgcmVsYXRpdmVJbmRleCA9IE1hdGguZmxvb3IocmVsYXRpdmVQb3MgLyBvcmlnU2l6ZSk7XG4gICAgaXRlbS5pdGVtSW5kZXggPSBwb3NpdGlvbkl0ZW0uaXRlbUluZGV4ICsgMSArIHJlbGF0aXZlSW5kZXg7XG4gICAgaXRlbS5zdGFydCA9IHBvc2l0aW9uSXRlbS5lbmQgKyByZWxhdGl2ZUluZGV4ICogb3JpZ1NpemU7XG4gICAgaXRlbS5lbmQgPSBpdGVtLnN0YXJ0ICsgb3JpZ1NpemU7XG4gICAgcmV0dXJuIGl0ZW07XG59XG4vLyBnZXQgcmV2by12aWV3cG9ydCBpdGVtcyBwYXJhbWV0ZXJzLCBjYWNoaW5nIHBvc2l0aW9uIGFuZCBjYWxjdWxhdGluZyBpdGVtcyBjb3VudCBpbiByZXZvLXZpZXdwb3J0XG5mdW5jdGlvbiBnZXRJdGVtcyhvcHQsIGN1cnJlbnRTaXplKSB7XG4gICAgaWYgKGN1cnJlbnRTaXplID09PSB2b2lkIDApIHsgY3VycmVudFNpemUgPSAwOyB9XG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgdmFyIGl0ZW1JbmRleGVzID0gW107XG4gICAgdmFyIGluZGV4ID0gb3B0LnN0YXJ0SW5kZXg7XG4gICAgdmFyIHNpemUgPSBjdXJyZW50U2l6ZTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKHNpemUgPD0gb3B0Lm1heFNpemUgJiYgaSA8IG9wdC5tYXhDb3VudCkge1xuICAgICAgICB2YXIgbmV3U2l6ZSA9IGdldEl0ZW1TaXplKGluZGV4LCBvcHQuc2l6ZXMsIG9wdC5vcmlnU2l6ZSk7XG4gICAgICAgIGl0ZW1JbmRleGVzLnB1c2goaSk7XG4gICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgc3RhcnQ6IG9wdC5zdGFydCArIHNpemUsXG4gICAgICAgICAgICBlbmQ6IG9wdC5zdGFydCArIHNpemUgKyBuZXdTaXplLFxuICAgICAgICAgICAgaXRlbUluZGV4OiBpbmRleCxcbiAgICAgICAgICAgIHNpemU6IG5ld1NpemVcbiAgICAgICAgfSk7XG4gICAgICAgIHNpemUgKz0gbmV3U2l6ZTtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4geyBpdGVtczogaXRlbXMsIGl0ZW1JbmRleGVzOiBpdGVtSW5kZXhlcyB9O1xufVxuLyoqXG4qIERvIGJhdGNoIGl0ZW1zIHJlY29tYmluYXRpb25cbiogSWYgaXRlbXMgbm90IG92ZXJsYXBwZWQgd2l0aCBleGlzdGluZyB2aWV3cG9ydCByZXR1cm5zIG51bGxcbiovXG5mdW5jdGlvbiByZWNvbWJpbmVCeU9mZnNldChkYXRhLCBzdGF0ZSkge1xuICAgIHZhciBfYiwgX2M7XG4gICAgdmFyIGluZGV4U2l6ZSA9IHN0YXRlLml0ZW1JbmRleGVzLmxlbmd0aDtcbiAgICAvLyBpZiBvZmZzZXQgb3V0IG9mIHJldm8tdmlld3BvcnQsIG1ha2VzIHNlbnNlIHdob2xlIHJlZHJhd1xuICAgIGlmIChkYXRhLm9mZnNldCA+IGluZGV4U2l6ZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGRhdGEucG9zaXRpdmVEaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIGxhc3RJdGVtID0gZ2V0TGFzdEl0ZW0oc3RhdGUpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEub2Zmc2V0OyBpKyspIHtcbiAgICAgICAgICAgIHZhciBuZXdJbmRleCA9IGxhc3RJdGVtLml0ZW1JbmRleCArIDE7XG4gICAgICAgICAgICB2YXIgc2l6ZV8yID0gZ2V0SXRlbVNpemUobmV3SW5kZXgsIGRhdGEuZGltZW5zaW9uLnNpemVzLCBkYXRhLmRpbWVuc2lvbi5vcmlnaW5JdGVtU2l6ZSk7XG4gICAgICAgICAgICAvLyBpZiBpdGVtIG92ZXJsYXBwZWQgbGltaXQgYnJlYWsgYSBsb29wXG4gICAgICAgICAgICBpZiAobGFzdEl0ZW0uZW5kICsgc2l6ZV8yID4gZGF0YS5kaW1lbnNpb24ucmVhbFNpemUpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlLml0ZW1zW3N0YXRlLml0ZW1JbmRleGVzW2ldXSA9IGxhc3RJdGVtID0ge1xuICAgICAgICAgICAgICAgIGl0ZW1JbmRleDogbmV3SW5kZXgsXG4gICAgICAgICAgICAgICAgc3RhcnQ6IGxhc3RJdGVtLmVuZCxcbiAgICAgICAgICAgICAgICBlbmQ6IGxhc3RJdGVtLmVuZCArIHNpemVfMixcbiAgICAgICAgICAgICAgICBzaXplOiBzaXplXzJcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHVzaCBpdGVtIHRvIHRoZSBlbmRcbiAgICAgICAgKF9iID0gc3RhdGUuaXRlbUluZGV4ZXMpLnB1c2guYXBwbHkoX2IsIHN0YXRlLml0ZW1JbmRleGVzLnNwbGljZSgwLCBkYXRhLm9mZnNldCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBpbmRleFNpemUgLSBkYXRhLm9mZnNldDtcbiAgICAgICAgdmFyIGZpcnN0SXRlbSA9IGdldEZpcnN0SXRlbShzdGF0ZSk7XG4gICAgICAgIGZvciAodmFyIGkgPSBpbmRleFNpemUgLSAxOyBpID49IGNoYW5nZWQ7IGktLSkge1xuICAgICAgICAgICAgdmFyIG5ld0luZGV4ID0gZmlyc3RJdGVtLml0ZW1JbmRleCAtIDE7XG4gICAgICAgICAgICB2YXIgc2l6ZV8zID0gZ2V0SXRlbVNpemUobmV3SW5kZXgsIGRhdGEuZGltZW5zaW9uLnNpemVzLCBkYXRhLmRpbWVuc2lvbi5vcmlnaW5JdGVtU2l6ZSk7XG4gICAgICAgICAgICBzdGF0ZS5pdGVtc1tzdGF0ZS5pdGVtSW5kZXhlc1tpXV0gPSBmaXJzdEl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgaXRlbUluZGV4OiBuZXdJbmRleCxcbiAgICAgICAgICAgICAgICBzdGFydDogZmlyc3RJdGVtLnN0YXJ0IC0gc2l6ZV8zLFxuICAgICAgICAgICAgICAgIGVuZDogZmlyc3RJdGVtLnN0YXJ0LFxuICAgICAgICAgICAgICAgIHNpemU6IHNpemVfM1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwdXNoIGl0ZW0gdG8gdGhlIHN0YXJ0XG4gICAgICAgIChfYyA9IHN0YXRlLml0ZW1JbmRleGVzKS51bnNoaWZ0LmFwcGx5KF9jLCBzdGF0ZS5pdGVtSW5kZXhlcy5zcGxpY2UoY2hhbmdlZCwgaW5kZXhTaXplIC0gMSkpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBpdGVtczogX19zcHJlYWRBcnJheXMoc3RhdGUuaXRlbXMpLFxuICAgICAgICBpdGVtSW5kZXhlczogX19zcHJlYWRBcnJheXMoc3RhdGUuaXRlbUluZGV4ZXMpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldEl0ZW1TaXplKGluZGV4LCBzaXplcywgb3JpZ1NpemUpIHtcbiAgICBpZiAoc2l6ZXNbaW5kZXhdKSB7XG4gICAgICAgIHJldHVybiBzaXplc1tpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBvcmlnU2l6ZTtcbn1cbmZ1bmN0aW9uIGlzQWN0aXZlUmFuZ2UocG9zLCBpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0gJiYgcG9zID49IGl0ZW0uc3RhcnQgJiYgcG9zIDw9IGl0ZW0uZW5kO1xufVxuZnVuY3Rpb24gZ2V0Rmlyc3RJdGVtKHMpIHtcbiAgICByZXR1cm4gcy5pdGVtc1tzLml0ZW1JbmRleGVzWzBdXTtcbn1cbmZ1bmN0aW9uIGdldExhc3RJdGVtKHMpIHtcbiAgICByZXR1cm4gcy5pdGVtc1tzLml0ZW1JbmRleGVzW3MuaXRlbUluZGV4ZXMubGVuZ3RoIC0gMV1dO1xufVxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG52YXIgX2FycmF5UmVkdWNlID0gYXJyYXlSZWR1Y2U7XG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgICB0aGlzLnNpemUgPSAwO1xufVxudmFyIF9saXN0Q2FjaGVDbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cbnZhciBlcV8xID0gZXE7XG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcV8xKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxudmFyIF9hc3NvY0luZGV4T2YgPSBhc3NvY0luZGV4T2Y7XG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXywgaW5kZXggPSBfYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgIH1cbiAgICAtLXRoaXMuc2l6ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbnZhciBfbGlzdENhY2hlRGVsZXRlID0gbGlzdENhY2hlRGVsZXRlO1xuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXywgaW5kZXggPSBfYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG4gICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxudmFyIF9saXN0Q2FjaGVHZXQgPSBsaXN0Q2FjaGVHZXQ7XG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICAgIHJldHVybiBfYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cbnZhciBfbGlzdENhY2hlSGFzID0gbGlzdENhY2hlSGFzO1xuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXywgaW5kZXggPSBfYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICArK3RoaXMuc2l6ZTtcbiAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cbnZhciBfbGlzdENhY2hlU2V0ID0gbGlzdENhY2hlU2V0O1xuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgIH1cbn1cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IF9saXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gX2xpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gX2xpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gX2xpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gX2xpc3RDYWNoZVNldDtcbnZhciBfTGlzdENhY2hlID0gTGlzdENhY2hlO1xuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgIHRoaXMuX19kYXRhX18gPSBuZXcgX0xpc3RDYWNoZTtcbiAgICB0aGlzLnNpemUgPSAwO1xufVxudmFyIF9zdGFja0NsZWFyID0gc3RhY2tDbGVhcjtcbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXywgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcbiAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBfc3RhY2tEZWxldGUgPSBzdGFja0RlbGV0ZTtcbi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxudmFyIF9zdGFja0dldCA9IHN0YWNrR2V0O1xuLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxudmFyIF9zdGFja0hhcyA9IHN0YWNrSGFzO1xuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IF9nZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG52YXIgX25hdGl2ZUNyZWF0ZSA9IG5hdGl2ZUNyZWF0ZTtcbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICB0aGlzLl9fZGF0YV9fID0gX25hdGl2ZUNyZWF0ZSA/IF9uYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICB0aGlzLnNpemUgPSAwO1xufVxudmFyIF9oYXNoQ2xlYXIgPSBoYXNoQ2xlYXI7XG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxudmFyIF9oYXNoRGVsZXRlID0gaGFzaERlbGV0ZTtcbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byQ3ID0gT2JqZWN0LnByb3RvdHlwZTtcbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5JDUgPSBvYmplY3RQcm90byQ3Lmhhc093blByb3BlcnR5O1xuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgIGlmIChfbmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gaGFzT3duUHJvcGVydHkkNS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG52YXIgX2hhc2hHZXQgPSBoYXNoR2V0O1xuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvJDggPSBPYmplY3QucHJvdG90eXBlO1xuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkkNiA9IG9iamVjdFByb3RvJDguaGFzT3duUHJvcGVydHk7XG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgIHJldHVybiBfbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5JDYuY2FsbChkYXRhLCBrZXkpO1xufVxudmFyIF9oYXNoSGFzID0gaGFzaEhhcztcbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCQxID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gICAgZGF0YVtrZXldID0gKF9uYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCQxIDogdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG59XG52YXIgX2hhc2hTZXQgPSBoYXNoU2V0O1xuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgIH1cbn1cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gX2hhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IF9oYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gX2hhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBfaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IF9oYXNoU2V0O1xudmFyIF9IYXNoID0gSGFzaDtcbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gICAgdGhpcy5zaXplID0gMDtcbiAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBfSGFzaCxcbiAgICAgICAgJ21hcCc6IG5ldyAoX01hcCB8fCBfTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBfSGFzaFxuICAgIH07XG59XG52YXIgX21hcENhY2hlQ2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICAgICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxudmFyIF9pc0tleWFibGUgPSBpc0tleWFibGU7XG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgcmV0dXJuIF9pc0tleWFibGUoa2V5KVxuICAgICAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgICAgICA6IGRhdGEubWFwO1xufVxudmFyIF9nZXRNYXBEYXRhID0gZ2V0TWFwRGF0YTtcbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICB2YXIgcmVzdWx0ID0gX2dldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBfbWFwQ2FjaGVEZWxldGUgPSBtYXBDYWNoZURlbGV0ZTtcbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICByZXR1cm4gX2dldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cbnZhciBfbWFwQ2FjaGVHZXQgPSBtYXBDYWNoZUdldDtcbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gICAgcmV0dXJuIF9nZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG52YXIgX21hcENhY2hlSGFzID0gbWFwQ2FjaGVIYXM7XG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IF9nZXRNYXBEYXRhKHRoaXMsIGtleSksIHNpemUgPSBkYXRhLnNpemU7XG4gICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gICAgcmV0dXJuIHRoaXM7XG59XG52YXIgX21hcENhY2hlU2V0ID0gbWFwQ2FjaGVTZXQ7XG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgIH1cbn1cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBfbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBfbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gX21hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IF9tYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBfbWFwQ2FjaGVTZXQ7XG52YXIgX01hcENhY2hlID0gTWFwQ2FjaGU7XG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIF9MaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFfTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgX01hcENhY2hlKHBhaXJzKTtcbiAgICB9XG4gICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgIHJldHVybiB0aGlzO1xufVxudmFyIF9zdGFja1NldCA9IHN0YWNrU2V0O1xuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBfTGlzdENhY2hlKGVudHJpZXMpO1xuICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBfc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBfc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gX3N0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IF9zdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBfc3RhY2tTZXQ7XG52YXIgX1N0YWNrID0gU3RhY2s7XG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQkMiA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCQyKTtcbiAgICByZXR1cm4gdGhpcztcbn1cbnZhciBfc2V0Q2FjaGVBZGQgPSBzZXRDYWNoZUFkZDtcbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxudmFyIF9zZXRDYWNoZUhhcyA9IHNldENhY2hlSGFzO1xuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcbiAgICB0aGlzLl9fZGF0YV9fID0gbmV3IF9NYXBDYWNoZTtcbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgICB9XG59XG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gX3NldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IF9zZXRDYWNoZUhhcztcbnZhciBfU2V0Q2FjaGUgPSBTZXRDYWNoZTtcbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxudmFyIF9hcnJheVNvbWUgPSBhcnJheVNvbWU7XG4vKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gICAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxudmFyIF9jYWNoZUhhcyA9IGNhY2hlSGFzO1xuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLCBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLCBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcbiAgICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSAtMSwgcmVzdWx0ID0gdHJ1ZSwgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgX1NldENhY2hlIDogdW5kZWZpbmVkO1xuICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgICAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIGlmICghX2FycmF5U29tZShvdGhlciwgZnVuY3Rpb24gKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghX2NhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBfZXF1YWxBcnJheXMgPSBlcXVhbEFycmF5cztcbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSBfcm9vdC5VaW50OEFycmF5O1xudmFyIF9VaW50OEFycmF5ID0gVWludDhBcnJheTtcbi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgICB2YXIgaW5kZXggPSAtMSwgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxudmFyIF9tYXBUb0FycmF5ID0gbWFwVG9BcnJheTtcbi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSwgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxudmFyIF9zZXRUb0FycmF5ID0gc2V0VG9BcnJheTtcbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHJDEgPSAxLCBDT01QQVJFX1VOT1JERVJFRF9GTEFHJDEgPSAyO1xuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWckMSA9ICdbb2JqZWN0IEJvb2xlYW5dJywgZGF0ZVRhZyQxID0gJ1tvYmplY3QgRGF0ZV0nLCBlcnJvclRhZyQxID0gJ1tvYmplY3QgRXJyb3JdJywgbWFwVGFnJDMgPSAnW29iamVjdCBNYXBdJywgbnVtYmVyVGFnJDEgPSAnW29iamVjdCBOdW1iZXJdJywgcmVnZXhwVGFnJDEgPSAnW29iamVjdCBSZWdFeHBdJywgc2V0VGFnJDMgPSAnW29iamVjdCBTZXRdJywgc3RyaW5nVGFnJDIgPSAnW29iamVjdCBTdHJpbmddJywgc3ltYm9sVGFnJDEgPSAnW29iamVjdCBTeW1ib2xdJztcbnZhciBhcnJheUJ1ZmZlclRhZyQxID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJywgZGF0YVZpZXdUYWckMiA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IF9TeW1ib2wgPyBfU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCwgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZyQyOlxuICAgICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZyQxOlxuICAgICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IF9VaW50OEFycmF5KG9iamVjdCksIG5ldyBfVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgYm9vbFRhZyQxOlxuICAgICAgICBjYXNlIGRhdGVUYWckMTpcbiAgICAgICAgY2FzZSBudW1iZXJUYWckMTpcbiAgICAgICAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgICAgcmV0dXJuIGVxXzEoK29iamVjdCwgK290aGVyKTtcbiAgICAgICAgY2FzZSBlcnJvclRhZyQxOlxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcbiAgICAgICAgY2FzZSByZWdleHBUYWckMTpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWckMjpcbiAgICAgICAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG4gICAgICAgIGNhc2UgbWFwVGFnJDM6XG4gICAgICAgICAgICB2YXIgY29udmVydCA9IF9tYXBUb0FycmF5O1xuICAgICAgICBjYXNlIHNldFRhZyQzOlxuICAgICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyQxO1xuICAgICAgICAgICAgY29udmVydCB8fCAoY29udmVydCA9IF9zZXRUb0FycmF5KTtcbiAgICAgICAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRyQxO1xuICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gX2VxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBjYXNlIHN5bWJvbFRhZyQxOlxuICAgICAgICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxudmFyIF9lcXVhbEJ5VGFnID0gZXF1YWxCeVRhZztcbi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLCBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxudmFyIF9hcnJheVB1c2ggPSBhcnJheVB1c2g7XG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gICAgcmV0dXJuIGlzQXJyYXlfMShvYmplY3QpID8gcmVzdWx0IDogX2FycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxudmFyIF9iYXNlR2V0QWxsS2V5cyA9IGJhc2VHZXRBbGxLZXlzO1xuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsIHJlc0luZGV4ID0gMCwgcmVzdWx0ID0gW107XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxudmFyIF9hcnJheUZpbHRlciA9IGFycmF5RmlsdGVyO1xuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgcmV0dXJuIFtdO1xufVxudmFyIHN0dWJBcnJheV8xID0gc3R1YkFycmF5O1xuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvJDkgPSBPYmplY3QucHJvdG90eXBlO1xuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUkMSA9IG9iamVjdFByb3RvJDkucHJvcGVydHlJc0VudW1lcmFibGU7XG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheV8xIDogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgIHJldHVybiBfYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbiAoc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZSQxLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICAgIH0pO1xufTtcbnZhciBfZ2V0U3ltYm9scyA9IGdldFN5bWJvbHM7XG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gICAgcmV0dXJuIF9iYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNfMSwgX2dldFN5bWJvbHMpO1xufVxudmFyIF9nZXRBbGxLZXlzID0gZ2V0QWxsS2V5cztcbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHJDIgPSAxO1xuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvJGEgPSBPYmplY3QucHJvdG90eXBlO1xuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkkNyA9IG9iamVjdFByb3RvJGEuaGFzT3duUHJvcGVydHk7XG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUckMiwgb2JqUHJvcHMgPSBfZ2V0QWxsS2V5cyhvYmplY3QpLCBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsIG90aFByb3BzID0gX2dldEFsbEtleXMob3RoZXIpLCBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG4gICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eSQ3LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcbiAgICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSwgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICAgIDogY29tcGFyZWQpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcbiAgICAgICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBfZXF1YWxPYmplY3RzID0gZXF1YWxPYmplY3RzO1xuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUckMyA9IDE7XG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyQyID0gJ1tvYmplY3QgQXJndW1lbnRzXScsIGFycmF5VGFnJDEgPSAnW29iamVjdCBBcnJheV0nLCBvYmplY3RUYWckMiA9ICdbb2JqZWN0IE9iamVjdF0nO1xuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvJGIgPSBPYmplY3QucHJvdG90eXBlO1xuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkkOCA9IG9iamVjdFByb3RvJGIuaGFzT3duUHJvcGVydHk7XG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgdmFyIG9iaklzQXJyID0gaXNBcnJheV8xKG9iamVjdCksIG90aElzQXJyID0gaXNBcnJheV8xKG90aGVyKSwgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyQxIDogX2dldFRhZyhvYmplY3QpLCBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnJDEgOiBfZ2V0VGFnKG90aGVyKTtcbiAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyQyID8gb2JqZWN0VGFnJDIgOiBvYmpUYWc7XG4gICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWckMiA/IG9iamVjdFRhZyQyIDogb3RoVGFnO1xuICAgIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWckMiwgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnJDIsIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG4gICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcl8xKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKCFpc0J1ZmZlcl8xKG90aGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IF9TdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5XzEob2JqZWN0KSlcbiAgICAgICAgICAgID8gX2VxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICAgICAgICA6IF9lcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgfVxuICAgIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyQzKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkkOC5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5JDguY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG4gICAgICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcbiAgICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBfU3RhY2spO1xuICAgICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghaXNTYW1lVGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IF9TdGFjayk7XG4gICAgcmV0dXJuIF9lcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG52YXIgX2Jhc2VJc0VxdWFsRGVlcCA9IGJhc2VJc0VxdWFsRGVlcDtcbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlXzEodmFsdWUpICYmICFpc09iamVjdExpa2VfMShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICAgIH1cbiAgICByZXR1cm4gX2Jhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG59XG52YXIgX2Jhc2VJc0VxdWFsID0gYmFzZUlzRXF1YWw7XG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyQ0ID0gMSwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyQyID0gMjtcbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gICAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCwgbGVuZ3RoID0gaW5kZXgsIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICB9XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgdmFyIGtleSA9IGRhdGFbMF0sIG9ialZhbHVlID0gb2JqZWN0W2tleV0sIHNyY1ZhbHVlID0gZGF0YVsxXTtcbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHN0YWNrID0gbmV3IF9TdGFjaztcbiAgICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gX2Jhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUckNCB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUckMiwgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICAgICAgOiByZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxudmFyIF9iYXNlSXNNYXRjaCA9IGJhc2VJc01hdGNoO1xuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdF8xKHZhbHVlKTtcbn1cbnZhciBfaXNTdHJpY3RDb21wYXJhYmxlID0gaXNTdHJpY3RDb21wYXJhYmxlO1xuLyoqXG4gKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgdmFyIHJlc3VsdCA9IGtleXNfMShvYmplY3QpLCBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sIHZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIF9pc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBfZ2V0TWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhO1xuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICAgIH07XG59XG52YXIgX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlID0gbWF0Y2hlc1N0cmljdENvbXBhcmFibGU7XG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICB2YXIgbWF0Y2hEYXRhID0gX2dldE1hdGNoRGF0YShzb3VyY2UpO1xuICAgIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgICAgIHJldHVybiBfbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgX2Jhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICAgIH07XG59XG52YXIgX2Jhc2VNYXRjaGVzID0gYmFzZU1hdGNoZXM7XG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLywgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvO1xuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgaWYgKGlzQXJyYXlfMSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2xfMSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cbnZhciBfaXNLZXkgPSBpc0tleTtcbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgfVxuICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLCBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuICAgICAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgX01hcENhY2hlKTtcbiAgICByZXR1cm4gbWVtb2l6ZWQ7XG59XG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBfTWFwQ2FjaGU7XG52YXIgbWVtb2l6ZV8xID0gbWVtb2l6ZTtcbi8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbnZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gICAgdmFyIHJlc3VsdCA9IG1lbW9pemVfMShmdW5jLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfSk7XG4gICAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG52YXIgX21lbW9pemVDYXBwZWQgPSBtZW1vaXplQ2FwcGVkO1xuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IF9tZW1vaXplQ2FwcGVkKGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgICB9XG4gICAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24gKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59KTtcbnZhciBfc3RyaW5nVG9QYXRoID0gc3RyaW5nVG9QYXRoO1xuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCwgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxudmFyIF9hcnJheU1hcCA9IGFycmF5TWFwO1xuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvJDEgPSBfU3ltYm9sID8gX1N5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8kMSA/IHN5bWJvbFByb3RvJDEudG9TdHJpbmcgOiB1bmRlZmluZWQ7XG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChpc0FycmF5XzEodmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHJldHVybiBfYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sXzEodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxudmFyIF9iYXNlVG9TdHJpbmcgPSBiYXNlVG9TdHJpbmc7XG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogX2Jhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG52YXIgdG9TdHJpbmdfMSA9IHRvU3RyaW5nO1xuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICBpZiAoaXNBcnJheV8xKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBfaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogX3N0cmluZ1RvUGF0aCh0b1N0cmluZ18xKHZhbHVlKSk7XG59XG52YXIgX2Nhc3RQYXRoID0gY2FzdFBhdGg7XG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSQxID0gMSAvIDA7XG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbF8xKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSQxKSA/ICctMCcgOiByZXN1bHQ7XG59XG52YXIgX3RvS2V5ID0gdG9LZXk7XG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgICBwYXRoID0gX2Nhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgdmFyIGluZGV4ID0gMCwgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG4gICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtfdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICAgIH1cbiAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG52YXIgX2Jhc2VHZXQgPSBiYXNlR2V0O1xuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogX2Jhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG59XG52YXIgZ2V0XzEgPSBnZXQ7XG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xufVxudmFyIF9iYXNlSGFzSW4gPSBiYXNlSGFzSW47XG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICAgIHBhdGggPSBfY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gcGF0aC5sZW5ndGgsIHJlc3VsdCA9IGZhbHNlO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBfdG9LZXkocGF0aFtpbmRleF0pO1xuICAgICAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgIH1cbiAgICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gICAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoXzEobGVuZ3RoKSAmJiBfaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXlfMShvYmplY3QpIHx8IGlzQXJndW1lbnRzXzEob2JqZWN0KSk7XG59XG52YXIgX2hhc1BhdGggPSBoYXNQYXRoO1xuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgX2hhc1BhdGgob2JqZWN0LCBwYXRoLCBfYmFzZUhhc0luKTtcbn1cbnZhciBoYXNJbl8xID0gaGFzSW47XG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyQ1ID0gMSwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyQzID0gMjtcbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICBpZiAoX2lzS2V5KHBhdGgpICYmIF9pc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBfbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoX3RvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldF8xKG9iamVjdCwgcGF0aCk7XG4gICAgICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICAgICAgICA/IGhhc0luXzEob2JqZWN0LCBwYXRoKVxuICAgICAgICAgICAgOiBfYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyQ1IHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyQzKTtcbiAgICB9O1xufVxudmFyIF9iYXNlTWF0Y2hlc1Byb3BlcnR5ID0gYmFzZU1hdGNoZXNQcm9wZXJ0eTtcbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIF9iYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgfTtcbn1cbnZhciBfYmFzZVByb3BlcnR5RGVlcCA9IGJhc2VQcm9wZXJ0eURlZXA7XG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFtcbiAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICogXTtcbiAqXG4gKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqXG4gKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgICByZXR1cm4gX2lzS2V5KHBhdGgpID8gX2Jhc2VQcm9wZXJ0eShfdG9LZXkocGF0aCkpIDogX2Jhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG59XG52YXIgcHJvcGVydHlfMSA9IHByb3BlcnR5O1xuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eV8xO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5XzEodmFsdWUpXG4gICAgICAgICAgICA/IF9iYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgICAgICAgIDogX2Jhc2VNYXRjaGVzKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BlcnR5XzEodmFsdWUpO1xufVxudmFyIF9iYXNlSXRlcmF0ZWUgPSBiYXNlSXRlcmF0ZWU7XG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCwgd2l0aG91dCBzdXBwb3J0XG4gKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmAgdXNpbmcgYGVhY2hGdW5jYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaXRBY2N1bSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBvciBsYXN0IGVsZW1lbnQgb2ZcbiAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgZWFjaEZ1bmMpIHtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gaW5pdEFjY3VtXG4gICAgICAgICAgICA/IChpbml0QWNjdW0gPSBmYWxzZSwgdmFsdWUpXG4gICAgICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cbnZhciBfYmFzZVJlZHVjZSA9IGJhc2VSZWR1Y2U7XG4vKipcbiAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gKiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYCwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gKiB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czpcbiAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKlxuICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICpcbiAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gKiBhbmQgYHNvcnRCeWBcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKiBAc2VlIF8ucmVkdWNlUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogXy5yZWR1Y2UoWzEsIDJdLCBmdW5jdGlvbihzdW0sIG4pIHtcbiAqICAgcmV0dXJuIHN1bSArIG47XG4gKiB9LCAwKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gKiAgIHJldHVybiByZXN1bHQ7XG4gKiB9LCB7fSk7XG4gKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICB2YXIgZnVuYyA9IGlzQXJyYXlfMShjb2xsZWN0aW9uKSA/IF9hcnJheVJlZHVjZSA6IF9iYXNlUmVkdWNlLCBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcbiAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBfYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlKSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgX2Jhc2VFYWNoKTtcbn1cbnZhciByZWR1Y2VfMSA9IHJlZHVjZTtcbi8qKlxuKiBQcmUtY2FsY3VsYXRpb24gZGltZW5zaW9uIHNpemVzIGFuZCBzaXplcyBmb3IgZWFjaCBjZWxsXG4qL1xuZnVuY3Rpb24gY2FsY3VsYXRlRGltZW5zaW9uRGF0YShzdGF0ZSwgbmV3U2l6ZXMpIHtcbiAgICB2YXIgcG9zaXRpb25JbmRleGVzID0gW107XG4gICAgdmFyIHBvc2l0aW9uSW5kZXhUb0Nvb3JkaW5hdGUgPSB7fTtcbiAgICB2YXIgaXRlbUluZGV4VG9Db29yZGluYXRlID0ge307XG4gICAgLy8gdG8gY29tcGFyZSBob3cgcmVhbCB3aWR0aCBjaGFuZ2VkXG4gICAgdmFyIG5ld1RvdGFsID0gMDtcbiAgICAvLyBjb21iaW5lIGFsbCBzaXplc1xuICAgIHZhciBzaXplcyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc2l6ZXMpLCBuZXdTaXplcyk7XG4gICAgLy8gcHJlcGFyZSBvcmRlciBzb3J0ZWQgbmV3IHNpemVzIGFuZCBjYWxjdWxhdGUgY2hhbmdlZCByZWFsIHNpemVcbiAgICB2YXIgbmV3SW5kZXhlcyA9IFtdO1xuICAgIGVhY2gobmV3U2l6ZXMsIGZ1bmN0aW9uIChzaXplLCBpbmRleCkge1xuICAgICAgICAvLyBpZiBmaXJzdCBpbnRyb2R1Y2VkIGN1c3RvbSBzaXplXG4gICAgICAgIGlmICghc3RhdGUuc2l6ZXNbaW5kZXhdKSB7XG4gICAgICAgICAgICBuZXdUb3RhbCArPSBzaXplIC0gc3RhdGUub3JpZ2luSXRlbVNpemU7XG4gICAgICAgICAgICBuZXdJbmRleGVzLnNwbGljZShzb3J0ZWRJbmRleF8xKG5ld0luZGV4ZXMsIHBhcnNlSW50KGluZGV4LCAxMCkpLCAwLCBwYXJzZUludChpbmRleCwgMTApKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1RvdGFsICs9IHNpemUgLSBzdGF0ZS5zaXplc1tpbmRleF07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBhZGQgb3JkZXIgdG8gY2FjaGVkIG9yZGVyIGNvbGxlY3Rpb24gZm9yIGZhc3RlciBsaW5raW5nXG4gICAgdmFyIHVwZGF0ZWRJbmRleGVzQ2FjaGUgPSBtZXJnZVNvcnRlZEFycmF5KHN0YXRlLmluZGV4ZXMsIG5ld0luZGV4ZXMpO1xuICAgIC8vIGZpbGwgbmV3IGNvb3JkaW5hdGVzXG4gICAgcmVkdWNlXzEodXBkYXRlZEluZGV4ZXNDYWNoZSwgZnVuY3Rpb24gKHByZXZpb3VzLCBpdGVtSW5kZXgsIGkpIHtcbiAgICAgICAgdmFyIG5ld0l0ZW0gPSB7XG4gICAgICAgICAgICBpdGVtSW5kZXg6IGl0ZW1JbmRleCxcbiAgICAgICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICAgICAgZW5kOiAwXG4gICAgICAgIH07XG4gICAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICAgICAgbmV3SXRlbS5zdGFydCA9IChpdGVtSW5kZXggLSBwcmV2aW91cy5pdGVtSW5kZXggLSAxKSAqIHN0YXRlLm9yaWdpbkl0ZW1TaXplICsgcHJldmlvdXMuZW5kO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3SXRlbS5zdGFydCA9IGl0ZW1JbmRleCAqIHN0YXRlLm9yaWdpbkl0ZW1TaXplO1xuICAgICAgICB9XG4gICAgICAgIG5ld0l0ZW0uZW5kID0gbmV3SXRlbS5zdGFydCArIHNpemVzW2l0ZW1JbmRleF07XG4gICAgICAgIHBvc2l0aW9uSW5kZXhlcy5wdXNoKG5ld0l0ZW0uc3RhcnQpO1xuICAgICAgICBpdGVtSW5kZXhUb0Nvb3JkaW5hdGVbaXRlbUluZGV4XSA9IHBvc2l0aW9uSW5kZXhUb0Nvb3JkaW5hdGVbaV0gPSBuZXdJdGVtO1xuICAgICAgICByZXR1cm4gbmV3SXRlbTtcbiAgICB9LCB1bmRlZmluZWQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGluZGV4ZXM6IHVwZGF0ZWRJbmRleGVzQ2FjaGUsXG4gICAgICAgIHJlYWxTaXplOiBzdGF0ZS5yZWFsU2l6ZSArIG5ld1RvdGFsLFxuICAgICAgICBzaXplczogc2l6ZXMsXG4gICAgICAgIHBvc2l0aW9uSW5kZXhlczogcG9zaXRpb25JbmRleGVzLFxuICAgICAgICBwb3NpdGlvbkluZGV4VG9Db29yZGluYXRlOiBwb3NpdGlvbkluZGV4VG9Db29yZGluYXRlLFxuICAgICAgICBpdGVtSW5kZXhUb0Nvb3JkaW5hdGU6IGl0ZW1JbmRleFRvQ29vcmRpbmF0ZVxuICAgIH07XG59XG4vKipcbiogU3RvcmluZyBwcmUtY2FsY3VsYXRlZFxuKiBEaW1lbnNpb24gaW5mb3JtYXRpb24gYW5kIHNpemVzXG4qL1xuZnVuY3Rpb24gaW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGluZGV4ZXM6IFtdLFxuICAgICAgICAvLyBpdGVtIGluZGV4IHRvIHNpemVcbiAgICAgICAgc2l6ZXM6IHt9LFxuICAgICAgICAvLyBvcmRlciBpbiBpbmRleGVzW10gdG8gY29vcmRpbmF0ZVxuICAgICAgICBwb3NpdGlvbkluZGV4VG9Db29yZGluYXRlOiB7fSxcbiAgICAgICAgLy8gaW5pdGlhbCBlbGVtZW50IHRvIGNvb3JkaW5hdGUgXlxuICAgICAgICBpdGVtSW5kZXhUb0Nvb3JkaW5hdGU6IHt9LFxuICAgICAgICBwb3NpdGlvbkluZGV4ZXM6IFtdLFxuICAgICAgICAvLyBzaXplIHdoaWNoIGFsbCBpdGVtcyBjYW4gdGFrZVxuICAgICAgICByZWFsU2l6ZTogMCxcbiAgICAgICAgLy8gaW5pdGlhbCBpdGVtIHNpemUgaWYgaXQgd2Fzbid0IGNoYW5nZWRcbiAgICAgICAgb3JpZ2luSXRlbVNpemU6IDBcbiAgICB9O1xufVxudmFyIHJvd3NTdG9yZSA9IGNyZWF0ZVN0b3JlKGluaXRpYWxTdGF0ZSgpKTtcbnZhciBjb2xzU3RvcmUgPSBjcmVhdGVTdG9yZShpbml0aWFsU3RhdGUoKSk7XG5mdW5jdGlvbiBnZXRDdXJyZW50U3RhdGUodHlwZSkge1xuICAgIHZhciBzdGF0ZSA9IGluaXRpYWxTdGF0ZSgpO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc3RhdGUpO1xuICAgIHZhciBzdG9yZSA9IHR5cGUgPT09ICdjb2wnID8gY29sc1N0b3JlIDogcm93c1N0b3JlO1xuICAgIHJldHVybiByZWR1Y2VfMShrZXlzLCBmdW5jdGlvbiAociwgaykge1xuICAgICAgICB2YXIgZGF0YSA9IHN0b3JlLmdldChrKTtcbiAgICAgICAgcltrXSA9IGRhdGE7XG4gICAgICAgIHJldHVybiByO1xuICAgIH0sIHN0YXRlKTtcbn1cbmZ1bmN0aW9uIGdldFN0b3JlQnlUeXBlKHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnY29sJzpcbiAgICAgICAgICAgIHJldHVybiBjb2xzU3RvcmU7XG4gICAgICAgIGNhc2UgJ3Jvdyc6XG4gICAgICAgICAgICByZXR1cm4gcm93c1N0b3JlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFNldHRpbmdzKGRhdGEsIGRpbWVuc2lvblR5cGUpIHtcbiAgICB2YXIgc3RvcmUgPSBnZXRTdG9yZUJ5VHlwZShkaW1lbnNpb25UeXBlKTtcbiAgICBzZXRTdG9yZShzdG9yZSwgeyBvcmlnaW5JdGVtU2l6ZTogZGF0YSB9KTtcbn1cbmZ1bmN0aW9uIHNldFJlYWxTaXplKGNvdW50LCBkaW1lbnNpb25UeXBlKSB7XG4gICAgdmFyIHN0b3JlID0gZ2V0U3RvcmVCeVR5cGUoZGltZW5zaW9uVHlwZSk7XG4gICAgdmFyIHJlYWxTaXplID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgcmVhbFNpemUgKz0gc3RvcmUuZ2V0KCdzaXplcycpW2ldIHx8IHN0b3JlLmdldCgnb3JpZ2luSXRlbVNpemUnKTtcbiAgICB9XG4gICAgc2V0U3RvcmUoc3RvcmUsIHsgcmVhbFNpemU6IHJlYWxTaXplIH0pO1xufVxuZnVuY3Rpb24gc2V0RGltZW5zaW9uU2l6ZShzaXplcywgZGltZW5zaW9uVHlwZSkge1xuICAgIHZhciBzdG9yZSA9IGdldFN0b3JlQnlUeXBlKGRpbWVuc2lvblR5cGUpO1xuICAgIHNldFN0b3JlKHN0b3JlLCBjYWxjdWxhdGVEaW1lbnNpb25EYXRhKGdldEN1cnJlbnRTdGF0ZShkaW1lbnNpb25UeXBlKSwgc2l6ZXMpKTtcbiAgICBzZXRWaWV3UG9ydERpbWVuc2lvbihzaXplcywgZGltZW5zaW9uVHlwZSk7XG59XG4vKipcbiogU3RvcmUgaXMgcmVzcG9uc2libGUgZm9yIHZpc2libGVcbiogVmlld3BvcnQgaW5mb3JtYXRpb24gZm9yIGVhY2ggZGltZW5zaW9uXG4qIFJlZHJhdyBpdGVtcyBkdXJpbmcgc2Nyb2xsaW5nXG4qL1xuZnVuY3Rpb24gaW5pdGlhbFN0YXRlJDEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICBpdGVtSW5kZXhlczogW10sXG4gICAgICAgIGZyYW1lT2Zmc2V0OiAwLFxuICAgICAgICB2aXJ0dWFsU2l6ZTogMCxcbiAgICAgICAgcmVhbENvdW50OiAwXG4gICAgfTtcbn1cbnZhciByb3dzU3RvcmUkMSA9IGNyZWF0ZVN0b3JlKGluaXRpYWxTdGF0ZSQxKCkpO1xudmFyIGNvbHNTdG9yZSQxID0gY3JlYXRlU3RvcmUoaW5pdGlhbFN0YXRlJDEoKSk7XG5mdW5jdGlvbiBnZXRTdG9yZUJ5VHlwZSQxKHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnY29sJzpcbiAgICAgICAgICAgIHJldHVybiBjb2xzU3RvcmUkMTtcbiAgICAgICAgY2FzZSAncm93JzpcbiAgICAgICAgICAgIHJldHVybiByb3dzU3RvcmUkMTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRJdGVtcyQxKHN0b3JlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbXM6IHN0b3JlLmdldCgnaXRlbXMnKSxcbiAgICAgICAgaXRlbUluZGV4ZXM6IHN0b3JlLmdldCgnaXRlbUluZGV4ZXMnKVxuICAgIH07XG59XG5mdW5jdGlvbiBzZXRWaWV3cG9ydChkYXRhLCBkaW1lbnNpb25UeXBlKSB7XG4gICAgdmFyIHN0b3JlID0gZ2V0U3RvcmVCeVR5cGUkMShkaW1lbnNpb25UeXBlKTtcbiAgICBpZiAoIWRhdGEudmlydHVhbFNpemUpIHtcbiAgICAgICAgc3RvcmUuc2V0KCdpdGVtSW5kZXhlcycsIFtdKTtcbiAgICAgICAgc3RvcmUuc2V0KCdpdGVtcycsIFtdKTtcbiAgICB9XG4gICAgc2V0U3RvcmUoc3RvcmUsIGRhdGEpO1xufVxuZnVuY3Rpb24gc2V0Vmlld1BvcnRDb29yZGluYXRlKHBvc2l0aW9uLCBkaW1lbnNpb25UeXBlKSB7XG4gICAgdmFyIHN0b3JlID0gZ2V0U3RvcmVCeVR5cGUkMShkaW1lbnNpb25UeXBlKTtcbiAgICAvLyBubyB2aXNpYmxlIGRhdGEgdG8gY2FsY3VsYXRlXG4gICAgaWYgKCFzdG9yZS5nZXQoJ3ZpcnR1YWxTaXplJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZGltZW5zaW9uID0gZ2V0Q3VycmVudFN0YXRlKGRpbWVuc2lvblR5cGUpO1xuICAgIHZhciBvdXRzaXplID0gc3RvcmUuZ2V0KCdmcmFtZU9mZnNldCcpICogMiAqIGRpbWVuc2lvbi5vcmlnaW5JdGVtU2l6ZTtcbiAgICB2YXIgdmlydHVhbFNpemUgPSBzdG9yZS5nZXQoJ3ZpcnR1YWxTaXplJykgKyBvdXRzaXplO1xuICAgIHZhciBtYXhDb29yZGluYXRlID0gMDtcbiAgICBpZiAoZGltZW5zaW9uLnJlYWxTaXplID4gdmlydHVhbFNpemUpIHtcbiAgICAgICAgbWF4Q29vcmRpbmF0ZSA9IGRpbWVuc2lvbi5yZWFsU2l6ZSAtIHZpcnR1YWxTaXplO1xuICAgIH1cbiAgICB2YXIgcG9zID0gcG9zaXRpb247XG4gICAgcG9zIC09IHN0b3JlLmdldCgnZnJhbWVPZmZzZXQnKSAqIGRpbWVuc2lvbi5vcmlnaW5JdGVtU2l6ZTtcbiAgICBwb3MgPSBwb3MgPCAwID8gMCA6IHBvcyA8IG1heENvb3JkaW5hdGUgPyBwb3MgOiBtYXhDb29yZGluYXRlO1xuICAgIHZhciBmaXJzdEl0ZW0gPSBnZXRGaXJzdEl0ZW0oZ2V0SXRlbXMkMShzdG9yZSkpO1xuICAgIHZhciBsYXN0SXRlbSA9IGdldExhc3RJdGVtKGdldEl0ZW1zJDEoc3RvcmUpKTtcbiAgICAvLyBsZWZ0IHBvc2l0aW9uIGNoYW5nZWRcbiAgICBpZiAoIWlzQWN0aXZlUmFuZ2UocG9zLCBmaXJzdEl0ZW0pKSB7XG4gICAgICAgIHZhciB0b1VwZGF0ZSA9IGdldFVwZGF0ZWRJdGVtc0J5UG9zaXRpb24ocG9zLCBnZXRJdGVtcyQxKHN0b3JlKSwgc3RvcmUuZ2V0KCdyZWFsQ291bnQnKSwgdmlydHVhbFNpemUsIGRpbWVuc2lvbik7XG4gICAgICAgIHNldFN0b3JlKHN0b3JlLCB0b1VwZGF0ZSk7XG4gICAgICAgIC8vIHJpZ2h0IHBvc2l0aW9uIGNoYW5nZWRcbiAgICB9XG4gICAgZWxzZSBpZiAoZmlyc3RJdGVtICYmIChzdG9yZS5nZXQoJ3ZpcnR1YWxTaXplJykgKyBwb3MpID4gKGxhc3RJdGVtID09PSBudWxsIHx8IGxhc3RJdGVtID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsYXN0SXRlbS5lbmQpKSB7XG4gICAgICAgIHZhciB0b1VwZGF0ZSA9IGFkZE1pc3NpbmdJdGVtcyhmaXJzdEl0ZW0sIHN0b3JlLmdldCgncmVhbENvdW50JyksIHZpcnR1YWxTaXplICsgcG9zIC0gZmlyc3RJdGVtLnN0YXJ0LCBnZXRJdGVtcyQxKHN0b3JlKSwgZGltZW5zaW9uKTtcbiAgICAgICAgc2V0U3RvcmUoc3RvcmUsIHtcbiAgICAgICAgICAgIGl0ZW1zOiBfX3NwcmVhZEFycmF5cyhzdG9yZS5nZXQoJ2l0ZW1zJyksIHRvVXBkYXRlLml0ZW1zKSxcbiAgICAgICAgICAgIGl0ZW1JbmRleGVzOiBfX3NwcmVhZEFycmF5cyhzdG9yZS5nZXQoJ2l0ZW1JbmRleGVzJyksIHRvVXBkYXRlLml0ZW1JbmRleGVzKVxuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRWaWV3UG9ydERpbWVuc2lvbihzaXplcywgZGltZW5zaW9uVHlwZSkge1xuICAgIHZhciBzdG9yZSA9IGdldFN0b3JlQnlUeXBlJDEoZGltZW5zaW9uVHlwZSk7XG4gICAgLy8gdmlld3BvcnQgbm90IGluaXRlZFxuICAgIGlmICghc3RvcmUuZ2V0KCdpdGVtcycpLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBpdGVtcyA9IHN0b3JlLmdldCgnaXRlbXMnKTtcbiAgICB2YXIgY2hhbmdlZENvb3JkaW5hdGUgPSAwO1xuICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSBzdG9yZS5nZXQoJ2l0ZW1JbmRleGVzJyk7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgIHZhciBpID0gX2NbX2JdO1xuICAgICAgICB2YXIgY2hhbmdlZFNpemUgPSAwO1xuICAgICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAvLyBjaGFuZ2UgcG9zIGlmIHNpemUgY2hhbmdlIHByZXNlbnQgYmVmb3JlXG4gICAgICAgIGlmIChjaGFuZ2VkQ29vcmRpbmF0ZSkge1xuICAgICAgICAgICAgaXRlbS5zdGFydCArPSBjaGFuZ2VkQ29vcmRpbmF0ZTtcbiAgICAgICAgICAgIGl0ZW0uZW5kICs9IGNoYW5nZWRDb29yZGluYXRlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNoYW5nZSBzaXplXG4gICAgICAgIHZhciBzaXplXzQgPSBzaXplc1tpdGVtLml0ZW1JbmRleF0gfHwgMDtcbiAgICAgICAgaWYgKHNpemVfNCkge1xuICAgICAgICAgICAgY2hhbmdlZFNpemUgPSBzaXplXzQgLSBpdGVtLnNpemU7XG4gICAgICAgICAgICBjaGFuZ2VkQ29vcmRpbmF0ZSArPSBjaGFuZ2VkU2l6ZTtcbiAgICAgICAgICAgIGl0ZW0uc2l6ZSA9IHNpemVfNDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbmdlZFNpemUgfHwgY2hhbmdlZENvb3JkaW5hdGUpIHtcbiAgICAgICAgICAgIGl0ZW1zW2ldID0gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0U3RvcmUoc3RvcmUsIHsgaXRlbXM6IGl0ZW1zIH0pO1xufVxuLyoqXG4qIFN0b3JpbmcgaW5pdGlhbCBkYXRhIGFuZCBjb2x1bW4gaW5mb3JtYXRpb25cbiovXG52YXIgc3RvcmUgPSBjcmVhdGVTdG9yZSh7XG4gICAgZGF0YTogW10sXG4gICAgY29sdW1uczogW11cbn0pO1xudmFyIGRhdGFTdG9yZSA9IG5ldyBEYXRhU291cmNlKHN0b3JlKTtcbmZ1bmN0aW9uIHNldENvbHVtbihkYXRhKSB7XG4gICAgdmFyIGNvbHMgPSBzaXplXzEoZGF0YSk7XG4gICAgZGF0YVN0b3JlLnNldENvbHVtbihkYXRhKTtcbiAgICBzZXRWaWV3cG9ydCh7IHJlYWxDb3VudDogY29scyB9LCAnY29sJyk7XG4gICAgc2V0UmVhbFNpemUoY29scywgJ2NvbCcpO1xufVxuZnVuY3Rpb24gc2V0RGF0YShkYXRhKSB7XG4gICAgdmFyIHJvd3MgPSBzaXplXzEoZGF0YSk7XG4gICAgZGF0YVN0b3JlLnNldERhdGEoZGF0YSk7XG4gICAgc2V0Vmlld3BvcnQoeyByZWFsQ291bnQ6IHJvd3MgfSwgJ3JvdycpO1xuICAgIHNldFJlYWxTaXplKHJvd3MsICdyb3cnKTtcbn1cbnZhciByZXZvR3JpZENzcyA9IFwiOmhvc3R7ZGlzcGxheTpibG9jaztoZWlnaHQ6MTAwJX0uaGVhZGVye3Bvc2l0aW9uOnJlbGF0aXZlO2hlaWdodDozMHB4O2Rpc3BsYXk6dGFibGUtY2VsbH0uaGVhZGVyLXdyYXBwZXJ7aGVpZ2h0OjA7ZGlzcGxheTp0YWJsZS1yb3d9LnZpZXdwb3J0LXdyYXBwZXJ7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS52aWV3cG9ydHtkaXNwbGF5OmJsb2NrO2hlaWdodDoxMDAlO21heC13aWR0aDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlO2Zsb2F0OmxlZnR9LnZpZXdwb3J0LWxheWVye2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtwb3NpdGlvbjpyZWxhdGl2ZX0uZGF0YS1jZWxse3Bvc2l0aW9uOmFic29sdXRlOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDstd2Via2l0LWJveC1zaGFkb3c6MCAxcHggMCAwICNiNWI1YjUsIDFweCAwIDAgMCAjYjViNWI1O2JveC1zaGFkb3c6MCAxcHggMCAwICNiNWI1YjUsIDFweCAwIDAgMCAjYjViNWI1O2hlaWdodDoxMDAlO3RleHQtYWxpZ246Y2VudGVyfS5yb3d7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtsZWZ0OjB9LmRhdGEtaGVhZGVyLWNlbGx7cG9zaXRpb246YWJzb2x1dGU7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94Oy13ZWJraXQtYm94LXNoYWRvdzowIDFweCAwIDAgI2I1YjViNSwgMXB4IDAgMCAwICNiNWI1YjU7Ym94LXNoYWRvdzowIDFweCAwIDAgI2I1YjViNSwgMXB4IDAgMCAwICNiNWI1YjU7aGVpZ2h0OjEwMCU7dGV4dC1hbGlnbjpjZW50ZXJ9Lmhvcml6b250YWwtd3JhcHBlcntoZWlnaHQ6MTAwJTtvdmVyZmxvdy14OmF1dG87b3ZlcmZsb3cteTpoaWRkZW59LmlubmVyLWNvbnRlbnQtdGFibGV7ZGlzcGxheTp0YWJsZTtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MH0udmVydGljYWwtd3JhcHBlcntkaXNwbGF5OnRhYmxlLXJvdztwb3NpdGlvbjpyZWxhdGl2ZX0udmVydGljYWwtaW5uZXJ7b3ZlcmZsb3cteTphdXRvO2hlaWdodDoxMDAlOy1tcy1vdmVyZmxvdy1zdHlsZTpub25lO30udmVydGljYWwtaW5uZXI6Oi13ZWJraXQtc2Nyb2xsYmFye2Rpc3BsYXk6bm9uZTstd2Via2l0LWFwcGVhcmFuY2U6bm9uZX0udmVydGljYWwtc2Nyb2xse3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjA7b3ZlcmZsb3cteTphdXRvO292ZXJmbG93LXg6dmlzaWJsZTt6LWluZGV4OjE7dG9wOjA7Ym90dG9tOjB9LnZlcnRpY2FsLXNjcm9sbD5kaXZ7d2lkdGg6MXB4fVwiO1xudmFyIGluaXRpYWxTZXR0aW5ncyA9IHtcbiAgICBkZWZhdWx0Q29sdW1uU2l6ZTogODAsXG4gICAgZGVmYXVsdFJvd1NpemU6IDMwLFxuICAgIGZyYW1lU2l6ZTogMTAsXG4gICAgZGltZW5zaW9uczogdW5kZWZpbmVkXG59O1xudmFyIFJldm9HcmlkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNsYXNzXzEoaG9zdFJlZikge1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMgPSB7fTtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IGluaXRpYWxTZXR0aW5ncztcbiAgICAgICAgLy8gZGF0YSBpcyBhcnJheSBvZiBvYmplY3RzXG4gICAgICAgIHRoaXMuc291cmNlID0gW107XG4gICAgICAgIC8vIGlmIHNvdXJjZSBwcm92aWRlZCBhcyBvYmplY3QgaGVhZGVyICdwcm9wJyB3aWxsIGxpbmsgdG8gdGhlIG9iamVjdCBmaWVsZFxuICAgICAgICB0aGlzLmNvbHVtbnMgPSBbXTtcbiAgICB9XG4gICAgY2xhc3NfMS5wcm90b3R5cGUub25TZXR0aW5nc0NoYW5nZSA9IGZ1bmN0aW9uIChuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICBpZiAoIW9sZFZhbCB8fCBuZXdWYWwuZnJhbWVTaXplICE9PSBvbGRWYWwuZnJhbWVTaXplKSB7XG4gICAgICAgICAgICBzZXRWaWV3cG9ydCh7IGZyYW1lT2Zmc2V0OiBuZXdWYWwuZnJhbWVTaXplIHx8IDAgfSwgJ3JvdycpO1xuICAgICAgICAgICAgc2V0Vmlld3BvcnQoeyBmcmFtZU9mZnNldDogbmV3VmFsLmZyYW1lU2l6ZSB8fCAwIH0sICdjb2wnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9sZFZhbCB8fCBuZXdWYWwuZGVmYXVsdFJvd1NpemUgIT09IG9sZFZhbC5kZWZhdWx0Um93U2l6ZSkge1xuICAgICAgICAgICAgc2V0U2V0dGluZ3ModGhpcy5zZXR0aW5ncy5kZWZhdWx0Um93U2l6ZSwgJ3JvdycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb2xkVmFsIHx8IG5ld1ZhbC5kZWZhdWx0Q29sdW1uU2l6ZSAhPT0gb2xkVmFsLmRlZmF1bHRDb2x1bW5TaXplKSB7XG4gICAgICAgICAgICBzZXRTZXR0aW5ncyh0aGlzLnNldHRpbmdzLmRlZmF1bHRDb2x1bW5TaXplLCAnY29sJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNsYXNzXzEucHJvdG90eXBlLmRhdGFDaGFuZ2VkID0gZnVuY3Rpb24gKG5ld1ZhbCkge1xuICAgICAgICBzZXREYXRhKG5ld1ZhbCk7XG4gICAgfTtcbiAgICBjbGFzc18xLnByb3RvdHlwZS5jb2x1bW5DaGFuZ2VkID0gZnVuY3Rpb24gKG5ld1ZhbCkge1xuICAgICAgICBzZXRDb2x1bW4obmV3VmFsKTtcbiAgICB9O1xuICAgIGNsYXNzXzEucHJvdG90eXBlLmNvbXBvbmVudFdpbGxMb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vblNldHRpbmdzQ2hhbmdlKHRoaXMuc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgIHNldERpbWVuc2lvblNpemUodGhpcy5kaW1lbnNpb25zLnJvdywgJ3JvdycpO1xuICAgICAgICAgICAgICAgIHNldERpbWVuc2lvblNpemUodGhpcy5kaW1lbnNpb25zLmNvbCwgJ2NvbCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uQ2hhbmdlZCh0aGlzLmNvbHVtbnMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YUNoYW5nZWQodGhpcy5zb3VyY2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNsYXNzXzEucHJvdG90eXBlLmNvbXBvbmVudERpZExvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBtb2R1bGU7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhKCdSZXNpemVPYnNlcnZlcicgaW4gd2luZG93KSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBpbXBvcnQoJy4vcmVzaXplLW9ic2VydmVyLWM5NWYxN2ZhLmpzJyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuUmVzaXplT2JzZXJ2ZXIgPSBtb2R1bGUuUmVzaXplT2JzZXJ2ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFZpZXdwb3J0KHsgdmlydHVhbFNpemU6IHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQgfSwgJ3JvdycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFZpZXdwb3J0KHsgdmlydHVhbFNpemU6IHRoaXMuZWxlbWVudC5jbGllbnRXaWR0aCB9LCAnY29sJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy52aWV3cG9ydC5zY3JvbGxYKCldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnZpZXdwb3J0LnNjcm9sbFkoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKHRoaXMuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY2xhc3NfMS5wcm90b3R5cGUuY29tcG9uZW50RGlkVW5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMucmVzaXplT2JzZXJ2ZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXNjb25uZWN0KCk7XG4gICAgfTtcbiAgICBjbGFzc18xLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBoKFwicmV2b2dyLXZpZXdwb3J0LXNjcm9sbGFibGVcIiwgeyBjbGFzczogJ3ZpZXdwb3J0JywgcmVmOiBmdW5jdGlvbiAoZWwpIHsgX3RoaXMudmlld3BvcnQgPSBlbDsgfSB9LCBoKFwicmV2b2dyLWhlYWRlclwiLCB7IHNsb3Q6ICdoZWFkZXInLCBjbGFzczogJ2hlYWRlcicgfSksIGgoXCJyZXZvZ3ItZGF0YVwiLCB7IHNsb3Q6ICdjb250ZW50JywgY2xhc3M6ICd2aWV3cG9ydC1sYXllcicgfSkpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsYXNzXzEucHJvdG90eXBlLCBcImVsZW1lbnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbGFzc18xLCBcIndhdGNoZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIFwic2V0dGluZ3NcIjogW1wib25TZXR0aW5nc0NoYW5nZVwiXSxcbiAgICAgICAgICAgICAgICBcInNvdXJjZVwiOiBbXCJkYXRhQ2hhbmdlZFwiXSxcbiAgICAgICAgICAgICAgICBcImNvbHVtbnNcIjogW1wiY29sdW1uQ2hhbmdlZFwiXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGNsYXNzXzE7XG59KCkpO1xuUmV2b0dyaWQuc3R5bGUgPSByZXZvR3JpZENzcztcbnZhciBSZXZvZ3JEYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJldm9nckRhdGEoaG9zdFJlZikge1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIH1cbiAgICBSZXZvZ3JEYXRhLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByb3dzRWxzID0gW107XG4gICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSByb3dzU3RvcmUkMS5nZXQoJ2l0ZW1zJyk7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICB2YXIgcm93ID0gX2NbX2JdO1xuICAgICAgICAgICAgdmFyIGNlbGxzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfZCA9IDAsIF9mID0gY29sc1N0b3JlJDEuZ2V0KCdpdGVtcycpOyBfZCA8IF9mLmxlbmd0aDsgX2QrKykge1xuICAgICAgICAgICAgICAgIHZhciBjb2wgPSBfZltfZF07XG4gICAgICAgICAgICAgICAgY2VsbHMucHVzaChoKFwiZGl2XCIsIHsgY2xhc3M6ICdkYXRhLWNlbGwnLCBzdHlsZTogeyB3aWR0aDogY29sLnNpemUgKyBcInB4XCIsIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGVYKFwiICsgY29sLnN0YXJ0ICsgXCJweClcIiB9IH0sIGRhdGFTdG9yZS5wcm92aWRlci5kYXRhKHJvdy5pdGVtSW5kZXgsIGNvbC5pdGVtSW5kZXgpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3dzRWxzLnB1c2goaChcImRpdlwiLCB7IGNsYXNzOiAncm93Jywgc3R5bGU6IHsgaGVpZ2h0OiByb3cuc2l6ZSArIFwicHhcIiwgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoXCIgKyByb3cuc3RhcnQgKyBcInB4KVwiIH0gfSwgY2VsbHMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm93c0VscztcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXZvZ3JEYXRhLnByb3RvdHlwZSwgXCJlbGVtZW50XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gUmV2b2dyRGF0YTtcbn0oKSk7XG52YXIgaW50ZXJhY3RfbWluID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAgIC8qIGludGVyYWN0LmpzIDEuOC40IHwgaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS90YXllL2ludGVyYWN0LmpzL21hc3Rlci9MSUNFTlNFICovXG4gICAgIWZ1bmN0aW9uIChlKSB7IG1vZHVsZS5leHBvcnRzID0gZSgpOyB9KGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZSh0KSB7IHZhciBuOyByZXR1cm4gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIG4gfHwgdChuID0geyBleHBvcnRzOiB7fSwgcGFyZW50OiBlIH0sIG4uZXhwb3J0cyksIG4uZXhwb3J0czsgfTsgfSB2YXIgTyA9IGUoZnVuY3Rpb24gKGUsIHQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgdC5TY29wZSA9IHQuQWN0aW9uTmFtZSA9IHZvaWQgMDsgdmFyIG4gPSBmKGspLCBvID0gZnVuY3Rpb24gKGUpIHsgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKVxuICAgICAgICByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPT0gcChlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBjKCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbik7IHJldHVybiBuOyB9KHB0KSwgaSA9IGYoSXQpLCBhID0gZihDdCksIHUgPSBmKFV0KSwgcyA9IGYoZm4pLCBsID0gZihUbiksIHIgPSBmKEUoe30pKTsgZnVuY3Rpb24gYygpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZTsgfSwgZTsgfSBmdW5jdGlvbiBmKGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgZGVmYXVsdDogZSB9OyB9IGZ1bmN0aW9uIHAoZSkgeyByZXR1cm4gKHAgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdHlwZW9mIGU7IH0gOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBlLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgZSAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgZTsgfSkoZSk7IH0gZnVuY3Rpb24gZChlLCB0KSB7IHJldHVybiAhdCB8fCBcIm9iamVjdFwiICE9PSBwKHQpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdCA/IGZ1bmN0aW9uIChlKSB7IGlmICh2b2lkIDAgIT09IGUpXG4gICAgICAgIHJldHVybiBlOyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0oZSkgOiB0OyB9IGZ1bmN0aW9uIHYoZSwgdCwgbikgeyByZXR1cm4gKHYgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBSZWZsZWN0ICYmIFJlZmxlY3QuZ2V0ID8gUmVmbGVjdC5nZXQgOiBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciA9IGZ1bmN0aW9uIChlLCB0KSB7IGZvciAoOyAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIHQpICYmIG51bGwgIT09IChlID0geShlKSk7KVxuICAgICAgICA7IHJldHVybiBlOyB9KGUsIHQpOyBpZiAocikge1xuICAgICAgICB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IociwgdCk7XG4gICAgICAgIHJldHVybiBvLmdldCA/IG8uZ2V0LmNhbGwobikgOiBvLnZhbHVlO1xuICAgIH0gfSkoZSwgdCwgbiB8fCBlKTsgfSBmdW5jdGlvbiB5KGUpIHsgcmV0dXJuICh5ID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihlKTsgfSkoZSk7IH0gZnVuY3Rpb24gbShlLCB0KSB7IHJldHVybiAobSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gZS5fX3Byb3RvX18gPSB0LCBlOyB9KShlLCB0KTsgfSBmdW5jdGlvbiBnKGUsIHQpIHsgaWYgKCEoZSBpbnN0YW5jZW9mIHQpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IGZ1bmN0aW9uIGgoZSwgdCkgeyBmb3IgKHZhciBuID0gMDsgbiA8IHQubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgdmFyIHIgPSB0W25dO1xuICAgICAgICByLmVudW1lcmFibGUgPSByLmVudW1lcmFibGUgfHwgITEsIHIuY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiByICYmIChyLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgci5rZXksIHIpO1xuICAgIH0gfSBmdW5jdGlvbiBiKGUsIHQsIG4pIHsgcmV0dXJuIHQgJiYgaChlLnByb3RvdHlwZSwgdCksIG4gJiYgaChlLCBuKSwgZTsgfSBmdW5jdGlvbiBPKGUsIHQsIG4pIHsgcmV0dXJuIHQgaW4gZSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCB0LCB7IHZhbHVlOiBuLCBlbnVtZXJhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCwgd3JpdGFibGU6ICEwIH0pIDogZVt0XSA9IG4sIGU7IH0gdmFyIHcsIFAgPSBvLndpbiwgXyA9IG8uYnJvd3NlciwgeCA9IG8ucmFmLCBTID0gby5ldmVudHM7ICh0LkFjdGlvbk5hbWUgPSB3KSB8fCAodC5BY3Rpb25OYW1lID0gdyA9IHt9KTsgdmFyIGogPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGUoKSB7IHZhciB0ID0gdGhpczsgZyh0aGlzLCBlKSwgTyh0aGlzLCBcImlkXCIsIFwiX19pbnRlcmFjdF9zY29wZV9cIi5jb25jYXQoTWF0aC5mbG9vcigxMDAgKiBNYXRoLnJhbmRvbSgpKSkpLCBPKHRoaXMsIFwibGlzdGVuZXJNYXBzXCIsIFtdKSwgTyh0aGlzLCBcImJyb3dzZXJcIiwgXyksIE8odGhpcywgXCJldmVudHNcIiwgUyksIE8odGhpcywgXCJ1dGlsc1wiLCBvKSwgTyh0aGlzLCBcImRlZmF1bHRzXCIsIG8uY2xvbmUoaS5kZWZhdWx0KSksIE8odGhpcywgXCJFdmVudGFibGVcIiwgYS5kZWZhdWx0KSwgTyh0aGlzLCBcImFjdGlvbnNcIiwgeyBuYW1lczogW10sIG1ldGhvZERpY3Q6IHt9LCBldmVudFR5cGVzOiBbXSB9KSwgTyh0aGlzLCBcIkludGVyYWN0RXZlbnRcIiwgbC5kZWZhdWx0KSwgTyh0aGlzLCBcIkludGVyYWN0YWJsZVwiLCB2b2lkIDApLCBPKHRoaXMsIFwiaW50ZXJhY3RhYmxlc1wiLCBuZXcgcy5kZWZhdWx0KHRoaXMpKSwgTyh0aGlzLCBcIl93aW5cIiwgdm9pZCAwKSwgTyh0aGlzLCBcImRvY3VtZW50XCIsIHZvaWQgMCksIE8odGhpcywgXCJ3aW5kb3dcIiwgdm9pZCAwKSwgTyh0aGlzLCBcImRvY3VtZW50c1wiLCBbXSksIE8odGhpcywgXCJfcGx1Z2luc1wiLCB7IGxpc3Q6IFtdLCBtYXA6IHt9IH0pLCBPKHRoaXMsIFwib25XaW5kb3dVbmxvYWRcIiwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHQucmVtb3ZlRG9jdW1lbnQoZS50YXJnZXQpOyB9KTsgdmFyIHIgPSB0aGlzOyB0aGlzLkludGVyYWN0YWJsZSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gbigpIHsgcmV0dXJuIGcodGhpcywgbiksIGQodGhpcywgeShuKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTsgfSByZXR1cm4gZnVuY3Rpb24gKGUsIHQpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdCAmJiBudWxsICE9PSB0KVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0ICYmIHQucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBlLCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgdCAmJiBtKGUsIHQpOyB9KG4sIHVbXCJkZWZhdWx0XCJdKSwgYihuLCBbeyBrZXk6IFwic2V0XCIsIHZhbHVlOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdih5KG4ucHJvdG90eXBlKSwgXCJzZXRcIiwgdGhpcykuY2FsbCh0aGlzLCBlKSwgci5maXJlKFwiaW50ZXJhY3RhYmxlOnNldFwiLCB7IG9wdGlvbnM6IGUsIGludGVyYWN0YWJsZTogdGhpcyB9KSwgdGhpczsgfSB9LCB7IGtleTogXCJ1bnNldFwiLCB2YWx1ZTogZnVuY3Rpb24gKCkgeyB2KHkobi5wcm90b3R5cGUpLCBcInVuc2V0XCIsIHRoaXMpLmNhbGwodGhpcyk7IGZvciAodmFyIGUgPSByLmludGVyYWN0aW9ucy5saXN0Lmxlbmd0aCAtIDE7IDAgPD0gZTsgZS0tKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLmludGVyYWN0aW9ucy5saXN0W2VdO1xuICAgICAgICAgICAgICAgIHQuaW50ZXJhY3RhYmxlID09PSB0aGlzICYmICh0LnN0b3AoKSwgci5maXJlKFwiaW50ZXJhY3Rpb25zOmRlc3Ryb3lcIiwgeyBpbnRlcmFjdGlvbjogdCB9KSwgdC5kZXN0cm95KCksIDIgPCByLmludGVyYWN0aW9ucy5saXN0Lmxlbmd0aCAmJiByLmludGVyYWN0aW9ucy5saXN0LnNwbGljZShlLCAxKSk7XG4gICAgICAgICAgICB9IHIuZmlyZShcImludGVyYWN0YWJsZTp1bnNldFwiLCB7IGludGVyYWN0YWJsZTogdGhpcyB9KTsgfSB9LCB7IGtleTogXCJfZGVmYXVsdHNcIiwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByLmRlZmF1bHRzOyB9IH1dKSwgbjsgfSgpOyB9IHJldHVybiBiKGUsIFt7IGtleTogXCJhZGRMaXN0ZW5lcnNcIiwgdmFsdWU6IGZ1bmN0aW9uIChlLCB0KSB7IHRoaXMubGlzdGVuZXJNYXBzLnB1c2goeyBpZDogdCwgbWFwOiBlIH0pOyB9IH0sIHsga2V5OiBcImZpcmVcIiwgdmFsdWU6IGZ1bmN0aW9uIChlLCB0KSB7IGZvciAodmFyIG4gPSAwOyBuIDwgdGhpcy5saXN0ZW5lck1hcHMubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMubGlzdGVuZXJNYXBzW25dLm1hcFtlXTtcbiAgICAgICAgICAgICAgICBpZiAociAmJiAhMSA9PT0gcih0LCB0aGlzLCBlKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAgICAgfSB9IH0sIHsga2V5OiBcImluaXRcIiwgdmFsdWU6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBNKHRoaXMsIGUpOyB9IH0sIHsga2V5OiBcInBsdWdpbklzSW5zdGFsbGVkXCIsIHZhbHVlOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcy5fcGx1Z2lucy5tYXBbZS5pZF0gfHwgLTEgIT09IHRoaXMuX3BsdWdpbnMubGlzdC5pbmRleE9mKGUpOyB9IH0sIHsga2V5OiBcInVzZVBsdWdpblwiLCB2YWx1ZTogZnVuY3Rpb24gKGUsIHQpIHsgaWYgKHRoaXMucGx1Z2luSXNJbnN0YWxsZWQoZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7IGlmIChlLmlkICYmICh0aGlzLl9wbHVnaW5zLm1hcFtlLmlkXSA9IGUpLCB0aGlzLl9wbHVnaW5zLmxpc3QucHVzaChlKSwgZS5pbnN0YWxsICYmIGUuaW5zdGFsbCh0aGlzLCB0KSwgZS5saXN0ZW5lcnMgJiYgZS5iZWZvcmUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMCwgciA9IHRoaXMubGlzdGVuZXJNYXBzLmxlbmd0aCwgbyA9IGUuYmVmb3JlLnJlZHVjZShmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gZVt0XSA9ICEwLCBlOyB9LCB7fSk7IG4gPCByOyBuKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9bdGhpcy5saXN0ZW5lck1hcHNbbl0uaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJNYXBzLnNwbGljZShuLCAwLCB7IGlkOiBlLmlkLCBtYXA6IGUubGlzdGVuZXJzIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGUubGlzdGVuZXJzICYmIHRoaXMubGlzdGVuZXJNYXBzLnB1c2goeyBpZDogZS5pZCwgbWFwOiBlLmxpc3RlbmVycyB9KTsgcmV0dXJuIHRoaXM7IH0gfSwgeyBrZXk6IFwiYWRkRG9jdW1lbnRcIiwgdmFsdWU6IGZ1bmN0aW9uIChlLCB0KSB7IGlmICgtMSAhPT0gdGhpcy5nZXREb2NJbmRleChlKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gITE7IHZhciBuID0gUC5nZXRXaW5kb3coZSk7IHQgPSB0ID8gby5leHRlbmQoe30sIHQpIDoge30sIHRoaXMuZG9jdW1lbnRzLnB1c2goeyBkb2M6IGUsIG9wdGlvbnM6IHQgfSksIFMuZG9jdW1lbnRzLnB1c2goZSksIGUgIT09IHRoaXMuZG9jdW1lbnQgJiYgUy5hZGQobiwgXCJ1bmxvYWRcIiwgdGhpcy5vbldpbmRvd1VubG9hZCksIHRoaXMuZmlyZShcInNjb3BlOmFkZC1kb2N1bWVudFwiLCB7IGRvYzogZSwgd2luZG93OiBuLCBzY29wZTogdGhpcywgb3B0aW9uczogdCB9KTsgfSB9LCB7IGtleTogXCJyZW1vdmVEb2N1bWVudFwiLCB2YWx1ZTogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSB0aGlzLmdldERvY0luZGV4KGUpLCBuID0gUC5nZXRXaW5kb3coZSksIHIgPSB0aGlzLmRvY3VtZW50c1t0XS5vcHRpb25zOyBTLnJlbW92ZShuLCBcInVubG9hZFwiLCB0aGlzLm9uV2luZG93VW5sb2FkKSwgdGhpcy5kb2N1bWVudHMuc3BsaWNlKHQsIDEpLCBTLmRvY3VtZW50cy5zcGxpY2UodCwgMSksIHRoaXMuZmlyZShcInNjb3BlOnJlbW92ZS1kb2N1bWVudFwiLCB7IGRvYzogZSwgd2luZG93OiBuLCBzY29wZTogdGhpcywgb3B0aW9uczogciB9KTsgfSB9LCB7IGtleTogXCJnZXREb2NJbmRleFwiLCB2YWx1ZTogZnVuY3Rpb24gKGUpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCB0aGlzLmRvY3VtZW50cy5sZW5ndGg7IHQrKylcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudHNbdF0uZG9jID09PSBlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdDsgcmV0dXJuIC0xOyB9IH0sIHsga2V5OiBcImdldERvY09wdGlvbnNcIiwgdmFsdWU6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gdGhpcy5nZXREb2NJbmRleChlKTsgcmV0dXJuIC0xID09PSB0ID8gbnVsbCA6IHRoaXMuZG9jdW1lbnRzW3RdLm9wdGlvbnM7IH0gfSwgeyBrZXk6IFwibm93XCIsIHZhbHVlOiBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy53aW5kb3cuRGF0ZSB8fCBEYXRlKS5ub3coKTsgfSB9XSksIGU7IH0oKTsgZnVuY3Rpb24gTShlLCB0KSB7IHJldHVybiBQLmluaXQodCksIG4uZGVmYXVsdC5pbml0KHQpLCBfLmluaXQodCksIHguaW5pdCh0KSwgUy5pbml0KHQpLCBlLnVzZVBsdWdpbihyLmRlZmF1bHQpLCBlLmRvY3VtZW50ID0gdC5kb2N1bWVudCwgZS53aW5kb3cgPSB0LCBlOyB9IHQuU2NvcGUgPSBqOyB9KSwgRSA9IGUoZnVuY3Rpb24gKGUsIHQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgdC5kZWZhdWx0ID0gdm9pZCAwOyB2YXIgUCA9IG4oaiksIHUgPSBuKGspLCBmID0gbihEZSksIF8gPSBmdW5jdGlvbiAoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSBsKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IGEoKTsgaWYgKHQgJiYgdC5oYXMoZSkpXG4gICAgICAgIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7fSwgciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBvIGluIGUpXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykpIHtcbiAgICAgICAgICAgIHZhciBpID0gciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBudWxsO1xuICAgICAgICAgICAgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIG8sIGkpIDogbltvXSA9IGVbb107XG4gICAgICAgIH0gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKTsgcmV0dXJuIG47IH0oSiksIHMgPSBuKGcoe30pKSwgbyA9IG4oUW4pOyBPKHt9KTsgZnVuY3Rpb24gYSgpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBhID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZTsgfSwgZTsgfSBmdW5jdGlvbiBuKGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgZGVmYXVsdDogZSB9OyB9IGZ1bmN0aW9uIGwoZSkgeyByZXR1cm4gKGwgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdHlwZW9mIGU7IH0gOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBlLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgZSAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgZTsgfSkoZSk7IH0gZnVuY3Rpb24geChlLCB0KSB7IHJldHVybiBmdW5jdGlvbiAoZSkgeyBpZiAoQXJyYXkuaXNBcnJheShlKSlcbiAgICAgICAgcmV0dXJuIGU7IH0oZSkgfHwgZnVuY3Rpb24gKGUsIHQpIHsgaWYgKCEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChlKSB8fCBcIltvYmplY3QgQXJndW1lbnRzXVwiID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpKVxuICAgICAgICByZXR1cm47IHZhciBuID0gW10sIHIgPSAhMCwgbyA9ICExLCBpID0gdm9pZCAwOyB0cnkge1xuICAgICAgICBmb3IgKHZhciBhLCB1ID0gZVtTeW1ib2wuaXRlcmF0b3JdKCk7ICEociA9IChhID0gdS5uZXh0KCkpLmRvbmUpICYmIChuLnB1c2goYS52YWx1ZSksICF0IHx8IG4ubGVuZ3RoICE9PSB0KTsgciA9ICEwKVxuICAgICAgICAgICAgO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBvID0gITAsIGkgPSBlO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHIgfHwgbnVsbCA9PSB1LnJldHVybiB8fCB1LnJldHVybigpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKG8pXG4gICAgICAgICAgICAgICAgdGhyb3cgaTtcbiAgICAgICAgfVxuICAgIH0gcmV0dXJuIG47IH0oZSwgdCkgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSgpOyB9IGZ1bmN0aW9uIGMoZSwgdCkgeyBmb3IgKHZhciBuID0gMDsgbiA8IHQubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgdmFyIHIgPSB0W25dO1xuICAgICAgICByLmVudW1lcmFibGUgPSByLmVudW1lcmFibGUgfHwgITEsIHIuY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiByICYmIChyLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgci5rZXksIHIpO1xuICAgIH0gfSBmdW5jdGlvbiBwKGUsIHQpIHsgcmV0dXJuICF0IHx8IFwib2JqZWN0XCIgIT09IGwodCkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0ID8gZnVuY3Rpb24gKGUpIHsgaWYgKHZvaWQgMCAhPT0gZSlcbiAgICAgICAgcmV0dXJuIGU7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfShlKSA6IHQ7IH0gZnVuY3Rpb24gZChlKSB7IHJldHVybiAoZCA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7IH0pKGUpOyB9IGZ1bmN0aW9uIHYoZSwgdCkgeyByZXR1cm4gKHYgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIGUuX19wcm90b19fID0gdCwgZTsgfSkoZSwgdCk7IH0gdmFyIHkgPSBbXCJwb2ludGVyRG93blwiLCBcInBvaW50ZXJNb3ZlXCIsIFwicG9pbnRlclVwXCIsIFwidXBkYXRlUG9pbnRlclwiLCBcInJlbW92ZVBvaW50ZXJcIiwgXCJ3aW5kb3dCbHVyXCJdOyBmdW5jdGlvbiBtKE8sIHcpIHsgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gdy5pbnRlcmFjdGlvbnMubGlzdCwgbiA9IF8uZ2V0UG9pbnRlclR5cGUoZSksIHIgPSB4KF8uZ2V0RXZlbnRUYXJnZXRzKGUpLCAyKSwgbyA9IHJbMF0sIGkgPSByWzFdLCBhID0gW107IGlmICgvXnRvdWNoLy50ZXN0KGUudHlwZSkpIHtcbiAgICAgICAgdy5wcmV2VG91Y2hUaW1lID0gdy5ub3coKTtcbiAgICAgICAgZm9yICh2YXIgdSA9IDA7IHUgPCBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgdSsrKSB7XG4gICAgICAgICAgICB2YXIgcyA9IGUuY2hhbmdlZFRvdWNoZXNbdV0sIGwgPSB7IHBvaW50ZXI6IHMsIHBvaW50ZXJJZDogXy5nZXRQb2ludGVySWQocyksIHBvaW50ZXJUeXBlOiBuLCBldmVudFR5cGU6IGUudHlwZSwgZXZlbnRUYXJnZXQ6IG8sIGN1ckV2ZW50VGFyZ2V0OiBpLCBzY29wZTogdyB9LCBjID0gUyhsKTtcbiAgICAgICAgICAgIGEucHVzaChbbC5wb2ludGVyLCBsLmV2ZW50VGFyZ2V0LCBsLmN1ckV2ZW50VGFyZ2V0LCBjXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBmID0gITE7XG4gICAgICAgIGlmICghUC5kZWZhdWx0LnN1cHBvcnRzUG9pbnRlckV2ZW50ICYmIC9tb3VzZS8udGVzdChlLnR5cGUpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IHQubGVuZ3RoICYmICFmOyBwKyspXG4gICAgICAgICAgICAgICAgZiA9IFwibW91c2VcIiAhPT0gdFtwXS5wb2ludGVyVHlwZSAmJiB0W3BdLnBvaW50ZXJJc0Rvd247XG4gICAgICAgICAgICBmID0gZiB8fCB3Lm5vdygpIC0gdy5wcmV2VG91Y2hUaW1lIDwgNTAwIHx8IDAgPT09IGUudGltZVN0YW1wO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZikge1xuICAgICAgICAgICAgdmFyIGQgPSB7IHBvaW50ZXI6IGUsIHBvaW50ZXJJZDogXy5nZXRQb2ludGVySWQoZSksIHBvaW50ZXJUeXBlOiBuLCBldmVudFR5cGU6IGUudHlwZSwgY3VyRXZlbnRUYXJnZXQ6IGksIGV2ZW50VGFyZ2V0OiBvLCBzY29wZTogdyB9LCB2ID0gUyhkKTtcbiAgICAgICAgICAgIGEucHVzaChbZC5wb2ludGVyLCBkLmV2ZW50VGFyZ2V0LCBkLmN1ckV2ZW50VGFyZ2V0LCB2XSk7XG4gICAgICAgIH1cbiAgICB9IGZvciAodmFyIHkgPSAwOyB5IDwgYS5sZW5ndGg7IHkrKykge1xuICAgICAgICB2YXIgbSA9IHgoYVt5XSwgNCksIGcgPSBtWzBdLCBoID0gbVsxXSwgYiA9IG1bMl07XG4gICAgICAgIG1bM11bT10oZywgZSwgaCwgYik7XG4gICAgfSB9OyB9IGZ1bmN0aW9uIFMoZSkgeyB2YXIgdCA9IGUucG9pbnRlclR5cGUsIG4gPSBlLnNjb3BlLCByID0geyBpbnRlcmFjdGlvbjogby5kZWZhdWx0LnNlYXJjaChlKSwgc2VhcmNoRGV0YWlsczogZSB9OyByZXR1cm4gbi5maXJlKFwiaW50ZXJhY3Rpb25zOmZpbmRcIiwgciksIHIuaW50ZXJhY3Rpb24gfHwgbi5pbnRlcmFjdGlvbnMubmV3KHsgcG9pbnRlclR5cGU6IHQgfSk7IH0gZnVuY3Rpb24gcihlLCB0KSB7IHZhciBuID0gZS5kb2MsIHIgPSBlLnNjb3BlLCBvID0gZS5vcHRpb25zLCBpID0gci5pbnRlcmFjdGlvbnMuZG9jRXZlbnRzLCBhID0gZi5kZWZhdWx0W3RdOyBmb3IgKHZhciB1IGluIHIuYnJvd3Nlci5pc0lPUyAmJiAhby5ldmVudHMgJiYgKG8uZXZlbnRzID0geyBwYXNzaXZlOiAhMSB9KSwgZi5kZWZhdWx0LmRlbGVnYXRlZEV2ZW50cylcbiAgICAgICAgYShuLCB1LCBmLmRlZmF1bHQuZGVsZWdhdGVMaXN0ZW5lciksIGEobiwgdSwgZi5kZWZhdWx0LmRlbGVnYXRlVXNlQ2FwdHVyZSwgITApOyBmb3IgKHZhciBzID0gbyAmJiBvLmV2ZW50cywgbCA9IDA7IGwgPCBpLmxlbmd0aDsgbCsrKSB7XG4gICAgICAgIHZhciBjID0gaVtsXTtcbiAgICAgICAgYShuLCBjLnR5cGUsIGMubGlzdGVuZXIsIHMpO1xuICAgIH0gfSB2YXIgaSA9IHsgaWQ6IFwiY29yZS9pbnRlcmFjdGlvbnNcIiwgaW5zdGFsbDogZnVuY3Rpb24gKG8pIHsgZm9yICh2YXIgZSA9IHt9LCB0ID0gMDsgdCA8IHkubGVuZ3RoOyB0KyspIHtcbiAgICAgICAgICAgIHZhciBuID0geVt0XTtcbiAgICAgICAgICAgIGVbbl0gPSBtKG4sIG8pO1xuICAgICAgICB9IHZhciByLCBpID0gUC5kZWZhdWx0LnBFdmVudFR5cGVzOyBmdW5jdGlvbiBhKCkgeyBmb3IgKHZhciBlID0gMDsgZSA8IG8uaW50ZXJhY3Rpb25zLmxpc3QubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICAgIHZhciB0ID0gby5pbnRlcmFjdGlvbnMubGlzdFtlXTtcbiAgICAgICAgICAgIGlmICh0LnBvaW50ZXJJc0Rvd24gJiYgXCJ0b3VjaFwiID09PSB0LnBvaW50ZXJUeXBlICYmICF0Ll9pbnRlcmFjdGluZylcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gZnVuY3Rpb24gKCkgeyB2YXIgbiA9IHQucG9pbnRlcnNbcl07IG8uZG9jdW1lbnRzLnNvbWUoZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLmRvYzsgcmV0dXJuICgwLCBDLm5vZGVDb250YWlucykodCwgbi5kb3duVGFyZ2V0KTsgfSkgfHwgdC5yZW1vdmVQb2ludGVyKG4ucG9pbnRlciwgbi5ldmVudCk7IH0sIHIgPSAwOyByIDwgdC5wb2ludGVycy5sZW5ndGg7IHIrKykge1xuICAgICAgICAgICAgICAgICAgICBuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9IH0gKHIgPSB1LmRlZmF1bHQuUG9pbnRlckV2ZW50ID8gW3sgdHlwZTogaS5kb3duLCBsaXN0ZW5lcjogYSB9LCB7IHR5cGU6IGkuZG93biwgbGlzdGVuZXI6IGUucG9pbnRlckRvd24gfSwgeyB0eXBlOiBpLm1vdmUsIGxpc3RlbmVyOiBlLnBvaW50ZXJNb3ZlIH0sIHsgdHlwZTogaS51cCwgbGlzdGVuZXI6IGUucG9pbnRlclVwIH0sIHsgdHlwZTogaS5jYW5jZWwsIGxpc3RlbmVyOiBlLnBvaW50ZXJVcCB9XSA6IFt7IHR5cGU6IFwibW91c2Vkb3duXCIsIGxpc3RlbmVyOiBlLnBvaW50ZXJEb3duIH0sIHsgdHlwZTogXCJtb3VzZW1vdmVcIiwgbGlzdGVuZXI6IGUucG9pbnRlck1vdmUgfSwgeyB0eXBlOiBcIm1vdXNldXBcIiwgbGlzdGVuZXI6IGUucG9pbnRlclVwIH0sIHsgdHlwZTogXCJ0b3VjaHN0YXJ0XCIsIGxpc3RlbmVyOiBhIH0sIHsgdHlwZTogXCJ0b3VjaHN0YXJ0XCIsIGxpc3RlbmVyOiBlLnBvaW50ZXJEb3duIH0sIHsgdHlwZTogXCJ0b3VjaG1vdmVcIiwgbGlzdGVuZXI6IGUucG9pbnRlck1vdmUgfSwgeyB0eXBlOiBcInRvdWNoZW5kXCIsIGxpc3RlbmVyOiBlLnBvaW50ZXJVcCB9LCB7IHR5cGU6IFwidG91Y2hjYW5jZWxcIiwgbGlzdGVuZXI6IGUucG9pbnRlclVwIH1dKS5wdXNoKHsgdHlwZTogXCJibHVyXCIsIGxpc3RlbmVyOiBmdW5jdGlvbiAoZSkgeyBmb3IgKHZhciB0ID0gMDsgdCA8IG8uaW50ZXJhY3Rpb25zLmxpc3QubGVuZ3RoOyB0KyspIHtcbiAgICAgICAgICAgICAgICBvLmludGVyYWN0aW9ucy5saXN0W3RdLmRvY3VtZW50Qmx1cihlKTtcbiAgICAgICAgICAgIH0gfSB9KSwgby5wcmV2VG91Y2hUaW1lID0gMCwgby5JbnRlcmFjdGlvbiA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZSgpIHsgcmV0dXJuIGZ1bmN0aW9uIChlLCB0KSB7IGlmICghKGUgaW5zdGFuY2VvZiB0KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0odGhpcywgZSksIHAodGhpcywgZChlKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTsgfSB2YXIgdCwgbjsgcmV0dXJuIGZ1bmN0aW9uIChlLCB0KSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHQgJiYgbnVsbCAhPT0gdClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQgJiYgdC5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IGUsIHdyaXRhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCB9IH0pLCB0ICYmIHYoZSwgdCk7IH0oZSwgc1tcImRlZmF1bHRcIl0pLCB0ID0gZSwgKG4gPSBbeyBrZXk6IFwiX25vd1wiLCB2YWx1ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gby5ub3coKTsgfSB9LCB7IGtleTogXCJwb2ludGVyTW92ZVRvbGVyYW5jZVwiLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG8uaW50ZXJhY3Rpb25zLnBvaW50ZXJNb3ZlVG9sZXJhbmNlOyB9LCBzZXQ6IGZ1bmN0aW9uIChlKSB7IG8uaW50ZXJhY3Rpb25zLnBvaW50ZXJNb3ZlVG9sZXJhbmNlID0gZTsgfSB9XSkgJiYgYyh0LnByb3RvdHlwZSwgbiksIGU7IH0oKSwgby5pbnRlcmFjdGlvbnMgPSB7IGxpc3Q6IFtdLCBuZXc6IGZ1bmN0aW9uIChlKSB7IGUuc2NvcGVGaXJlID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIG8uZmlyZShlLCB0KTsgfTsgdmFyIHQgPSBuZXcgby5JbnRlcmFjdGlvbihlKTsgcmV0dXJuIG8uaW50ZXJhY3Rpb25zLmxpc3QucHVzaCh0KSwgdDsgfSwgbGlzdGVuZXJzOiBlLCBkb2NFdmVudHM6IHIsIHBvaW50ZXJNb3ZlVG9sZXJhbmNlOiAxIH07IH0sIGxpc3RlbmVyczogeyBcInNjb3BlOmFkZC1kb2N1bWVudFwiOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gcihlLCBcImFkZFwiKTsgfSwgXCJzY29wZTpyZW1vdmUtZG9jdW1lbnRcIjogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHIoZSwgXCJyZW1vdmVcIik7IH0gfSwgb25Eb2NTaWduYWw6IHIsIGRvT25JbnRlcmFjdGlvbnM6IG0sIG1ldGhvZE5hbWVzOiB5IH07IHQuZGVmYXVsdCA9IGk7IH0pLCBnID0gZShmdW5jdGlvbiAoZSwgdCkgeyBmdW5jdGlvbiBhKGUpIHsgcmV0dXJuIChhID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHR5cGVvZiBlOyB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7IH0pKGUpOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcIlBvaW50ZXJJbmZvXCIsIHsgZW51bWVyYWJsZTogITAsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdS5kZWZhdWx0OyB9IH0pLCB0LmRlZmF1bHQgPSB0LkludGVyYWN0aW9uID0gdC5fUHJveHlNZXRob2RzID0gdC5fUHJveHlWYWx1ZXMgPSB2b2lkIDA7IHZhciBuLCBjLCByLCBmLCBvLCBwID0gbChwdCksIGQgPSBsKFRuKSwgdSA9IChuID0gSG4pICYmIG4uX19lc01vZHVsZSA/IG4gOiB7IGRlZmF1bHQ6IG4gfSwgaSA9IE8oe30pOyBmdW5jdGlvbiBzKCkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKVxuICAgICAgICByZXR1cm4gbnVsbDsgdmFyIGUgPSBuZXcgV2Vha01hcDsgcmV0dXJuIHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlOyB9LCBlOyB9IGZ1bmN0aW9uIGwoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSBhKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IHMoKTsgaWYgKHQgJiYgdC5oYXMoZSkpXG4gICAgICAgIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7fSwgciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBvIGluIGUpXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykpIHtcbiAgICAgICAgICAgIHZhciBpID0gciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBudWxsO1xuICAgICAgICAgICAgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIG8sIGkpIDogbltvXSA9IGVbb107XG4gICAgICAgIH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH0gZnVuY3Rpb24gdihlLCB0KSB7IGZvciAodmFyIG4gPSAwOyBuIDwgdC5sZW5ndGg7IG4rKykge1xuICAgICAgICB2YXIgciA9IHRbbl07XG4gICAgICAgIHIuZW51bWVyYWJsZSA9IHIuZW51bWVyYWJsZSB8fCAhMSwgci5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIHIgJiYgKHIud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLmtleSwgcik7XG4gICAgfSB9IGZ1bmN0aW9uIHkoZSwgdCwgbikgeyByZXR1cm4gdCAmJiB2KGUucHJvdG90eXBlLCB0KSwgbiAmJiB2KGUsIG4pLCBlOyB9IGZ1bmN0aW9uIG0oZSwgdCwgbikgeyByZXR1cm4gdCBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHQsIHsgdmFsdWU6IG4sIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiBlW3RdID0gbiwgZTsgfSB0Ll9Qcm94eVZhbHVlcyA9IGMsIChyID0gYyB8fCAodC5fUHJveHlWYWx1ZXMgPSBjID0ge30pKS5pbnRlcmFjdGFibGUgPSBcIlwiLCByLmVsZW1lbnQgPSBcIlwiLCByLnByZXBhcmVkID0gXCJcIiwgci5wb2ludGVySXNEb3duID0gXCJcIiwgci5wb2ludGVyV2FzTW92ZWQgPSBcIlwiLCByLl9wcm94eSA9IFwiXCIsIHQuX1Byb3h5TWV0aG9kcyA9IGYsIChvID0gZiB8fCAodC5fUHJveHlNZXRob2RzID0gZiA9IHt9KSkuc3RhcnQgPSBcIlwiLCBvLm1vdmUgPSBcIlwiLCBvLmVuZCA9IFwiXCIsIG8uc3RvcCA9IFwiXCIsIG8uaW50ZXJhY3RpbmcgPSBcIlwiOyB2YXIgZyA9IDAsIGggPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGwoZSkgeyB2YXIgdCA9IHRoaXMsIG4gPSBlLnBvaW50ZXJUeXBlLCByID0gZS5zY29wZUZpcmU7ICFmdW5jdGlvbiAoZSwgdCkgeyBpZiAoIShlIGluc3RhbmNlb2YgdCkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0odGhpcywgbCksIG0odGhpcywgXCJpbnRlcmFjdGFibGVcIiwgbnVsbCksIG0odGhpcywgXCJlbGVtZW50XCIsIG51bGwpLCBtKHRoaXMsIFwicmVjdFwiLCB2b2lkIDApLCBtKHRoaXMsIFwiX3JlY3RzXCIsIHZvaWQgMCksIG0odGhpcywgXCJlZGdlc1wiLCB2b2lkIDApLCBtKHRoaXMsIFwiX3Njb3BlRmlyZVwiLCB2b2lkIDApLCBtKHRoaXMsIFwicHJlcGFyZWRcIiwgeyBuYW1lOiBudWxsLCBheGlzOiBudWxsLCBlZGdlczogbnVsbCB9KSwgbSh0aGlzLCBcInBvaW50ZXJUeXBlXCIsIHZvaWQgMCksIG0odGhpcywgXCJwb2ludGVyc1wiLCBbXSksIG0odGhpcywgXCJkb3duRXZlbnRcIiwgbnVsbCksIG0odGhpcywgXCJkb3duUG9pbnRlclwiLCB7fSksIG0odGhpcywgXCJfbGF0ZXN0UG9pbnRlclwiLCB7IHBvaW50ZXI6IG51bGwsIGV2ZW50OiBudWxsLCBldmVudFRhcmdldDogbnVsbCB9KSwgbSh0aGlzLCBcInByZXZFdmVudFwiLCBudWxsKSwgbSh0aGlzLCBcInBvaW50ZXJJc0Rvd25cIiwgITEpLCBtKHRoaXMsIFwicG9pbnRlcldhc01vdmVkXCIsICExKSwgbSh0aGlzLCBcIl9pbnRlcmFjdGluZ1wiLCAhMSksIG0odGhpcywgXCJfZW5kaW5nXCIsICExKSwgbSh0aGlzLCBcIl9zdG9wcGVkXCIsICEwKSwgbSh0aGlzLCBcIl9wcm94eVwiLCBudWxsKSwgbSh0aGlzLCBcInNpbXVsYXRpb25cIiwgbnVsbCksIG0odGhpcywgXCJkb01vdmVcIiwgcC53YXJuT25jZShmdW5jdGlvbiAoZSkgeyB0aGlzLm1vdmUoZSk7IH0sIFwiVGhlIGludGVyYWN0aW9uLmRvTW92ZSgpIG1ldGhvZCBoYXMgYmVlbiByZW5hbWVkIHRvIGludGVyYWN0aW9uLm1vdmUoKVwiKSksIG0odGhpcywgXCJjb29yZHNcIiwgeyBzdGFydDogcC5wb2ludGVyLm5ld0Nvb3JkcygpLCBwcmV2OiBwLnBvaW50ZXIubmV3Q29vcmRzKCksIGN1cjogcC5wb2ludGVyLm5ld0Nvb3JkcygpLCBkZWx0YTogcC5wb2ludGVyLm5ld0Nvb3JkcygpLCB2ZWxvY2l0eTogcC5wb2ludGVyLm5ld0Nvb3JkcygpIH0pLCBtKHRoaXMsIFwiX2lkXCIsIGcrKyksIHRoaXMuX3Njb3BlRmlyZSA9IHIsIHRoaXMucG9pbnRlclR5cGUgPSBuOyB2YXIgbyA9IHRoaXM7IHRoaXMuX3Byb3h5ID0ge307IGZ1bmN0aW9uIGkoZSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5fcHJveHksIGUsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBvW2VdOyB9IH0pOyB9IGZvciAodmFyIGEgaW4gYylcbiAgICAgICAgaShhKTsgZnVuY3Rpb24gdShlKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0Ll9wcm94eSwgZSwgeyB2YWx1ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gb1tlXS5hcHBseShvLCBhcmd1bWVudHMpOyB9IH0pOyB9IGZvciAodmFyIHMgaW4gZilcbiAgICAgICAgdShzKTsgdGhpcy5fc2NvcGVGaXJlKFwiaW50ZXJhY3Rpb25zOm5ld1wiLCB7IGludGVyYWN0aW9uOiB0aGlzIH0pOyB9IHJldHVybiB5KGwsIFt7IGtleTogXCJwb2ludGVyTW92ZVRvbGVyYW5jZVwiLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfV0pLCB5KGwsIFt7IGtleTogXCJwb2ludGVyRG93blwiLCB2YWx1ZTogZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIgPSB0aGlzLnVwZGF0ZVBvaW50ZXIoZSwgdCwgbiwgITApOyB0aGlzLl9zY29wZUZpcmUoXCJpbnRlcmFjdGlvbnM6ZG93blwiLCB7IHBvaW50ZXI6IGUsIGV2ZW50OiB0LCBldmVudFRhcmdldDogbiwgcG9pbnRlckluZGV4OiByLCB0eXBlOiBcImRvd25cIiwgaW50ZXJhY3Rpb246IHRoaXMgfSk7IH0gfSwgeyBrZXk6IFwic3RhcnRcIiwgdmFsdWU6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiAhKHRoaXMuaW50ZXJhY3RpbmcoKSB8fCAhdGhpcy5wb2ludGVySXNEb3duIHx8IHRoaXMucG9pbnRlcnMubGVuZ3RoIDwgKGUubmFtZSA9PT0gaS5BY3Rpb25OYW1lLkdlc3R1cmUgPyAyIDogMSkgfHwgIXQub3B0aW9uc1tlLm5hbWVdLmVuYWJsZWQpICYmIChwLmNvcHlBY3Rpb24odGhpcy5wcmVwYXJlZCwgZSksIHRoaXMuaW50ZXJhY3RhYmxlID0gdCwgdGhpcy5lbGVtZW50ID0gbiwgdGhpcy5yZWN0ID0gdC5nZXRSZWN0KG4pLCB0aGlzLmVkZ2VzID0gcC5leHRlbmQoe30sIHRoaXMucHJlcGFyZWQuZWRnZXMpLCB0aGlzLl9zdG9wcGVkID0gITEsIHRoaXMuX2ludGVyYWN0aW5nID0gdGhpcy5fZG9QaGFzZSh7IGludGVyYWN0aW9uOiB0aGlzLCBldmVudDogdGhpcy5kb3duRXZlbnQsIHBoYXNlOiBkLkV2ZW50UGhhc2UuU3RhcnQgfSkgJiYgIXRoaXMuX3N0b3BwZWQsIHRoaXMuX2ludGVyYWN0aW5nKTsgfSB9LCB7IGtleTogXCJwb2ludGVyTW92ZVwiLCB2YWx1ZTogZnVuY3Rpb24gKGUsIHQsIG4pIHsgdGhpcy5zaW11bGF0aW9uIHx8IHRoaXMubW9kaWZpZXJzICYmIHRoaXMubW9kaWZpZXJzLmVuZFJlc3VsdCB8fCAodGhpcy51cGRhdGVQb2ludGVyKGUsIHQsIG4sICExKSwgcC5wb2ludGVyLnNldENvb3Jkcyh0aGlzLmNvb3Jkcy5jdXIsIHRoaXMucG9pbnRlcnMubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnBvaW50ZXI7IH0pLCB0aGlzLl9ub3coKSkpOyB2YXIgciwgbywgaSA9IHRoaXMuY29vcmRzLmN1ci5wYWdlLnggPT09IHRoaXMuY29vcmRzLnByZXYucGFnZS54ICYmIHRoaXMuY29vcmRzLmN1ci5wYWdlLnkgPT09IHRoaXMuY29vcmRzLnByZXYucGFnZS55ICYmIHRoaXMuY29vcmRzLmN1ci5jbGllbnQueCA9PT0gdGhpcy5jb29yZHMucHJldi5jbGllbnQueCAmJiB0aGlzLmNvb3Jkcy5jdXIuY2xpZW50LnkgPT09IHRoaXMuY29vcmRzLnByZXYuY2xpZW50Lnk7IHRoaXMucG9pbnRlcklzRG93biAmJiAhdGhpcy5wb2ludGVyV2FzTW92ZWQgJiYgKHIgPSB0aGlzLmNvb3Jkcy5jdXIuY2xpZW50LnggLSB0aGlzLmNvb3Jkcy5zdGFydC5jbGllbnQueCwgbyA9IHRoaXMuY29vcmRzLmN1ci5jbGllbnQueSAtIHRoaXMuY29vcmRzLnN0YXJ0LmNsaWVudC55LCB0aGlzLnBvaW50ZXJXYXNNb3ZlZCA9IHAuaHlwb3QociwgbykgPiB0aGlzLnBvaW50ZXJNb3ZlVG9sZXJhbmNlKTsgdmFyIGEgPSB7IHBvaW50ZXI6IGUsIHBvaW50ZXJJbmRleDogdGhpcy5nZXRQb2ludGVySW5kZXgoZSksIGV2ZW50OiB0LCB0eXBlOiBcIm1vdmVcIiwgZXZlbnRUYXJnZXQ6IG4sIGR4OiByLCBkeTogbywgZHVwbGljYXRlOiBpLCBpbnRlcmFjdGlvbjogdGhpcyB9OyBpIHx8IChwLnBvaW50ZXIuc2V0Q29vcmREZWx0YXModGhpcy5jb29yZHMuZGVsdGEsIHRoaXMuY29vcmRzLnByZXYsIHRoaXMuY29vcmRzLmN1ciksIHAucG9pbnRlci5zZXRDb29yZFZlbG9jaXR5KHRoaXMuY29vcmRzLnZlbG9jaXR5LCB0aGlzLmNvb3Jkcy5kZWx0YSkpLCB0aGlzLl9zY29wZUZpcmUoXCJpbnRlcmFjdGlvbnM6bW92ZVwiLCBhKSwgaSB8fCAodGhpcy5pbnRlcmFjdGluZygpICYmIChhLnR5cGUgPSBudWxsLCB0aGlzLm1vdmUoYSkpLCB0aGlzLnBvaW50ZXJXYXNNb3ZlZCAmJiBwLnBvaW50ZXIuY29weUNvb3Jkcyh0aGlzLmNvb3Jkcy5wcmV2LCB0aGlzLmNvb3Jkcy5jdXIpKTsgfSB9LCB7IGtleTogXCJtb3ZlXCIsIHZhbHVlOiBmdW5jdGlvbiAoZSkgeyBlICYmIGUuZXZlbnQgfHwgcC5wb2ludGVyLnNldFplcm9Db29yZHModGhpcy5jb29yZHMuZGVsdGEpLCAoZSA9IHAuZXh0ZW5kKHsgcG9pbnRlcjogdGhpcy5fbGF0ZXN0UG9pbnRlci5wb2ludGVyLCBldmVudDogdGhpcy5fbGF0ZXN0UG9pbnRlci5ldmVudCwgZXZlbnRUYXJnZXQ6IHRoaXMuX2xhdGVzdFBvaW50ZXIuZXZlbnRUYXJnZXQsIGludGVyYWN0aW9uOiB0aGlzIH0sIGUgfHwge30pKS5waGFzZSA9IGQuRXZlbnRQaGFzZS5Nb3ZlLCB0aGlzLl9kb1BoYXNlKGUpOyB9IH0sIHsga2V5OiBcInBvaW50ZXJVcFwiLCB2YWx1ZTogZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgdmFyIG8gPSB0aGlzLmdldFBvaW50ZXJJbmRleChlKTsgLTEgPT09IG8gJiYgKG8gPSB0aGlzLnVwZGF0ZVBvaW50ZXIoZSwgdCwgbiwgITEpKTsgdmFyIGkgPSAvY2FuY2VsJC9pLnRlc3QodC50eXBlKSA/IFwiY2FuY2VsXCIgOiBcInVwXCI7IHRoaXMuX3Njb3BlRmlyZShcImludGVyYWN0aW9uczpcIi5jb25jYXQoaSksIHsgcG9pbnRlcjogZSwgcG9pbnRlckluZGV4OiBvLCBldmVudDogdCwgZXZlbnRUYXJnZXQ6IG4sIHR5cGU6IGksIGN1ckV2ZW50VGFyZ2V0OiByLCBpbnRlcmFjdGlvbjogdGhpcyB9KSwgdGhpcy5zaW11bGF0aW9uIHx8IHRoaXMuZW5kKHQpLCB0aGlzLnBvaW50ZXJJc0Rvd24gPSAhMSwgdGhpcy5yZW1vdmVQb2ludGVyKGUsIHQpOyB9IH0sIHsga2V5OiBcImRvY3VtZW50Qmx1clwiLCB2YWx1ZTogZnVuY3Rpb24gKGUpIHsgdGhpcy5lbmQoZSksIHRoaXMuX3Njb3BlRmlyZShcImludGVyYWN0aW9uczpibHVyXCIsIHsgZXZlbnQ6IGUsIHR5cGU6IFwiYmx1clwiLCBpbnRlcmFjdGlvbjogdGhpcyB9KTsgfSB9LCB7IGtleTogXCJlbmRcIiwgdmFsdWU6IGZ1bmN0aW9uIChlKSB7IHZhciB0OyB0aGlzLl9lbmRpbmcgPSAhMCwgZSA9IGUgfHwgdGhpcy5fbGF0ZXN0UG9pbnRlci5ldmVudCwgdGhpcy5pbnRlcmFjdGluZygpICYmICh0ID0gdGhpcy5fZG9QaGFzZSh7IGV2ZW50OiBlLCBpbnRlcmFjdGlvbjogdGhpcywgcGhhc2U6IGQuRXZlbnRQaGFzZS5FbmQgfSkpLCAhKHRoaXMuX2VuZGluZyA9ICExKSA9PT0gdCAmJiB0aGlzLnN0b3AoKTsgfSB9LCB7IGtleTogXCJjdXJyZW50QWN0aW9uXCIsIHZhbHVlOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9pbnRlcmFjdGluZyA/IHRoaXMucHJlcGFyZWQubmFtZSA6IG51bGw7IH0gfSwgeyBrZXk6IFwiaW50ZXJhY3RpbmdcIiwgdmFsdWU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2ludGVyYWN0aW5nOyB9IH0sIHsga2V5OiBcInN0b3BcIiwgdmFsdWU6IGZ1bmN0aW9uICgpIHsgdGhpcy5fc2NvcGVGaXJlKFwiaW50ZXJhY3Rpb25zOnN0b3BcIiwgeyBpbnRlcmFjdGlvbjogdGhpcyB9KSwgdGhpcy5pbnRlcmFjdGFibGUgPSB0aGlzLmVsZW1lbnQgPSBudWxsLCB0aGlzLl9pbnRlcmFjdGluZyA9ICExLCB0aGlzLl9zdG9wcGVkID0gITAsIHRoaXMucHJlcGFyZWQubmFtZSA9IHRoaXMucHJldkV2ZW50ID0gbnVsbDsgfSB9LCB7IGtleTogXCJnZXRQb2ludGVySW5kZXhcIiwgdmFsdWU6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gcC5wb2ludGVyLmdldFBvaW50ZXJJZChlKTsgcmV0dXJuIFwibW91c2VcIiA9PT0gdGhpcy5wb2ludGVyVHlwZSB8fCBcInBlblwiID09PSB0aGlzLnBvaW50ZXJUeXBlID8gdGhpcy5wb2ludGVycy5sZW5ndGggLSAxIDogcC5hcnIuZmluZEluZGV4KHRoaXMucG9pbnRlcnMsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmlkID09PSB0OyB9KTsgfSB9LCB7IGtleTogXCJnZXRQb2ludGVySW5mb1wiLCB2YWx1ZTogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRoaXMucG9pbnRlcnNbdGhpcy5nZXRQb2ludGVySW5kZXgoZSldOyB9IH0sIHsga2V5OiBcInVwZGF0ZVBvaW50ZXJcIiwgdmFsdWU6IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7IHZhciBvID0gcC5wb2ludGVyLmdldFBvaW50ZXJJZChlKSwgaSA9IHRoaXMuZ2V0UG9pbnRlckluZGV4KGUpLCBhID0gdGhpcy5wb2ludGVyc1tpXTsgcmV0dXJuIHIgPSAhMSAhPT0gciAmJiAociB8fCAvKGRvd258c3RhcnQpJC9pLnRlc3QodC50eXBlKSksIGEgPyBhLnBvaW50ZXIgPSBlIDogKGEgPSBuZXcgdS5kZWZhdWx0KG8sIGUsIHQsIG51bGwsIG51bGwpLCBpID0gdGhpcy5wb2ludGVycy5sZW5ndGgsIHRoaXMucG9pbnRlcnMucHVzaChhKSksIHIgJiYgKHRoaXMucG9pbnRlcklzRG93biA9ICEwLCB0aGlzLmludGVyYWN0aW5nKCkgfHwgKHAucG9pbnRlci5zZXRDb29yZHModGhpcy5jb29yZHMuc3RhcnQsIHRoaXMucG9pbnRlcnMubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnBvaW50ZXI7IH0pLCB0aGlzLl9ub3coKSksIHAucG9pbnRlci5jb3B5Q29vcmRzKHRoaXMuY29vcmRzLmN1ciwgdGhpcy5jb29yZHMuc3RhcnQpLCBwLnBvaW50ZXIuY29weUNvb3Jkcyh0aGlzLmNvb3Jkcy5wcmV2LCB0aGlzLmNvb3Jkcy5zdGFydCksIHAucG9pbnRlci5wb2ludGVyRXh0ZW5kKHRoaXMuZG93blBvaW50ZXIsIGUpLCB0aGlzLmRvd25FdmVudCA9IHQsIGEuZG93blRpbWUgPSB0aGlzLmNvb3Jkcy5jdXIudGltZVN0YW1wLCBhLmRvd25UYXJnZXQgPSBuLCB0aGlzLnBvaW50ZXJXYXNNb3ZlZCA9ICExKSksIHRoaXMuX3VwZGF0ZUxhdGVzdFBvaW50ZXIoZSwgdCwgbiksIHRoaXMuX3Njb3BlRmlyZShcImludGVyYWN0aW9uczp1cGRhdGUtcG9pbnRlclwiLCB7IHBvaW50ZXI6IGUsIGV2ZW50OiB0LCBldmVudFRhcmdldDogbiwgZG93bjogciwgcG9pbnRlckluZm86IGEsIHBvaW50ZXJJbmRleDogaSwgaW50ZXJhY3Rpb246IHRoaXMgfSksIGk7IH0gfSwgeyBrZXk6IFwicmVtb3ZlUG9pbnRlclwiLCB2YWx1ZTogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSB0aGlzLmdldFBvaW50ZXJJbmRleChlKTsgaWYgKC0xICE9PSBuKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnBvaW50ZXJzW25dO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Njb3BlRmlyZShcImludGVyYWN0aW9uczpyZW1vdmUtcG9pbnRlclwiLCB7IHBvaW50ZXI6IGUsIGV2ZW50OiB0LCBldmVudFRhcmdldDogbnVsbCwgcG9pbnRlckluZGV4OiBuLCBwb2ludGVySW5mbzogciwgaW50ZXJhY3Rpb246IHRoaXMgfSksIHRoaXMucG9pbnRlcnMuc3BsaWNlKG4sIDEpO1xuICAgICAgICAgICAgfSB9IH0sIHsga2V5OiBcIl91cGRhdGVMYXRlc3RQb2ludGVyXCIsIHZhbHVlOiBmdW5jdGlvbiAoZSwgdCwgbikgeyB0aGlzLl9sYXRlc3RQb2ludGVyLnBvaW50ZXIgPSBlLCB0aGlzLl9sYXRlc3RQb2ludGVyLmV2ZW50ID0gdCwgdGhpcy5fbGF0ZXN0UG9pbnRlci5ldmVudFRhcmdldCA9IG47IH0gfSwgeyBrZXk6IFwiZGVzdHJveVwiLCB2YWx1ZTogZnVuY3Rpb24gKCkgeyB0aGlzLl9sYXRlc3RQb2ludGVyLnBvaW50ZXIgPSBudWxsLCB0aGlzLl9sYXRlc3RQb2ludGVyLmV2ZW50ID0gbnVsbCwgdGhpcy5fbGF0ZXN0UG9pbnRlci5ldmVudFRhcmdldCA9IG51bGw7IH0gfSwgeyBrZXk6IFwiX2NyZWF0ZVByZXBhcmVkRXZlbnRcIiwgdmFsdWU6IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7IHZhciBvID0gdGhpcy5wcmVwYXJlZC5uYW1lOyByZXR1cm4gbmV3IGQuZGVmYXVsdCh0aGlzLCBlLCBvLCB0LCB0aGlzLmVsZW1lbnQsIG51bGwsIG4sIHIpOyB9IH0sIHsga2V5OiBcIl9maXJlRXZlbnRcIiwgdmFsdWU6IGZ1bmN0aW9uIChlKSB7IHRoaXMuaW50ZXJhY3RhYmxlLmZpcmUoZSksICghdGhpcy5wcmV2RXZlbnQgfHwgZS50aW1lU3RhbXAgPj0gdGhpcy5wcmV2RXZlbnQudGltZVN0YW1wKSAmJiAodGhpcy5wcmV2RXZlbnQgPSBlKTsgfSB9LCB7IGtleTogXCJfZG9QaGFzZVwiLCB2YWx1ZTogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLmV2ZW50LCBuID0gZS5waGFzZSwgciA9IGUucHJlRW5kLCBvID0gZS50eXBlLCBpID0gdGhpcy5yZWN0LCBhID0gdGhpcy5jb29yZHMuZGVsdGE7IGlmIChpICYmIG4gPT09IGQuRXZlbnRQaGFzZS5Nb3ZlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHUgPSB0aGlzLmVkZ2VzIHx8IHRoaXMucHJlcGFyZWQuZWRnZXMgfHwgeyBsZWZ0OiAhMCwgcmlnaHQ6ICEwLCB0b3A6ICEwLCBib3R0b206ICEwIH07XG4gICAgICAgICAgICAgICAgcC5yZWN0LmFkZEVkZ2VzKHUsIGksIGFbdGhpcy5pbnRlcmFjdGFibGUub3B0aW9ucy5kZWx0YVNvdXJjZV0pLCBpLndpZHRoID0gaS5yaWdodCAtIGkubGVmdCwgaS5oZWlnaHQgPSBpLmJvdHRvbSAtIGkudG9wO1xuICAgICAgICAgICAgfSBpZiAoITEgPT09IHRoaXMuX3Njb3BlRmlyZShcImludGVyYWN0aW9uczpiZWZvcmUtYWN0aW9uLVwiLmNvbmNhdChuKSwgZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuICExOyB2YXIgcyA9IGUuaUV2ZW50ID0gdGhpcy5fY3JlYXRlUHJlcGFyZWRFdmVudCh0LCBuLCByLCBvKTsgcmV0dXJuIHRoaXMuX3Njb3BlRmlyZShcImludGVyYWN0aW9uczphY3Rpb24tXCIuY29uY2F0KG4pLCBlKSwgXCJzdGFydFwiID09PSBuICYmICh0aGlzLnByZXZFdmVudCA9IHMpLCB0aGlzLl9maXJlRXZlbnQocyksIHRoaXMuX3Njb3BlRmlyZShcImludGVyYWN0aW9uczphZnRlci1hY3Rpb24tXCIuY29uY2F0KG4pLCBlKSwgITA7IH0gfSwgeyBrZXk6IFwiX25vd1wiLCB2YWx1ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gRGF0ZS5ub3coKTsgfSB9XSksIGw7IH0oKSwgYiA9IHQuSW50ZXJhY3Rpb24gPSBoOyB0LmRlZmF1bHQgPSBiOyB9KSwgayA9IHt9OyBPYmplY3QuZGVmaW5lUHJvcGVydHkoaywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBrLmRlZmF1bHQgPSB2b2lkIDA7IHZhciBuID0geyBpbml0OiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGU7IG4uZG9jdW1lbnQgPSB0LmRvY3VtZW50LCBuLkRvY3VtZW50RnJhZ21lbnQgPSB0LkRvY3VtZW50RnJhZ21lbnQgfHwgciwgbi5TVkdFbGVtZW50ID0gdC5TVkdFbGVtZW50IHx8IHIsIG4uU1ZHU1ZHRWxlbWVudCA9IHQuU1ZHU1ZHRWxlbWVudCB8fCByLCBuLlNWR0VsZW1lbnRJbnN0YW5jZSA9IHQuU1ZHRWxlbWVudEluc3RhbmNlIHx8IHIsIG4uRWxlbWVudCA9IHQuRWxlbWVudCB8fCByLCBuLkhUTUxFbGVtZW50ID0gdC5IVE1MRWxlbWVudCB8fCBuLkVsZW1lbnQsIG4uRXZlbnQgPSB0LkV2ZW50LCBuLlRvdWNoID0gdC5Ub3VjaCB8fCByLCBuLlBvaW50ZXJFdmVudCA9IHQuUG9pbnRlckV2ZW50IHx8IHQuTVNQb2ludGVyRXZlbnQ7IH0sIGRvY3VtZW50OiBudWxsLCBEb2N1bWVudEZyYWdtZW50OiBudWxsLCBTVkdFbGVtZW50OiBudWxsLCBTVkdTVkdFbGVtZW50OiBudWxsLCBTVkdFbGVtZW50SW5zdGFuY2U6IG51bGwsIEVsZW1lbnQ6IG51bGwsIEhUTUxFbGVtZW50OiBudWxsLCBFdmVudDogbnVsbCwgVG91Y2g6IG51bGwsIFBvaW50ZXJFdmVudDogbnVsbCB9OyBmdW5jdGlvbiByKCkgeyB9IHZhciB0ID0gbjsgay5kZWZhdWx0ID0gdDsgdmFyIHUgPSB7fTsgZnVuY3Rpb24gbyhlLCB0KSB7IGZvciAodmFyIG4gPSAwOyBuIDwgdC5sZW5ndGg7IG4rKykge1xuICAgICAgICB2YXIgciA9IHRbbl07XG4gICAgICAgIGUucHVzaChyKTtcbiAgICB9IHJldHVybiBlOyB9IGZ1bmN0aW9uIGkoZSwgdCkgeyBmb3IgKHZhciBuID0gMDsgbiA8IGUubGVuZ3RoOyBuKyspXG4gICAgICAgIGlmICh0KGVbbl0sIG4sIGUpKVxuICAgICAgICAgICAgcmV0dXJuIG47IHJldHVybiAtMTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkodSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCB1LmNvbnRhaW5zID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIC0xICE9PSBlLmluZGV4T2YodCk7IH0sIHUucmVtb3ZlID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIGUuc3BsaWNlKGUuaW5kZXhPZih0KSwgMSk7IH0sIHUubWVyZ2UgPSBvLCB1LmZyb20gPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gbyhbXSwgZSk7IH0sIHUuZmluZEluZGV4ID0gaSwgdS5maW5kID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIGVbaShlLCB0KV07IH07IHZhciBhID0ge307IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIGEuZGVmYXVsdCA9IHZvaWQgMDsgYS5kZWZhdWx0ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuICEoIWUgfHwgIWUuV2luZG93KSAmJiBlIGluc3RhbmNlb2YgZS5XaW5kb3c7IH07IHZhciBzID0ge307IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIHMuaW5pdCA9IHAsIHMuZ2V0V2luZG93ID0gZCwgcy5kZWZhdWx0ID0gdm9pZCAwOyB2YXIgbCwgYyA9IChsID0gYSkgJiYgbC5fX2VzTW9kdWxlID8gbCA6IHsgZGVmYXVsdDogbCB9OyB2YXIgZiA9IHsgcmVhbFdpbmRvdzogdm9pZCAwLCB3aW5kb3c6IHZvaWQgMCwgZ2V0V2luZG93OiBkLCBpbml0OiBwIH07IGZ1bmN0aW9uIHAoZSkgeyB2YXIgdCA9IChmLnJlYWxXaW5kb3cgPSBlKS5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTsgdC5vd25lckRvY3VtZW50ICE9PSBlLmRvY3VtZW50ICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZS53cmFwICYmIGUud3JhcCh0KSA9PT0gdCAmJiAoZSA9IGUud3JhcChlKSksIGYud2luZG93ID0gZTsgfSBmdW5jdGlvbiBkKGUpIHsgcmV0dXJuICgwLCBjLmRlZmF1bHQpKGUpID8gZSA6IChlLm93bmVyRG9jdW1lbnQgfHwgZSkuZGVmYXVsdFZpZXcgfHwgZi53aW5kb3c7IH0gXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2Ygd2luZG93ID8gKGYud2luZG93ID0gdm9pZCAwLCBmLnJlYWxXaW5kb3cgPSB2b2lkIDApIDogcCh3aW5kb3cpLCBmLmluaXQgPSBwOyB2YXIgdiA9IGY7IHMuZGVmYXVsdCA9IHY7IHZhciB5ID0ge307IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh5LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIHkuYXJyYXkgPSB5LnBsYWluT2JqZWN0ID0geS5lbGVtZW50ID0geS5zdHJpbmcgPSB5LmJvb2wgPSB5Lm51bWJlciA9IHkuZnVuYyA9IHkub2JqZWN0ID0geS5kb2NGcmFnID0geS53aW5kb3cgPSB2b2lkIDA7IHZhciBtID0gYihhKSwgaCA9IGIocyk7IGZ1bmN0aW9uIGIoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBkZWZhdWx0OiBlIH07IH0gZnVuY3Rpb24gdyhlKSB7IHJldHVybiAodyA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSB5LndpbmRvdyA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlID09PSBoLmRlZmF1bHQud2luZG93IHx8ICgwLCBtLmRlZmF1bHQpKGUpOyB9OyB5LmRvY0ZyYWcgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gUChlKSAmJiAxMSA9PT0gZS5ub2RlVHlwZTsgfTsgdmFyIFAgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gISFlICYmIFwib2JqZWN0XCIgPT09IHcoZSk7IH07IHkub2JqZWN0ID0gUDsgZnVuY3Rpb24gXyhlKSB7IHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGU7IH0geS5mdW5jID0gXzsgeS5udW1iZXIgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gXCJudW1iZXJcIiA9PSB0eXBlb2YgZTsgfTsgeS5ib29sID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFwiYm9vbGVhblwiID09IHR5cGVvZiBlOyB9OyB5LnN0cmluZyA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiBlOyB9OyB5LmVsZW1lbnQgPSBmdW5jdGlvbiAoZSkgeyBpZiAoIWUgfHwgXCJvYmplY3RcIiAhPT0gdyhlKSlcbiAgICAgICAgcmV0dXJuICExOyB2YXIgdCA9IGguZGVmYXVsdC5nZXRXaW5kb3coZSkgfHwgaC5kZWZhdWx0LndpbmRvdzsgcmV0dXJuIC9vYmplY3R8ZnVuY3Rpb24vLnRlc3Qodyh0LkVsZW1lbnQpKSA/IGUgaW5zdGFuY2VvZiB0LkVsZW1lbnQgOiAxID09PSBlLm5vZGVUeXBlICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUubm9kZU5hbWU7IH07IHkucGxhaW5PYmplY3QgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gUChlKSAmJiAhIWUuY29uc3RydWN0b3IgJiYgL2Z1bmN0aW9uIE9iamVjdFxcYi8udGVzdChlLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkpOyB9OyB5LmFycmF5ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFAoZSkgJiYgdm9pZCAwICE9PSBlLmxlbmd0aCAmJiBfKGUuc3BsaWNlKTsgfTsgdmFyIGogPSB7fTsgZnVuY3Rpb24geChlKSB7IHJldHVybiAoeCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoaiwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBqLmRlZmF1bHQgPSB2b2lkIDA7IHZhciBTID0gSShrKSwgTSA9IGZ1bmN0aW9uIChlKSB7IGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICAgICAgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT09IHgoZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKVxuICAgICAgICByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gVCgpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pOyByZXR1cm4gbjsgfSh5KSwgRCA9IEkocyk7IGZ1bmN0aW9uIFQoKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgZSA9IG5ldyBXZWFrTWFwOyByZXR1cm4gVCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24gSShlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IGRlZmF1bHQ6IGUgfTsgfSB2YXIgQSA9IHsgaW5pdDogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBTLmRlZmF1bHQuRWxlbWVudCwgbiA9IEQuZGVmYXVsdC53aW5kb3cubmF2aWdhdG9yOyBBLnN1cHBvcnRzVG91Y2ggPSBcIm9udG91Y2hzdGFydFwiIGluIGUgfHwgTS5mdW5jKGUuRG9jdW1lbnRUb3VjaCkgJiYgUy5kZWZhdWx0LmRvY3VtZW50IGluc3RhbmNlb2YgZS5Eb2N1bWVudFRvdWNoLCBBLnN1cHBvcnRzUG9pbnRlckV2ZW50ID0gITEgIT09IG4ucG9pbnRlckVuYWJsZWQgJiYgISFTLmRlZmF1bHQuUG9pbnRlckV2ZW50LCBBLmlzSU9TID0gL2lQKGhvbmV8b2R8YWQpLy50ZXN0KG4ucGxhdGZvcm0pLCBBLmlzSU9TNyA9IC9pUChob25lfG9kfGFkKS8udGVzdChuLnBsYXRmb3JtKSAmJiAvT1MgN1teXFxkXS8udGVzdChuLmFwcFZlcnNpb24pLCBBLmlzSWU5ID0gL01TSUUgOS8udGVzdChuLnVzZXJBZ2VudCksIEEuaXNPcGVyYU1vYmlsZSA9IFwiT3BlcmFcIiA9PT0gbi5hcHBOYW1lICYmIEEuc3VwcG9ydHNUb3VjaCAmJiAvUHJlc3RvLy50ZXN0KG4udXNlckFnZW50KSwgQS5wcmVmaXhlZE1hdGNoZXNTZWxlY3RvciA9IFwibWF0Y2hlc1wiIGluIHQucHJvdG90eXBlID8gXCJtYXRjaGVzXCIgOiBcIndlYmtpdE1hdGNoZXNTZWxlY3RvclwiIGluIHQucHJvdG90eXBlID8gXCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3JcIiA6IFwibW96TWF0Y2hlc1NlbGVjdG9yXCIgaW4gdC5wcm90b3R5cGUgPyBcIm1vek1hdGNoZXNTZWxlY3RvclwiIDogXCJvTWF0Y2hlc1NlbGVjdG9yXCIgaW4gdC5wcm90b3R5cGUgPyBcIm9NYXRjaGVzU2VsZWN0b3JcIiA6IFwibXNNYXRjaGVzU2VsZWN0b3JcIiwgQS5wRXZlbnRUeXBlcyA9IEEuc3VwcG9ydHNQb2ludGVyRXZlbnQgPyBTLmRlZmF1bHQuUG9pbnRlckV2ZW50ID09PSBlLk1TUG9pbnRlckV2ZW50ID8geyB1cDogXCJNU1BvaW50ZXJVcFwiLCBkb3duOiBcIk1TUG9pbnRlckRvd25cIiwgb3ZlcjogXCJtb3VzZW92ZXJcIiwgb3V0OiBcIm1vdXNlb3V0XCIsIG1vdmU6IFwiTVNQb2ludGVyTW92ZVwiLCBjYW5jZWw6IFwiTVNQb2ludGVyQ2FuY2VsXCIgfSA6IHsgdXA6IFwicG9pbnRlcnVwXCIsIGRvd246IFwicG9pbnRlcmRvd25cIiwgb3ZlcjogXCJwb2ludGVyb3ZlclwiLCBvdXQ6IFwicG9pbnRlcm91dFwiLCBtb3ZlOiBcInBvaW50ZXJtb3ZlXCIsIGNhbmNlbDogXCJwb2ludGVyY2FuY2VsXCIgfSA6IG51bGwsIEEud2hlZWxFdmVudCA9IFwib25tb3VzZXdoZWVsXCIgaW4gUy5kZWZhdWx0LmRvY3VtZW50ID8gXCJtb3VzZXdoZWVsXCIgOiBcIndoZWVsXCI7IH0sIHN1cHBvcnRzVG91Y2g6IG51bGwsIHN1cHBvcnRzUG9pbnRlckV2ZW50OiBudWxsLCBpc0lPUzc6IG51bGwsIGlzSU9TOiBudWxsLCBpc0llOTogbnVsbCwgaXNPcGVyYU1vYmlsZTogbnVsbCwgcHJlZml4ZWRNYXRjaGVzU2VsZWN0b3I6IG51bGwsIHBFdmVudFR5cGVzOiBudWxsLCB3aGVlbEV2ZW50OiBudWxsIH07IHZhciB6ID0gQTsgai5kZWZhdWx0ID0gejsgdmFyIEMgPSB7fTsgZnVuY3Rpb24gUihlKSB7IHJldHVybiAoUiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoQywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBDLm5vZGVDb250YWlucyA9IGZ1bmN0aW9uIChlLCB0KSB7IGZvciAoOyB0Oykge1xuICAgICAgICBpZiAodCA9PT0gZSlcbiAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgdCA9IHQucGFyZW50Tm9kZTtcbiAgICB9IHJldHVybiAhMTsgfSwgQy5jbG9zZXN0ID0gZnVuY3Rpb24gKGUsIHQpIHsgZm9yICg7IE4uZWxlbWVudChlKTspIHtcbiAgICAgICAgaWYgKEcoZSwgdCkpXG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgZSA9IFYoZSk7XG4gICAgfSByZXR1cm4gbnVsbDsgfSwgQy5wYXJlbnROb2RlID0gViwgQy5tYXRjaGVzU2VsZWN0b3IgPSBHLCBDLmluZGV4T2ZEZWVwZXN0RWxlbWVudCA9IGZ1bmN0aW9uIChlKSB7IHZhciB0LCBuLCByID0gW10sIG8gPSBlWzBdLCBpID0gbyA/IDAgOiAtMTsgZm9yICh0ID0gMTsgdCA8IGUubGVuZ3RoOyB0KyspIHtcbiAgICAgICAgdmFyIGEgPSBlW3RdO1xuICAgICAgICBpZiAoYSAmJiBhICE9PSBvKVxuICAgICAgICAgICAgaWYgKG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoYS5wYXJlbnROb2RlICE9PSBhLm93bmVyRG9jdW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLnBhcmVudE5vZGUgIT09IGEub3duZXJEb2N1bWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhLnBhcmVudE5vZGUgIT09IG8ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghci5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHUgPSBvLCBzID0gdm9pZCAwOyAocyA9IFUodSkpICYmIHMgIT09IHUub3duZXJEb2N1bWVudDspXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnVuc2hpZnQodSksIHUgPSBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvIGluc3RhbmNlb2YgWC5kZWZhdWx0LkhUTUxFbGVtZW50ICYmIGEgaW5zdGFuY2VvZiBYLmRlZmF1bHQuU1ZHRWxlbWVudCAmJiAhKGEgaW5zdGFuY2VvZiBYLmRlZmF1bHQuU1ZHU1ZHRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgPT09IG8ucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gYS5vd25lclNWR0VsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IFtdOyBsLnBhcmVudE5vZGUgIT09IGwub3duZXJEb2N1bWVudDspXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMudW5zaGlmdChsKSwgbCA9IFUobCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChuID0gMDsgY1tuXSAmJiBjW25dID09PSByW25dOylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGYgPSBbY1tuIC0gMV0sIGNbbl0sIHJbbl1dLCBwID0gZlswXS5sYXN0Q2hpbGQ7IHA7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwID09PSBmWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gYSwgaSA9IHQsIHIgPSBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAgPT09IGZbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHAucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gcGFyc2VJbnQoKDAsIFkuZ2V0V2luZG93KShvKS5nZXRDb21wdXRlZFN0eWxlKG8pLnpJbmRleCwgMTApIHx8IDAsIHYgPSBwYXJzZUludCgoMCwgWS5nZXRXaW5kb3cpKGEpLmdldENvbXB1dGVkU3R5bGUoYSkuekluZGV4LCAxMCkgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkIDw9IHYgJiYgKG8gPSBhLCBpID0gdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBhLCBpID0gdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvID0gYSwgaSA9IHQ7XG4gICAgfSByZXR1cm4gaTsgfSwgQy5tYXRjaGVzVXBUbyA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IGZvciAoOyBOLmVsZW1lbnQoZSk7KSB7XG4gICAgICAgIGlmIChHKGUsIHQpKVxuICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICBpZiAoKGUgPSBWKGUpKSA9PT0gbilcbiAgICAgICAgICAgIHJldHVybiBHKGUsIHQpO1xuICAgIH0gcmV0dXJuICExOyB9LCBDLmdldEFjdHVhbEVsZW1lbnQgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSBpbnN0YW5jZW9mIFguZGVmYXVsdC5TVkdFbGVtZW50SW5zdGFuY2UgPyBlLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IDogZTsgfSwgQy5nZXRTY3JvbGxYWSA9IEIsIEMuZ2V0RWxlbWVudENsaWVudFJlY3QgPSBILCBDLmdldEVsZW1lbnRSZWN0ID0gZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBIKGUpOyBpZiAoIVcuZGVmYXVsdC5pc0lPUzcgJiYgdCkge1xuICAgICAgICB2YXIgbiA9IEIoWS5kZWZhdWx0LmdldFdpbmRvdyhlKSk7XG4gICAgICAgIHQubGVmdCArPSBuLngsIHQucmlnaHQgKz0gbi54LCB0LnRvcCArPSBuLnksIHQuYm90dG9tICs9IG4ueTtcbiAgICB9IHJldHVybiB0OyB9LCBDLmdldFBhdGggPSBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IFtdOyBmb3IgKDsgZTspXG4gICAgICAgIHQucHVzaChlKSwgZSA9IFYoZSk7IHJldHVybiB0OyB9LCBDLnRyeVNlbGVjdG9yID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuICEhTi5zdHJpbmcoZSkgJiYgKFguZGVmYXVsdC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpLCAhMCk7IH07IHZhciBXID0gcShqKSwgWCA9IHEoayksIE4gPSBMKHkpLCBZID0gTChzKTsgZnVuY3Rpb24gRigpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBGID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZTsgfSwgZTsgfSBmdW5jdGlvbiBMKGUpIHsgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKVxuICAgICAgICByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPT0gUihlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBGKCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IHJldHVybiBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pLCBuOyB9IGZ1bmN0aW9uIHEoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBkZWZhdWx0OiBlIH07IH0gZnVuY3Rpb24gVihlKSB7IHZhciB0ID0gZS5wYXJlbnROb2RlOyBpZiAoTi5kb2NGcmFnKHQpKSB7XG4gICAgICAgIGZvciAoOyAodCA9IHQuaG9zdCkgJiYgTi5kb2NGcmFnKHQpOylcbiAgICAgICAgICAgIDtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfSByZXR1cm4gdDsgfSBmdW5jdGlvbiBHKGUsIHQpIHsgcmV0dXJuIFkuZGVmYXVsdC53aW5kb3cgIT09IFkuZGVmYXVsdC5yZWFsV2luZG93ICYmICh0ID0gdC5yZXBsYWNlKC9cXC9kZWVwXFwvL2csIFwiIFwiKSksIGVbVy5kZWZhdWx0LnByZWZpeGVkTWF0Y2hlc1NlbGVjdG9yXSh0KTsgfSB2YXIgVSA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnBhcmVudE5vZGUgPyBlLnBhcmVudE5vZGUgOiBlLmhvc3Q7IH07IGZ1bmN0aW9uIEIoZSkgeyByZXR1cm4geyB4OiAoZSA9IGUgfHwgWS5kZWZhdWx0LndpbmRvdykuc2Nyb2xsWCB8fCBlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LCB5OiBlLnNjcm9sbFkgfHwgZS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIH07IH0gZnVuY3Rpb24gSChlKSB7IHZhciB0ID0gZSBpbnN0YW5jZW9mIFguZGVmYXVsdC5TVkdFbGVtZW50ID8gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IGUuZ2V0Q2xpZW50UmVjdHMoKVswXTsgcmV0dXJuIHQgJiYgeyBsZWZ0OiB0LmxlZnQsIHJpZ2h0OiB0LnJpZ2h0LCB0b3A6IHQudG9wLCBib3R0b206IHQuYm90dG9tLCB3aWR0aDogdC53aWR0aCB8fCB0LnJpZ2h0IC0gdC5sZWZ0LCBoZWlnaHQ6IHQuaGVpZ2h0IHx8IHQuYm90dG9tIC0gdC50b3AgfTsgfSB2YXIgSyA9IHt9OyBPYmplY3QuZGVmaW5lUHJvcGVydHkoSywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBLLmRlZmF1bHQgPSB2b2lkIDA7IEsuZGVmYXVsdCA9IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBNYXRoLnNxcnQoZSAqIGUgKyB0ICogdCk7IH07IHZhciAkID0ge307IGZ1bmN0aW9uIFEoZSwgdCkgeyBmb3IgKHZhciBuIGluIHQpIHtcbiAgICAgICAgdmFyIHIgPSBRLnByZWZpeGVkUHJvcFJFcywgbyA9ICExO1xuICAgICAgICBmb3IgKHZhciBpIGluIHIpXG4gICAgICAgICAgICBpZiAoMCA9PT0gbi5pbmRleE9mKGkpICYmIHJbaV0udGVzdChuKSkge1xuICAgICAgICAgICAgICAgIG8gPSAhMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgbyB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHRbbl0gfHwgKGVbbl0gPSB0W25dKTtcbiAgICB9IHJldHVybiBlOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSgkLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksICQuZGVmYXVsdCA9IHZvaWQgMCwgUS5wcmVmaXhlZFByb3BSRXMgPSB7IHdlYmtpdDogLyhNb3ZlbWVudFtYWV18UmFkaXVzW1hZXXxSb3RhdGlvbkFuZ2xlfEZvcmNlKSQvLCBtb3o6IC8oUHJlc3N1cmUpJC8gfTsgdmFyIFogPSBROyAkLmRlZmF1bHQgPSBaOyB2YXIgSiA9IHt9OyBmdW5jdGlvbiBlZShlKSB7IHJldHVybiAoZWUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdHlwZW9mIGU7IH0gOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBlLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgZSAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgZTsgfSkoZSk7IH0gT2JqZWN0LmRlZmluZVByb3BlcnR5KEosIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgSi5jb3B5Q29vcmRzID0gZnVuY3Rpb24gKGUsIHQpIHsgZS5wYWdlID0gZS5wYWdlIHx8IHt9LCBlLnBhZ2UueCA9IHQucGFnZS54LCBlLnBhZ2UueSA9IHQucGFnZS55LCBlLmNsaWVudCA9IGUuY2xpZW50IHx8IHt9LCBlLmNsaWVudC54ID0gdC5jbGllbnQueCwgZS5jbGllbnQueSA9IHQuY2xpZW50LnksIGUudGltZVN0YW1wID0gdC50aW1lU3RhbXA7IH0sIEouc2V0Q29vcmREZWx0YXMgPSBmdW5jdGlvbiAoZSwgdCwgbikgeyBlLnBhZ2UueCA9IG4ucGFnZS54IC0gdC5wYWdlLngsIGUucGFnZS55ID0gbi5wYWdlLnkgLSB0LnBhZ2UueSwgZS5jbGllbnQueCA9IG4uY2xpZW50LnggLSB0LmNsaWVudC54LCBlLmNsaWVudC55ID0gbi5jbGllbnQueSAtIHQuY2xpZW50LnksIGUudGltZVN0YW1wID0gbi50aW1lU3RhbXAgLSB0LnRpbWVTdGFtcDsgfSwgSi5zZXRDb29yZFZlbG9jaXR5ID0gZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSBNYXRoLm1heCh0LnRpbWVTdGFtcCAvIDFlMywgLjAwMSk7IGUucGFnZS54ID0gdC5wYWdlLnggLyBuLCBlLnBhZ2UueSA9IHQucGFnZS55IC8gbiwgZS5jbGllbnQueCA9IHQuY2xpZW50LnggLyBuLCBlLmNsaWVudC55ID0gdC5jbGllbnQueSAvIG4sIGUudGltZVN0YW1wID0gbjsgfSwgSi5zZXRaZXJvQ29vcmRzID0gZnVuY3Rpb24gKGUpIHsgZS5wYWdlLnggPSAwLCBlLnBhZ2UueSA9IDAsIGUuY2xpZW50LnggPSAwLCBlLmNsaWVudC55ID0gMDsgfSwgSi5pc05hdGl2ZVBvaW50ZXIgPSBjZSwgSi5nZXRYWSA9IGZlLCBKLmdldFBhZ2VYWSA9IHBlLCBKLmdldENsaWVudFhZID0gZGUsIEouZ2V0UG9pbnRlcklkID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGllLm51bWJlcihlLnBvaW50ZXJJZCkgPyBlLnBvaW50ZXJJZCA6IGUuaWRlbnRpZmllcjsgfSwgSi5zZXRDb29yZHMgPSBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciA9IDEgPCB0Lmxlbmd0aCA/IHllKHQpIDogdFswXSwgbyA9IHt9OyBwZShyLCBvKSwgZS5wYWdlLnggPSBvLngsIGUucGFnZS55ID0gby55LCBkZShyLCBvKSwgZS5jbGllbnQueCA9IG8ueCwgZS5jbGllbnQueSA9IG8ueSwgZS50aW1lU3RhbXAgPSBuOyB9LCBKLmdldFRvdWNoUGFpciA9IHZlLCBKLnBvaW50ZXJBdmVyYWdlID0geWUsIEoudG91Y2hCQm94ID0gZnVuY3Rpb24gKGUpIHsgaWYgKCEoZS5sZW5ndGggfHwgZS50b3VjaGVzICYmIDEgPCBlLnRvdWNoZXMubGVuZ3RoKSlcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciB0ID0gdmUoZSksIG4gPSBNYXRoLm1pbih0WzBdLnBhZ2VYLCB0WzFdLnBhZ2VYKSwgciA9IE1hdGgubWluKHRbMF0ucGFnZVksIHRbMV0ucGFnZVkpLCBvID0gTWF0aC5tYXgodFswXS5wYWdlWCwgdFsxXS5wYWdlWCksIGkgPSBNYXRoLm1heCh0WzBdLnBhZ2VZLCB0WzFdLnBhZ2VZKTsgcmV0dXJuIHsgeDogbiwgeTogciwgbGVmdDogbiwgdG9wOiByLCByaWdodDogbywgYm90dG9tOiBpLCB3aWR0aDogbyAtIG4sIGhlaWdodDogaSAtIHIgfTsgfSwgSi50b3VjaERpc3RhbmNlID0gZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSB0ICsgXCJYXCIsIHIgPSB0ICsgXCJZXCIsIG8gPSB2ZShlKSwgaSA9IG9bMF1bbl0gLSBvWzFdW25dLCBhID0gb1swXVtyXSAtIG9bMV1bcl07IHJldHVybiAoMCwgb2UuZGVmYXVsdCkoaSwgYSk7IH0sIEoudG91Y2hBbmdsZSA9IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gdCArIFwiWFwiLCByID0gdCArIFwiWVwiLCBvID0gdmUoZSksIGkgPSBvWzFdW25dIC0gb1swXVtuXSwgYSA9IG9bMV1bcl0gLSBvWzBdW3JdOyByZXR1cm4gMTgwICogTWF0aC5hdGFuMihhLCBpKSAvIE1hdGguUEk7IH0sIEouZ2V0UG9pbnRlclR5cGUgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gaWUuc3RyaW5nKGUucG9pbnRlclR5cGUpID8gZS5wb2ludGVyVHlwZSA6IGllLm51bWJlcihlLnBvaW50ZXJUeXBlKSA/IFt2b2lkIDAsIHZvaWQgMCwgXCJ0b3VjaFwiLCBcInBlblwiLCBcIm1vdXNlXCJdW2UucG9pbnRlclR5cGVdIDogL3RvdWNoLy50ZXN0KGUudHlwZSkgfHwgZSBpbnN0YW5jZW9mIG5lLmRlZmF1bHQuVG91Y2ggPyBcInRvdWNoXCIgOiBcIm1vdXNlXCI7IH0sIEouZ2V0RXZlbnRUYXJnZXRzID0gZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBpZS5mdW5jKGUuY29tcG9zZWRQYXRoKSA/IGUuY29tcG9zZWRQYXRoKCkgOiBlLnBhdGg7IHJldHVybiBbcmUuZ2V0QWN0dWFsRWxlbWVudCh0ID8gdFswXSA6IGUudGFyZ2V0KSwgcmUuZ2V0QWN0dWFsRWxlbWVudChlLmN1cnJlbnRUYXJnZXQpXTsgfSwgSi5uZXdDb29yZHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IHBhZ2U6IHsgeDogMCwgeTogMCB9LCBjbGllbnQ6IHsgeDogMCwgeTogMCB9LCB0aW1lU3RhbXA6IDAgfTsgfSwgSi5jb29yZHNUb0V2ZW50ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHsgY29vcmRzOiBlLCBnZXQgcGFnZSgpIHsgcmV0dXJuIHRoaXMuY29vcmRzLnBhZ2U7IH0sIGdldCBjbGllbnQoKSB7IHJldHVybiB0aGlzLmNvb3Jkcy5jbGllbnQ7IH0sIGdldCB0aW1lU3RhbXAoKSB7IHJldHVybiB0aGlzLmNvb3Jkcy50aW1lU3RhbXA7IH0sIGdldCBwYWdlWCgpIHsgcmV0dXJuIHRoaXMuY29vcmRzLnBhZ2UueDsgfSwgZ2V0IHBhZ2VZKCkgeyByZXR1cm4gdGhpcy5jb29yZHMucGFnZS55OyB9LCBnZXQgY2xpZW50WCgpIHsgcmV0dXJuIHRoaXMuY29vcmRzLmNsaWVudC54OyB9LCBnZXQgY2xpZW50WSgpIHsgcmV0dXJuIHRoaXMuY29vcmRzLmNsaWVudC55OyB9LCBnZXQgcG9pbnRlcklkKCkgeyByZXR1cm4gdGhpcy5jb29yZHMucG9pbnRlcklkOyB9LCBnZXQgdGFyZ2V0KCkgeyByZXR1cm4gdGhpcy5jb29yZHMudGFyZ2V0OyB9LCBnZXQgdHlwZSgpIHsgcmV0dXJuIHRoaXMuY29vcmRzLnR5cGU7IH0sIGdldCBwb2ludGVyVHlwZSgpIHsgcmV0dXJuIHRoaXMuY29vcmRzLnBvaW50ZXJUeXBlOyB9LCBnZXQgYnV0dG9ucygpIHsgcmV0dXJuIHRoaXMuY29vcmRzLmJ1dHRvbnM7IH0gfTsgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KEosIFwicG9pbnRlckV4dGVuZFwiLCB7IGVudW1lcmFibGU6ICEwLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFlLmRlZmF1bHQ7IH0gfSk7IHZhciB0ZSA9IGxlKGopLCBuZSA9IGxlKGspLCByZSA9IHNlKEMpLCBvZSA9IGxlKEspLCBpZSA9IHNlKHkpLCBhZSA9IGxlKCQpOyBmdW5jdGlvbiB1ZSgpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiB1ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24gc2UoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSBlZShlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSB1ZSgpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSByZXR1cm4gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKSwgbjsgfSBmdW5jdGlvbiBsZShlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IGRlZmF1bHQ6IGUgfTsgfSBmdW5jdGlvbiBjZShlKSB7IHJldHVybiBlIGluc3RhbmNlb2YgbmUuZGVmYXVsdC5FdmVudCB8fCBlIGluc3RhbmNlb2YgbmUuZGVmYXVsdC5Ub3VjaDsgfSBmdW5jdGlvbiBmZShlLCB0LCBuKSB7IHJldHVybiAobiA9IG4gfHwge30pLnggPSB0WyhlID0gZSB8fCBcInBhZ2VcIikgKyBcIlhcIl0sIG4ueSA9IHRbZSArIFwiWVwiXSwgbjsgfSBmdW5jdGlvbiBwZShlLCB0KSB7IHJldHVybiB0ID0gdCB8fCB7IHg6IDAsIHk6IDAgfSwgdGUuZGVmYXVsdC5pc09wZXJhTW9iaWxlICYmIGNlKGUpID8gKGZlKFwic2NyZWVuXCIsIGUsIHQpLCB0LnggKz0gd2luZG93LnNjcm9sbFgsIHQueSArPSB3aW5kb3cuc2Nyb2xsWSkgOiBmZShcInBhZ2VcIiwgZSwgdCksIHQ7IH0gZnVuY3Rpb24gZGUoZSwgdCkgeyByZXR1cm4gdCA9IHQgfHwge30sIHRlLmRlZmF1bHQuaXNPcGVyYU1vYmlsZSAmJiBjZShlKSA/IGZlKFwic2NyZWVuXCIsIGUsIHQpIDogZmUoXCJjbGllbnRcIiwgZSwgdCksIHQ7IH0gZnVuY3Rpb24gdmUoZSkgeyB2YXIgdCA9IFtdOyByZXR1cm4gaWUuYXJyYXkoZSkgPyAodFswXSA9IGVbMF0sIHRbMV0gPSBlWzFdKSA6IFwidG91Y2hlbmRcIiA9PT0gZS50eXBlID8gMSA9PT0gZS50b3VjaGVzLmxlbmd0aCA/ICh0WzBdID0gZS50b3VjaGVzWzBdLCB0WzFdID0gZS5jaGFuZ2VkVG91Y2hlc1swXSkgOiAwID09PSBlLnRvdWNoZXMubGVuZ3RoICYmICh0WzBdID0gZS5jaGFuZ2VkVG91Y2hlc1swXSwgdFsxXSA9IGUuY2hhbmdlZFRvdWNoZXNbMV0pIDogKHRbMF0gPSBlLnRvdWNoZXNbMF0sIHRbMV0gPSBlLnRvdWNoZXNbMV0pLCB0OyB9IGZ1bmN0aW9uIHllKGUpIHsgZm9yICh2YXIgdCA9IHsgcGFnZVg6IDAsIHBhZ2VZOiAwLCBjbGllbnRYOiAwLCBjbGllbnRZOiAwLCBzY3JlZW5YOiAwLCBzY3JlZW5ZOiAwIH0sIG4gPSAwOyBuIDwgZS5sZW5ndGg7IG4rKykge1xuICAgICAgICB2YXIgciA9IGVbbl07XG4gICAgICAgIGZvciAodmFyIG8gaW4gdClcbiAgICAgICAgICAgIHRbb10gKz0gcltvXTtcbiAgICB9IGZvciAodmFyIGkgaW4gdClcbiAgICAgICAgdFtpXSAvPSBlLmxlbmd0aDsgcmV0dXJuIHQ7IH0gdmFyIG1lID0ge307IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtZSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBtZS5kZWZhdWx0ID0gZnVuY3Rpb24gKGUsIHQpIHsgZm9yICh2YXIgbiBpbiB0KVxuICAgICAgICBlW25dID0gdFtuXTsgcmV0dXJuIGU7IH07IHZhciBnZSA9IHt9OyBmdW5jdGlvbiBoZShlKSB7IHJldHVybiAoaGUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdHlwZW9mIGU7IH0gOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBlLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgZSAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgZTsgfSkoZSk7IH0gT2JqZWN0LmRlZmluZVByb3BlcnR5KGdlLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIGdlLmdldFN0cmluZ09wdGlvblJlc3VsdCA9IF9lLCBnZS5yZXNvbHZlUmVjdExpa2UgPSBmdW5jdGlvbiAoZSwgdCwgbiwgcikgeyB2YXIgbyA9IGU7IHdlLnN0cmluZyhvKSA/IG8gPSBfZShvLCB0LCBuKSA6IHdlLmZ1bmMobykgJiYgKG8gPSBvLmFwcGx5KHZvaWQgMCwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICAgIGZvciAodmFyIHQgPSAwLCBuID0gbmV3IEFycmF5KGUubGVuZ3RoKTsgdCA8IGUubGVuZ3RoOyB0KyspXG4gICAgICAgICAgICBuW3RdID0gZVt0XTtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgfSB9KGUpIHx8IGZ1bmN0aW9uIChlKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpIHx8IFwiW29iamVjdCBBcmd1bWVudHNdXCIgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSlcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oZSk7IH0oZSkgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0oKTsgfShyKSkpOyB3ZS5lbGVtZW50KG8pICYmIChvID0gKDAsIEMuZ2V0RWxlbWVudFJlY3QpKG8pKTsgcmV0dXJuIG87IH0sIGdlLnJlY3RUb1hZID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgeyB4OiBcInhcIiBpbiBlID8gZS54IDogZS5sZWZ0LCB5OiBcInlcIiBpbiBlID8gZS55IDogZS50b3AgfTsgfSwgZ2UueHl3aFRvVGxiciA9IGZ1bmN0aW9uIChlKSB7ICFlIHx8IFwibGVmdFwiIGluIGUgJiYgXCJ0b3BcIiBpbiBlIHx8ICgoZSA9ICgwLCBPZS5kZWZhdWx0KSh7fSwgZSkpLmxlZnQgPSBlLnggfHwgMCwgZS50b3AgPSBlLnkgfHwgMCwgZS5yaWdodCA9IGUucmlnaHQgfHwgZS5sZWZ0ICsgZS53aWR0aCwgZS5ib3R0b20gPSBlLmJvdHRvbSB8fCBlLnRvcCArIGUuaGVpZ2h0KTsgcmV0dXJuIGU7IH0sIGdlLnRsYnJUb1h5d2ggPSBmdW5jdGlvbiAoZSkgeyAhZSB8fCBcInhcIiBpbiBlICYmIFwieVwiIGluIGUgfHwgKChlID0gKDAsIE9lLmRlZmF1bHQpKHt9LCBlKSkueCA9IGUubGVmdCB8fCAwLCBlLnkgPSBlLnRvcCB8fCAwLCBlLndpZHRoID0gZS53aWR0aCB8fCBlLnJpZ2h0IHx8IDAgLSBlLngsIGUuaGVpZ2h0ID0gZS5oZWlnaHQgfHwgZS5ib3R0b20gfHwgMCAtIGUueSk7IHJldHVybiBlOyB9LCBnZS5hZGRFZGdlcyA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IGUubGVmdCAmJiAodC5sZWZ0ICs9IG4ueCk7IGUucmlnaHQgJiYgKHQucmlnaHQgKz0gbi54KTsgZS50b3AgJiYgKHQudG9wICs9IG4ueSk7IGUuYm90dG9tICYmICh0LmJvdHRvbSArPSBuLnkpOyB0LndpZHRoID0gdC5yaWdodCAtIHQubGVmdCwgdC5oZWlnaHQgPSB0LmJvdHRvbSAtIHQudG9wOyB9OyB2YXIgYmUsIE9lID0gKGJlID0gbWUpICYmIGJlLl9fZXNNb2R1bGUgPyBiZSA6IHsgZGVmYXVsdDogYmUgfSwgd2UgPSBmdW5jdGlvbiAoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSBoZShlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBQZSgpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pOyByZXR1cm4gbjsgfSh5KTsgZnVuY3Rpb24gUGUoKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgZSA9IG5ldyBXZWFrTWFwOyByZXR1cm4gUGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlOyB9LCBlOyB9IGZ1bmN0aW9uIF9lKGUsIHQsIG4pIHsgcmV0dXJuIFwicGFyZW50XCIgPT09IGUgPyAoMCwgQy5wYXJlbnROb2RlKShuKSA6IFwic2VsZlwiID09PSBlID8gdC5nZXRSZWN0KG4pIDogKDAsIEMuY2xvc2VzdCkobiwgZSk7IH0gdmFyIHhlID0ge307IGZ1bmN0aW9uIFNlKGUpIHsgcmV0dXJuIChTZSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoeGUsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgeGUuZGVmYXVsdCA9IGZ1bmN0aW9uIGUodCkgeyB2YXIgbiA9IHt9OyBmb3IgKHZhciByIGluIHQpIHtcbiAgICAgICAgdmFyIG8gPSB0W3JdO1xuICAgICAgICBNZS5wbGFpbk9iamVjdChvKSA/IG5bcl0gPSBlKG8pIDogTWUuYXJyYXkobykgPyBuW3JdID0gamUuZnJvbShvKSA6IG5bcl0gPSBvO1xuICAgIH0gcmV0dXJuIG47IH07IHZhciBqZSA9IGtlKHUpLCBNZSA9IGtlKHkpOyBmdW5jdGlvbiBFZSgpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBFZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24ga2UoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSBTZShlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBFZSgpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSByZXR1cm4gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKSwgbjsgfSB2YXIgRGUgPSB7fTsgZnVuY3Rpb24gVGUoZSkgeyByZXR1cm4gKFRlID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHR5cGVvZiBlOyB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7IH0pKGUpOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBEZS5kZWZhdWx0ID0gRGUuRmFrZUV2ZW50ID0gdm9pZCAwOyB2YXIgSWUsIEFlID0gWGUoQyksIHplID0gWGUoeSksIENlID0gKEllID0gJCkgJiYgSWUuX19lc01vZHVsZSA/IEllIDogeyBkZWZhdWx0OiBJZSB9LCBSZSA9IFhlKEopOyBmdW5jdGlvbiBXZSgpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBXZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24gWGUoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSBUZShlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBXZSgpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSByZXR1cm4gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKSwgbjsgfSBmdW5jdGlvbiBOZShlLCB0KSB7IGZvciAodmFyIG4gPSAwOyBuIDwgdC5sZW5ndGg7IG4rKykge1xuICAgICAgICB2YXIgciA9IHRbbl07XG4gICAgICAgIHIuZW51bWVyYWJsZSA9IHIuZW51bWVyYWJsZSB8fCAhMSwgci5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIHIgJiYgKHIud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLmtleSwgcik7XG4gICAgfSB9IGZ1bmN0aW9uIFllKGUsIHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IGlmIChBcnJheS5pc0FycmF5KGUpKVxuICAgICAgICByZXR1cm4gZTsgfShlKSB8fCBmdW5jdGlvbiAoZSwgdCkgeyBpZiAoIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpIHx8IFwiW29iamVjdCBBcmd1bWVudHNdXCIgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSkpXG4gICAgICAgIHJldHVybjsgdmFyIG4gPSBbXSwgciA9ICEwLCBvID0gITEsIGkgPSB2b2lkIDA7IHRyeSB7XG4gICAgICAgIGZvciAodmFyIGEsIHUgPSBlW1N5bWJvbC5pdGVyYXRvcl0oKTsgIShyID0gKGEgPSB1Lm5leHQoKSkuZG9uZSkgJiYgKG4ucHVzaChhLnZhbHVlKSwgIXQgfHwgbi5sZW5ndGggIT09IHQpOyByID0gITApXG4gICAgICAgICAgICA7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIG8gPSAhMCwgaSA9IGU7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgciB8fCBudWxsID09IHUucmV0dXJuIHx8IHUucmV0dXJuKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBpZiAobylcbiAgICAgICAgICAgICAgICB0aHJvdyBpO1xuICAgICAgICB9XG4gICAgfSByZXR1cm4gbjsgfShlLCB0KSB8fCBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9KCk7IH0gdmFyIEZlID0gW10sIExlID0gW10sIHFlID0ge30sIFZlID0gW107IGZ1bmN0aW9uIEdlKGUsIHQsIG4sIHIpIHsgdmFyIG8gPSBLZShyKSwgaSA9IEZlLmluZGV4T2YoZSksIGEgPSBMZVtpXTsgYSB8fCAoYSA9IHsgZXZlbnRzOiB7fSwgdHlwZUNvdW50OiAwIH0sIGkgPSBGZS5wdXNoKGUpIC0gMSwgTGUucHVzaChhKSksIGEuZXZlbnRzW3RdIHx8IChhLmV2ZW50c1t0XSA9IFtdLCBhLnR5cGVDb3VudCsrKSwgZS5yZW1vdmVFdmVudExpc3RlbmVyICYmICEoMCwgdS5jb250YWlucykoYS5ldmVudHNbdF0sIG4pICYmIChlLmFkZEV2ZW50TGlzdGVuZXIodCwgbiwgUWUuc3VwcG9ydHNPcHRpb25zID8gbyA6ICEhby5jYXB0dXJlKSwgYS5ldmVudHNbdF0ucHVzaChuKSk7IH0gZnVuY3Rpb24gVWUoZSwgdCwgbiwgcikgeyB2YXIgbyA9IEtlKHIpLCBpID0gRmUuaW5kZXhPZihlKSwgYSA9IExlW2ldOyBpZiAoYSAmJiBhLmV2ZW50cylcbiAgICAgICAgaWYgKFwiYWxsXCIgIT09IHQpIHtcbiAgICAgICAgICAgIGlmIChhLmV2ZW50c1t0XSkge1xuICAgICAgICAgICAgICAgIHZhciB1ID0gYS5ldmVudHNbdF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChcImFsbFwiID09PSBuKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgdTsgcysrKVxuICAgICAgICAgICAgICAgICAgICAgICAgVWUoZSwgdCwgYS5ldmVudHNbdF1bc10sIG8pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGwgPSAwOyBsIDwgdTsgbCsrKVxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5yZW1vdmVFdmVudExpc3RlbmVyICYmIGEuZXZlbnRzW3RdW2xdID09PSBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCwgbiwgUWUuc3VwcG9ydHNPcHRpb25zID8gbyA6ICEhby5jYXB0dXJlKSwgYS5ldmVudHNbdF0uc3BsaWNlKGwsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhLmV2ZW50c1t0XSAmJiAwID09PSBhLmV2ZW50c1t0XS5sZW5ndGggJiYgKGEuZXZlbnRzW3RdID0gbnVsbCwgYS50eXBlQ291bnQtLSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhLnR5cGVDb3VudCB8fCAoTGUuc3BsaWNlKGksIDEpLCBGZS5zcGxpY2UoaSwgMSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZvciAodCBpbiBhLmV2ZW50cylcbiAgICAgICAgICAgICAgICBhLmV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0KSAmJiBVZShlLCB0LCBcImFsbFwiKTsgfSBmdW5jdGlvbiBCZShlLCB0KSB7IGZvciAodmFyIG4gPSBLZSh0KSwgciA9IG5ldyAkZShlKSwgbyA9IHFlW2UudHlwZV0sIGkgPSBZZShSZS5nZXRFdmVudFRhcmdldHMoZSksIDEpWzBdLCBhID0gaTsgemUuZWxlbWVudChhKTspIHtcbiAgICAgICAgZm9yICh2YXIgdSA9IDA7IHUgPCBvLnNlbGVjdG9ycy5sZW5ndGg7IHUrKykge1xuICAgICAgICAgICAgdmFyIHMgPSBvLnNlbGVjdG9yc1t1XSwgbCA9IG8uY29udGV4dHNbdV07XG4gICAgICAgICAgICBpZiAoQWUubWF0Y2hlc1NlbGVjdG9yKGEsIHMpICYmIEFlLm5vZGVDb250YWlucyhsLCBpKSAmJiBBZS5ub2RlQ29udGFpbnMobCwgYSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IG8ubGlzdGVuZXJzW3VdO1xuICAgICAgICAgICAgICAgIHIuY3VycmVudFRhcmdldCA9IGE7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZiA9IDA7IGYgPCBjLmxlbmd0aDsgZisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwID0gWWUoY1tmXSwgMyksIGQgPSBwWzBdLCB2ID0gcFsxXSwgeSA9IHBbMl07XG4gICAgICAgICAgICAgICAgICAgIHYgPT09ICEhbi5jYXB0dXJlICYmIHkgPT09IG4ucGFzc2l2ZSAmJiBkKHIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhID0gQWUucGFyZW50Tm9kZShhKTtcbiAgICB9IH0gZnVuY3Rpb24gSGUoZSkgeyByZXR1cm4gQmUuY2FsbCh0aGlzLCBlLCAhMCk7IH0gZnVuY3Rpb24gS2UoZSkgeyByZXR1cm4gemUub2JqZWN0KGUpID8gZSA6IHsgY2FwdHVyZTogZSB9OyB9IHZhciAkZSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gbyhlKSB7IHZhciB0LCBuLCByOyAhZnVuY3Rpb24gKGUsIHQpIHsgaWYgKCEoZSBpbnN0YW5jZW9mIHQpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9KHRoaXMsIG8pLCB0aGlzLm9yaWdpbmFsRXZlbnQgPSBlLCByID0gdm9pZCAwLCAobiA9IFwiY3VycmVudFRhcmdldFwiKSBpbiAodCA9IHRoaXMpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIG4sIHsgdmFsdWU6IHIsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiB0W25dID0gciwgKDAsIENlLmRlZmF1bHQpKHRoaXMsIGUpOyB9IHZhciBlLCB0OyByZXR1cm4gZSA9IG8sICh0ID0gW3sga2V5OiBcInByZXZlbnRPcmlnaW5hbERlZmF1bHRcIiwgdmFsdWU6IGZ1bmN0aW9uICgpIHsgdGhpcy5vcmlnaW5hbEV2ZW50LnByZXZlbnREZWZhdWx0KCk7IH0gfSwgeyBrZXk6IFwic3RvcFByb3BhZ2F0aW9uXCIsIHZhbHVlOiBmdW5jdGlvbiAoKSB7IHRoaXMub3JpZ2luYWxFdmVudC5zdG9wUHJvcGFnYXRpb24oKTsgfSB9LCB7IGtleTogXCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25cIiwgdmFsdWU6IGZ1bmN0aW9uICgpIHsgdGhpcy5vcmlnaW5hbEV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpOyB9IH1dKSAmJiBOZShlLnByb3RvdHlwZSwgdCksIG87IH0oKTsgRGUuRmFrZUV2ZW50ID0gJGU7IHZhciBRZSA9IHsgYWRkOiBHZSwgcmVtb3ZlOiBVZSwgYWRkRGVsZWdhdGU6IGZ1bmN0aW9uIChlLCB0LCBuLCByLCBvKSB7IHZhciBpID0gS2Uobyk7IGlmICghcWVbbl0pIHtcbiAgICAgICAgICAgIHFlW25dID0geyBjb250ZXh0czogW10sIGxpc3RlbmVyczogW10sIHNlbGVjdG9yczogW10gfTtcbiAgICAgICAgICAgIGZvciAodmFyIGEgPSAwOyBhIDwgVmUubGVuZ3RoOyBhKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdSA9IFZlW2FdO1xuICAgICAgICAgICAgICAgIEdlKHUsIG4sIEJlKSwgR2UodSwgbiwgSGUsICEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB2YXIgcywgbCA9IHFlW25dOyBmb3IgKHMgPSBsLnNlbGVjdG9ycy5sZW5ndGggLSAxOyAwIDw9IHMgJiYgKGwuc2VsZWN0b3JzW3NdICE9PSBlIHx8IGwuY29udGV4dHNbc10gIT09IHQpOyBzLS0pXG4gICAgICAgICAgICA7IC0xID09PSBzICYmIChzID0gbC5zZWxlY3RvcnMubGVuZ3RoLCBsLnNlbGVjdG9ycy5wdXNoKGUpLCBsLmNvbnRleHRzLnB1c2godCksIGwubGlzdGVuZXJzLnB1c2goW10pKSwgbC5saXN0ZW5lcnNbc10ucHVzaChbciwgISFpLmNhcHR1cmUsIGkucGFzc2l2ZV0pOyB9LCByZW1vdmVEZWxlZ2F0ZTogZnVuY3Rpb24gKGUsIHQsIG4sIHIsIG8pIHsgdmFyIGksIGEgPSBLZShvKSwgdSA9IHFlW25dLCBzID0gITE7IGlmICh1KVxuICAgICAgICAgICAgZm9yIChpID0gdS5zZWxlY3RvcnMubGVuZ3RoIC0gMTsgMCA8PSBpOyBpLS0pXG4gICAgICAgICAgICAgICAgaWYgKHUuc2VsZWN0b3JzW2ldID09PSBlICYmIHUuY29udGV4dHNbaV0gPT09IHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbCA9IHUubGlzdGVuZXJzW2ldLCBjID0gbC5sZW5ndGggLSAxOyAwIDw9IGM7IGMtLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBZZShsW2NdLCAzKSwgcCA9IGZbMF0sIGQgPSBmWzFdLCB2ID0gZlsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwID09PSByICYmIGQgPT09ICEhYS5jYXB0dXJlICYmIHYgPT09IGEucGFzc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwuc3BsaWNlKGMsIDEpLCBsLmxlbmd0aCB8fCAodS5zZWxlY3RvcnMuc3BsaWNlKGksIDEpLCB1LmNvbnRleHRzLnNwbGljZShpLCAxKSwgdS5saXN0ZW5lcnMuc3BsaWNlKGksIDEpLCBVZSh0LCBuLCBCZSksIFVlKHQsIG4sIEhlLCAhMCksIHUuc2VsZWN0b3JzLmxlbmd0aCB8fCAocWVbbl0gPSBudWxsKSksIHMgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gfSwgZGVsZWdhdGVMaXN0ZW5lcjogQmUsIGRlbGVnYXRlVXNlQ2FwdHVyZTogSGUsIGRlbGVnYXRlZEV2ZW50czogcWUsIGRvY3VtZW50czogVmUsIHN1cHBvcnRzT3B0aW9uczogITEsIHN1cHBvcnRzUGFzc2l2ZTogITEsIF9lbGVtZW50czogRmUsIF90YXJnZXRzOiBMZSwgaW5pdDogZnVuY3Rpb24gKGUpIHsgZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsIG51bGwsIHsgZ2V0IGNhcHR1cmUoKSB7IHJldHVybiBRZS5zdXBwb3J0c09wdGlvbnMgPSAhMDsgfSwgZ2V0IHBhc3NpdmUoKSB7IHJldHVybiBRZS5zdXBwb3J0c1Bhc3NpdmUgPSAhMDsgfSB9KTsgfSB9LCBaZSA9IFFlOyBEZS5kZWZhdWx0ID0gWmU7IHZhciBKZSA9IHt9OyBPYmplY3QuZGVmaW5lUHJvcGVydHkoSmUsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgSmUuZGVmYXVsdCA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByID0gZS5vcHRpb25zW25dLCBvID0gciAmJiByLm9yaWdpbiB8fCBlLm9wdGlvbnMub3JpZ2luLCBpID0gKDAsIGdlLnJlc29sdmVSZWN0TGlrZSkobywgZSwgdCwgW2UgJiYgdF0pOyByZXR1cm4gKDAsIGdlLnJlY3RUb1hZKShpKSB8fCB7IHg6IDAsIHk6IDAgfTsgfTsgdmFyIGV0ID0ge307IGZ1bmN0aW9uIHR0KGUpIHsgcmV0dXJuICh0dCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgZXQuZGVmYXVsdCA9IGZ1bmN0aW9uIG4odCwgciwgbykgeyBvID0gbyB8fCB7fTsgb3Quc3RyaW5nKHQpICYmIC0xICE9PSB0LnNlYXJjaChcIiBcIikgJiYgKHQgPSBhdCh0KSk7IGlmIChvdC5hcnJheSh0KSlcbiAgICAgICAgcmV0dXJuIHQucmVkdWNlKGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiAoMCwgcnQuZGVmYXVsdCkoZSwgbih0LCByLCBvKSk7IH0sIG8pOyBvdC5vYmplY3QodCkgJiYgKHIgPSB0LCB0ID0gXCJcIik7IGlmIChvdC5mdW5jKHIpKVxuICAgICAgICBvW3RdID0gb1t0XSB8fCBbXSwgb1t0XS5wdXNoKHIpO1xuICAgIGVsc2UgaWYgKG90LmFycmF5KHIpKVxuICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IHIubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICAgIHZhciBpID0gcltlXTtcbiAgICAgICAgICAgIG4odCwgaSwgbyk7XG4gICAgICAgIH1cbiAgICBlbHNlIGlmIChvdC5vYmplY3QocikpXG4gICAgICAgIGZvciAodmFyIGEgaW4gcikge1xuICAgICAgICAgICAgdmFyIHUgPSBhdChhKS5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFwiXCIuY29uY2F0KHQpLmNvbmNhdChlKTsgfSk7XG4gICAgICAgICAgICBuKHUsIHJbYV0sIG8pO1xuICAgICAgICB9IHJldHVybiBvOyB9OyB2YXIgbnQsIHJ0ID0gKG50ID0gbWUpICYmIG50Ll9fZXNNb2R1bGUgPyBudCA6IHsgZGVmYXVsdDogbnQgfSwgb3QgPSBmdW5jdGlvbiAoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSB0dChlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBpdCgpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pOyByZXR1cm4gbjsgfSh5KTsgZnVuY3Rpb24gaXQoKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgZSA9IG5ldyBXZWFrTWFwOyByZXR1cm4gaXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlOyB9LCBlOyB9IGZ1bmN0aW9uIGF0KGUpIHsgcmV0dXJuIGUudHJpbSgpLnNwbGl0KC8gKy8pOyB9IHZhciB1dCA9IHt9OyBPYmplY3QuZGVmaW5lUHJvcGVydHkodXQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgdXQuZGVmYXVsdCA9IHZvaWQgMDsgdmFyIHN0LCBsdCwgY3QgPSAwOyB2YXIgZnQgPSB7IHJlcXVlc3Q6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBzdChlKTsgfSwgY2FuY2VsOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gbHQoZSk7IH0sIGluaXQ6IGZ1bmN0aW9uIChlKSB7IGlmIChzdCA9IGUucmVxdWVzdEFuaW1hdGlvbkZyYW1lLCBsdCA9IGUuY2FuY2VsQW5pbWF0aW9uRnJhbWUsICFzdClcbiAgICAgICAgICAgIGZvciAodmFyIHQgPSBbXCJtc1wiLCBcIm1velwiLCBcIndlYmtpdFwiLCBcIm9cIl0sIG4gPSAwOyBuIDwgdC5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgICAgIHZhciByID0gdFtuXTtcbiAgICAgICAgICAgICAgICBzdCA9IGVbXCJcIi5jb25jYXQociwgXCJSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIildLCBsdCA9IGVbXCJcIi5jb25jYXQociwgXCJDYW5jZWxBbmltYXRpb25GcmFtZVwiKV0gfHwgZVtcIlwiLmNvbmNhdChyLCBcIkNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZVwiKV07XG4gICAgICAgICAgICB9IHN0IHx8IChzdCA9IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gRGF0ZS5ub3coKSwgbiA9IE1hdGgubWF4KDAsIDE2IC0gKHQgLSBjdCkpLCByID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGUodCArIG4pOyB9LCBuKTsgcmV0dXJuIGN0ID0gdCArIG4sIHI7IH0sIGx0ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGNsZWFyVGltZW91dChlKTsgfSk7IH0gfTsgdXQuZGVmYXVsdCA9IGZ0OyB2YXIgcHQgPSB7fTsgZnVuY3Rpb24gZHQoZSkgeyByZXR1cm4gKGR0ID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHR5cGVvZiBlOyB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7IH0pKGUpOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwdCwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBwdC53YXJuT25jZSA9IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gITE7IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBuIHx8IChidC5kZWZhdWx0LndpbmRvdy5jb25zb2xlLndhcm4odCksIG4gPSAhMCksIGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTsgfSwgcHQuX2dldFFCZXppZXJWYWx1ZSA9IFR0LCBwdC5nZXRRdWFkcmF0aWNDdXJ2ZVBvaW50ID0gZnVuY3Rpb24gKGUsIHQsIG4sIHIsIG8sIGksIGEpIHsgcmV0dXJuIHsgeDogVHQoYSwgZSwgbiwgbyksIHk6IFR0KGEsIHQsIHIsIGkpIH07IH0sIHB0LmVhc2VPdXRRdWFkID0gZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgcmV0dXJuIC1uICogKGUgLz0gcikgKiAoZSAtIDIpICsgdDsgfSwgcHQuY29weUFjdGlvbiA9IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBlLm5hbWUgPSB0Lm5hbWUsIGUuYXhpcyA9IHQuYXhpcywgZS5lZGdlcyA9IHQuZWRnZXMsIGU7IH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwdCwgXCJ3aW5cIiwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidC5kZWZhdWx0OyB9IH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkocHQsIFwiYnJvd3NlclwiLCB7IGVudW1lcmFibGU6ICEwLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE90LmRlZmF1bHQ7IH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwdCwgXCJjbG9uZVwiLCB7IGVudW1lcmFibGU6ICEwLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHd0LmRlZmF1bHQ7IH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwdCwgXCJldmVudHNcIiwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBQdC5kZWZhdWx0OyB9IH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkocHQsIFwiZXh0ZW5kXCIsIHsgZW51bWVyYWJsZTogITAsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3QuZGVmYXVsdDsgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHB0LCBcImdldE9yaWdpblhZXCIsIHsgZW51bWVyYWJsZTogITAsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4geHQuZGVmYXVsdDsgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHB0LCBcImh5cG90XCIsIHsgZW51bWVyYWJsZTogITAsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU3QuZGVmYXVsdDsgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHB0LCBcIm5vcm1hbGl6ZUxpc3RlbmVyc1wiLCB7IGVudW1lcmFibGU6ICEwLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGp0LmRlZmF1bHQ7IH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwdCwgXCJyYWZcIiwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBNdC5kZWZhdWx0OyB9IH0pLCBwdC5yZWN0ID0gcHQucG9pbnRlciA9IHB0LmlzID0gcHQuZG9tID0gcHQuYXJyID0gdm9pZCAwOyB2YXIgdnQgPSBEdCh1KTsgcHQuYXJyID0gdnQ7IHZhciB5dCA9IER0KEMpOyBwdC5kb20gPSB5dDsgdmFyIG10ID0gRHQoeSk7IHB0LmlzID0gbXQ7IHZhciBndCA9IER0KEopOyBwdC5wb2ludGVyID0gZ3Q7IHZhciBodCA9IER0KGdlKTsgcHQucmVjdCA9IGh0OyB2YXIgYnQgPSBFdChzKSwgT3QgPSBFdChqKSwgd3QgPSBFdCh4ZSksIFB0ID0gRXQoRGUpLCBfdCA9IEV0KG1lKSwgeHQgPSBFdChKZSksIFN0ID0gRXQoSyksIGp0ID0gRXQoZXQpLCBNdCA9IEV0KHV0KTsgZnVuY3Rpb24gRXQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBkZWZhdWx0OiBlIH07IH0gZnVuY3Rpb24ga3QoKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgZSA9IG5ldyBXZWFrTWFwOyByZXR1cm4ga3QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlOyB9LCBlOyB9IGZ1bmN0aW9uIER0KGUpIHsgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKVxuICAgICAgICByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPT0gZHQoZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKVxuICAgICAgICByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0ga3QoKTsgaWYgKHQgJiYgdC5oYXMoZSkpXG4gICAgICAgIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7fSwgciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBvIGluIGUpXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykpIHtcbiAgICAgICAgICAgIHZhciBpID0gciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBudWxsO1xuICAgICAgICAgICAgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIG8sIGkpIDogbltvXSA9IGVbb107XG4gICAgICAgIH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH0gZnVuY3Rpb24gVHQoZSwgdCwgbiwgcikgeyB2YXIgbyA9IDEgLSBlOyByZXR1cm4gbyAqIG8gKiB0ICsgMiAqIG8gKiBlICogbiArIGUgKiBlICogcjsgfSB2YXIgSXQgPSB7fTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KEl0LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIEl0LmRlZmF1bHQgPSBJdC5kZWZhdWx0cyA9IHZvaWQgMDsgdmFyIEF0ID0geyBiYXNlOiB7IHByZXZlbnREZWZhdWx0OiBcImF1dG9cIiwgZGVsdGFTb3VyY2U6IFwicGFnZVwiIH0sIHBlckFjdGlvbjogeyBlbmFibGVkOiAhMSwgb3JpZ2luOiB7IHg6IDAsIHk6IDAgfSB9LCBhY3Rpb25zOiB7fSB9LCB6dCA9IEl0LmRlZmF1bHRzID0gQXQ7IEl0LmRlZmF1bHQgPSB6dDsgdmFyIEN0ID0ge307IGZ1bmN0aW9uIFJ0KGUpIHsgcmV0dXJuIChSdCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ3QsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgQ3QuZGVmYXVsdCA9IHZvaWQgMDsgdmFyIFd0ID0gZnVuY3Rpb24gKGUpIHsgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKVxuICAgICAgICByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPT0gUnQoZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKVxuICAgICAgICByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gRnQoKTsgaWYgKHQgJiYgdC5oYXMoZSkpXG4gICAgICAgIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7fSwgciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBvIGluIGUpXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykpIHtcbiAgICAgICAgICAgIHZhciBpID0gciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBudWxsO1xuICAgICAgICAgICAgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIG8sIGkpIDogbltvXSA9IGVbb107XG4gICAgICAgIH0gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKTsgcmV0dXJuIG47IH0odSksIFh0ID0gWXQobWUpLCBOdCA9IFl0KGV0KTsgZnVuY3Rpb24gWXQoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBkZWZhdWx0OiBlIH07IH0gZnVuY3Rpb24gRnQoKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgZSA9IG5ldyBXZWFrTWFwOyByZXR1cm4gRnQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlOyB9LCBlOyB9IGZ1bmN0aW9uIEx0KGUsIHQpIHsgZm9yICh2YXIgbiA9IDA7IG4gPCB0Lmxlbmd0aDsgbisrKSB7XG4gICAgICAgIHZhciByID0gdFtuXTtcbiAgICAgICAgci5lbnVtZXJhYmxlID0gci5lbnVtZXJhYmxlIHx8ICExLCByLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gciAmJiAoci53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIua2V5LCByKTtcbiAgICB9IH0gZnVuY3Rpb24gcXQoZSwgdCwgbikgeyByZXR1cm4gdCBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHQsIHsgdmFsdWU6IG4sIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiBlW3RdID0gbiwgZTsgfSBmdW5jdGlvbiBWdChlLCB0KSB7IGZvciAodmFyIG4gPSAwOyBuIDwgdC5sZW5ndGg7IG4rKykge1xuICAgICAgICB2YXIgciA9IHRbbl07XG4gICAgICAgIGlmIChlLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZClcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICByKGUpO1xuICAgIH0gfSB2YXIgR3QgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHQoZSkgeyAhZnVuY3Rpb24gKGUsIHQpIHsgaWYgKCEoZSBpbnN0YW5jZW9mIHQpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9KHRoaXMsIHQpLCBxdCh0aGlzLCBcIm9wdGlvbnNcIiwgdm9pZCAwKSwgcXQodGhpcywgXCJ0eXBlc1wiLCB7fSksIHF0KHRoaXMsIFwicHJvcGFnYXRpb25TdG9wcGVkXCIsICExKSwgcXQodGhpcywgXCJpbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWRcIiwgITEpLCBxdCh0aGlzLCBcImdsb2JhbFwiLCB2b2lkIDApLCB0aGlzLm9wdGlvbnMgPSAoMCwgWHQuZGVmYXVsdCkoe30sIGUgfHwge30pOyB9IHZhciBlLCBuOyByZXR1cm4gZSA9IHQsIChuID0gW3sga2V5OiBcImZpcmVcIiwgdmFsdWU6IGZ1bmN0aW9uIChlKSB7IHZhciB0LCBuID0gdGhpcy5nbG9iYWw7ICh0ID0gdGhpcy50eXBlc1tlLnR5cGVdKSAmJiBWdChlLCB0KSwgIWUucHJvcGFnYXRpb25TdG9wcGVkICYmIG4gJiYgKHQgPSBuW2UudHlwZV0pICYmIFZ0KGUsIHQpOyB9IH0sIHsga2V5OiBcIm9uXCIsIHZhbHVlOiBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9ICgwLCBOdC5kZWZhdWx0KShlLCB0KTsgZm9yIChlIGluIG4pXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlc1tlXSA9IFd0Lm1lcmdlKHRoaXMudHlwZXNbZV0gfHwgW10sIG5bZV0pOyB9IH0sIHsga2V5OiBcIm9mZlwiLCB2YWx1ZTogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSAoMCwgTnQuZGVmYXVsdCkoZSwgdCk7IGZvciAoZSBpbiBuKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnR5cGVzW2VdO1xuICAgICAgICAgICAgICAgIGlmIChyICYmIHIubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBvID0gMDsgbyA8IG5bZV0ubGVuZ3RoOyBvKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gbltlXVtvXSwgYSA9IHIuaW5kZXhPZihpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC0xICE9PSBhICYmIHIuc3BsaWNlKGEsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IH0gfSwgeyBrZXk6IFwiZ2V0UmVjdFwiLCB2YWx1ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfSB9XSkgJiYgTHQoZS5wcm90b3R5cGUsIG4pLCB0OyB9KCk7IEN0LmRlZmF1bHQgPSBHdDsgdmFyIFV0ID0ge307IGZ1bmN0aW9uIEJ0KGUpIHsgcmV0dXJuIChCdCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoVXQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgVXQuZGVmYXVsdCA9IFV0LkludGVyYWN0YWJsZSA9IHZvaWQgMDsgdmFyIEh0ID0gb24odSksIEt0ID0gbm4oaiksICR0ID0gbm4oeGUpLCBRdCA9IG5uKERlKSwgWnQgPSBubihtZSksIEp0ID0gb24oeSksIGVuID0gbm4oZXQpLCB0biA9IG5uKEN0KTsgZnVuY3Rpb24gbm4oZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBkZWZhdWx0OiBlIH07IH0gZnVuY3Rpb24gcm4oKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgZSA9IG5ldyBXZWFrTWFwOyByZXR1cm4gcm4gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlOyB9LCBlOyB9IGZ1bmN0aW9uIG9uKGUpIHsgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKVxuICAgICAgICByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPT0gQnQoZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKVxuICAgICAgICByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gcm4oKTsgaWYgKHQgJiYgdC5oYXMoZSkpXG4gICAgICAgIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7fSwgciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBvIGluIGUpXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykpIHtcbiAgICAgICAgICAgIHZhciBpID0gciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBudWxsO1xuICAgICAgICAgICAgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIG8sIGkpIDogbltvXSA9IGVbb107XG4gICAgICAgIH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH0gZnVuY3Rpb24gYW4oZSwgdCkgeyBmb3IgKHZhciBuID0gMDsgbiA8IHQubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgdmFyIHIgPSB0W25dO1xuICAgICAgICByLmVudW1lcmFibGUgPSByLmVudW1lcmFibGUgfHwgITEsIHIuY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiByICYmIChyLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgci5rZXksIHIpO1xuICAgIH0gfSBmdW5jdGlvbiB1bihlLCB0LCBuKSB7IHJldHVybiB0ICYmIGFuKGUucHJvdG90eXBlLCB0KSwgbiAmJiBhbihlLCBuKSwgZTsgfSBmdW5jdGlvbiBzbihlLCB0LCBuKSB7IHJldHVybiB0IGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgdCwgeyB2YWx1ZTogbiwgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCB9KSA6IGVbdF0gPSBuLCBlOyB9IHZhciBsbiA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gcihlLCB0LCBuKSB7ICFmdW5jdGlvbiAoZSwgdCkgeyBpZiAoIShlIGluc3RhbmNlb2YgdCkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0odGhpcywgciksIHNuKHRoaXMsIFwib3B0aW9uc1wiLCB2b2lkIDApLCBzbih0aGlzLCBcIl9hY3Rpb25zXCIsIHZvaWQgMCksIHNuKHRoaXMsIFwidGFyZ2V0XCIsIHZvaWQgMCksIHNuKHRoaXMsIFwiZXZlbnRzXCIsIG5ldyB0bi5kZWZhdWx0KSwgc24odGhpcywgXCJfY29udGV4dFwiLCB2b2lkIDApLCBzbih0aGlzLCBcIl93aW5cIiwgdm9pZCAwKSwgc24odGhpcywgXCJfZG9jXCIsIHZvaWQgMCksIHRoaXMuX2FjdGlvbnMgPSB0LmFjdGlvbnMsIHRoaXMudGFyZ2V0ID0gZSwgdGhpcy5fY29udGV4dCA9IHQuY29udGV4dCB8fCBuLCB0aGlzLl93aW4gPSAoMCwgcy5nZXRXaW5kb3cpKCgwLCBDLnRyeVNlbGVjdG9yKShlKSA/IHRoaXMuX2NvbnRleHQgOiBlKSwgdGhpcy5fZG9jID0gdGhpcy5fd2luLmRvY3VtZW50LCB0aGlzLnNldCh0KTsgfSByZXR1cm4gdW4ociwgW3sga2V5OiBcIl9kZWZhdWx0c1wiLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgYmFzZToge30sIHBlckFjdGlvbjoge30sIGFjdGlvbnM6IHt9IH07IH0gfV0pLCB1bihyLCBbeyBrZXk6IFwic2V0T25FdmVudHNcIiwgdmFsdWU6IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBKdC5mdW5jKHQub25zdGFydCkgJiYgdGhpcy5vbihcIlwiLmNvbmNhdChlLCBcInN0YXJ0XCIpLCB0Lm9uc3RhcnQpLCBKdC5mdW5jKHQub25tb3ZlKSAmJiB0aGlzLm9uKFwiXCIuY29uY2F0KGUsIFwibW92ZVwiKSwgdC5vbm1vdmUpLCBKdC5mdW5jKHQub25lbmQpICYmIHRoaXMub24oXCJcIi5jb25jYXQoZSwgXCJlbmRcIiksIHQub25lbmQpLCBKdC5mdW5jKHQub25pbmVydGlhc3RhcnQpICYmIHRoaXMub24oXCJcIi5jb25jYXQoZSwgXCJpbmVydGlhc3RhcnRcIiksIHQub25pbmVydGlhc3RhcnQpLCB0aGlzOyB9IH0sIHsga2V5OiBcInVwZGF0ZVBlckFjdGlvbkxpc3RlbmVyc1wiLCB2YWx1ZTogZnVuY3Rpb24gKGUsIHQsIG4pIHsgKEp0LmFycmF5KHQpIHx8IEp0Lm9iamVjdCh0KSkgJiYgdGhpcy5vZmYoZSwgdCksIChKdC5hcnJheShuKSB8fCBKdC5vYmplY3QobikpICYmIHRoaXMub24oZSwgbik7IH0gfSwgeyBrZXk6IFwic2V0UGVyQWN0aW9uXCIsIHZhbHVlOiBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IHRoaXMuX2RlZmF1bHRzOyBmb3IgKHZhciByIGluIHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbyA9IHIsIGkgPSB0aGlzLm9wdGlvbnNbZV0sIGEgPSB0W29dO1xuICAgICAgICAgICAgICAgIFwibGlzdGVuZXJzXCIgPT09IG8gJiYgdGhpcy51cGRhdGVQZXJBY3Rpb25MaXN0ZW5lcnMoZSwgaS5saXN0ZW5lcnMsIGEpLCBKdC5hcnJheShhKSA/IGlbb10gPSBIdC5mcm9tKGEpIDogSnQucGxhaW5PYmplY3QoYSkgPyAoaVtvXSA9ICgwLCBadC5kZWZhdWx0KShpW29dIHx8IHt9LCAoMCwgJHQuZGVmYXVsdCkoYSkpLCBKdC5vYmplY3Qobi5wZXJBY3Rpb25bb10pICYmIFwiZW5hYmxlZFwiIGluIG4ucGVyQWN0aW9uW29dICYmIChpW29dLmVuYWJsZWQgPSAhMSAhPT0gYS5lbmFibGVkKSkgOiBKdC5ib29sKGEpICYmIEp0Lm9iamVjdChuLnBlckFjdGlvbltvXSkgPyBpW29dLmVuYWJsZWQgPSBhIDogaVtvXSA9IGE7XG4gICAgICAgICAgICB9IH0gfSwgeyBrZXk6IFwiZ2V0UmVjdFwiLCB2YWx1ZTogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgPSBlIHx8IChKdC5lbGVtZW50KHRoaXMudGFyZ2V0KSA/IHRoaXMudGFyZ2V0IDogbnVsbCksIEp0LnN0cmluZyh0aGlzLnRhcmdldCkgJiYgKGUgPSBlIHx8IHRoaXMuX2NvbnRleHQucXVlcnlTZWxlY3Rvcih0aGlzLnRhcmdldCkpLCAoMCwgQy5nZXRFbGVtZW50UmVjdCkoZSk7IH0gfSwgeyBrZXk6IFwicmVjdENoZWNrZXJcIiwgdmFsdWU6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBKdC5mdW5jKGUpID8gKHRoaXMuZ2V0UmVjdCA9IGUsIHRoaXMpIDogbnVsbCA9PT0gZSA/IChkZWxldGUgdGhpcy5nZXRSZWN0LCB0aGlzKSA6IHRoaXMuZ2V0UmVjdDsgfSB9LCB7IGtleTogXCJfYmFja0NvbXBhdE9wdGlvblwiLCB2YWx1ZTogZnVuY3Rpb24gKGUsIHQpIHsgaWYgKCgwLCBDLnRyeVNlbGVjdG9yKSh0KSB8fCBKdC5vYmplY3QodCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNbZV0gPSB0O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgdGhpcy5fYWN0aW9ucy5uYW1lcy5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMuX2FjdGlvbnMubmFtZXNbbl07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1tyXVtlXSA9IHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSByZXR1cm4gdGhpcy5vcHRpb25zW2VdOyB9IH0sIHsga2V5OiBcIm9yaWdpblwiLCB2YWx1ZTogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRoaXMuX2JhY2tDb21wYXRPcHRpb24oXCJvcmlnaW5cIiwgZSk7IH0gfSwgeyBrZXk6IFwiZGVsdGFTb3VyY2VcIiwgdmFsdWU6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBcInBhZ2VcIiA9PT0gZSB8fCBcImNsaWVudFwiID09PSBlID8gKHRoaXMub3B0aW9ucy5kZWx0YVNvdXJjZSA9IGUsIHRoaXMpIDogdGhpcy5vcHRpb25zLmRlbHRhU291cmNlOyB9IH0sIHsga2V5OiBcImNvbnRleHRcIiwgdmFsdWU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2NvbnRleHQ7IH0gfSwgeyBrZXk6IFwiaW5Db250ZXh0XCIsIHZhbHVlOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcy5fY29udGV4dCA9PT0gZS5vd25lckRvY3VtZW50IHx8ICgwLCBDLm5vZGVDb250YWlucykodGhpcy5fY29udGV4dCwgZSk7IH0gfSwgeyBrZXk6IFwidGVzdElnbm9yZUFsbG93XCIsIHZhbHVlOiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gIXRoaXMudGVzdElnbm9yZShlLmlnbm9yZUZyb20sIHQsIG4pICYmIHRoaXMudGVzdEFsbG93KGUuYWxsb3dGcm9tLCB0LCBuKTsgfSB9LCB7IGtleTogXCJ0ZXN0QWxsb3dcIiwgdmFsdWU6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiAhZSB8fCAhIUp0LmVsZW1lbnQobikgJiYgKEp0LnN0cmluZyhlKSA/ICgwLCBDLm1hdGNoZXNVcFRvKShuLCBlLCB0KSA6ICEhSnQuZWxlbWVudChlKSAmJiAoMCwgQy5ub2RlQ29udGFpbnMpKGUsIG4pKTsgfSB9LCB7IGtleTogXCJ0ZXN0SWdub3JlXCIsIHZhbHVlOiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gISghZSB8fCAhSnQuZWxlbWVudChuKSkgJiYgKEp0LnN0cmluZyhlKSA/ICgwLCBDLm1hdGNoZXNVcFRvKShuLCBlLCB0KSA6ICEhSnQuZWxlbWVudChlKSAmJiAoMCwgQy5ub2RlQ29udGFpbnMpKGUsIG4pKTsgfSB9LCB7IGtleTogXCJmaXJlXCIsIHZhbHVlOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcy5ldmVudHMuZmlyZShlKSwgdGhpczsgfSB9LCB7IGtleTogXCJfb25PZmZcIiwgdmFsdWU6IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7IEp0Lm9iamVjdCh0KSAmJiAhSnQuYXJyYXkodCkgJiYgKHIgPSBuLCBuID0gbnVsbCk7IHZhciBvID0gXCJvblwiID09PSBlID8gXCJhZGRcIiA6IFwicmVtb3ZlXCIsIGkgPSAoMCwgZW4uZGVmYXVsdCkodCwgbik7IGZvciAodmFyIGEgaW4gaSkge1xuICAgICAgICAgICAgICAgIFwid2hlZWxcIiA9PT0gYSAmJiAoYSA9IEt0LmRlZmF1bHQud2hlZWxFdmVudCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdSA9IDA7IHUgPCBpW2FdLmxlbmd0aDsgdSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gaVthXVt1XTtcbiAgICAgICAgICAgICAgICAgICAgSHQuY29udGFpbnModGhpcy5fYWN0aW9ucy5ldmVudFR5cGVzLCBhKSA/IHRoaXMuZXZlbnRzW2VdKGEsIHMpIDogSnQuc3RyaW5nKHRoaXMudGFyZ2V0KSA/IFF0LmRlZmF1bHRbXCJcIi5jb25jYXQobywgXCJEZWxlZ2F0ZVwiKV0odGhpcy50YXJnZXQsIHRoaXMuX2NvbnRleHQsIGEsIHMsIHIpIDogUXQuZGVmYXVsdFtvXSh0aGlzLnRhcmdldCwgYSwgcywgcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSByZXR1cm4gdGhpczsgfSB9LCB7IGtleTogXCJvblwiLCB2YWx1ZTogZnVuY3Rpb24gKGUsIHQsIG4pIHsgcmV0dXJuIHRoaXMuX29uT2ZmKFwib25cIiwgZSwgdCwgbik7IH0gfSwgeyBrZXk6IFwib2ZmXCIsIHZhbHVlOiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gdGhpcy5fb25PZmYoXCJvZmZcIiwgZSwgdCwgbik7IH0gfSwgeyBrZXk6IFwic2V0XCIsIHZhbHVlOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IHRoaXMuX2RlZmF1bHRzOyBmb3IgKHZhciBuIGluIEp0Lm9iamVjdChlKSB8fCAoZSA9IHt9KSwgdGhpcy5vcHRpb25zID0gKDAsICR0LmRlZmF1bHQpKHQuYmFzZSksIHRoaXMuX2FjdGlvbnMubWV0aG9kRGljdCkge1xuICAgICAgICAgICAgICAgIHZhciByID0gbiwgbyA9IHRoaXMuX2FjdGlvbnMubWV0aG9kRGljdFtyXTtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNbcl0gPSB7fSwgdGhpcy5zZXRQZXJBY3Rpb24ociwgKDAsIFp0LmRlZmF1bHQpKCgwLCBadC5kZWZhdWx0KSh7fSwgdC5wZXJBY3Rpb24pLCB0LmFjdGlvbnNbcl0pKSwgdGhpc1tvXShlW3JdKTtcbiAgICAgICAgICAgIH0gZm9yICh2YXIgaSBpbiBlKVxuICAgICAgICAgICAgICAgIEp0LmZ1bmModGhpc1tpXSkgJiYgdGhpc1tpXShlW2ldKTsgcmV0dXJuIHRoaXM7IH0gfSwgeyBrZXk6IFwidW5zZXRcIiwgdmFsdWU6IGZ1bmN0aW9uICgpIHsgaWYgKFF0LmRlZmF1bHQucmVtb3ZlKHRoaXMudGFyZ2V0LCBcImFsbFwiKSwgSnQuc3RyaW5nKHRoaXMudGFyZ2V0KSlcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBlIGluIFF0LmRlZmF1bHQuZGVsZWdhdGVkRXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gUXQuZGVmYXVsdC5kZWxlZ2F0ZWRFdmVudHNbZV07XG4gICAgICAgICAgICAgICAgICAgIHQuc2VsZWN0b3JzWzBdID09PSB0aGlzLnRhcmdldCAmJiB0LmNvbnRleHRzWzBdID09PSB0aGlzLl9jb250ZXh0ICYmICh0LnNlbGVjdG9ycy5zcGxpY2UoMCwgMSksIHQuY29udGV4dHMuc3BsaWNlKDAsIDEpLCB0Lmxpc3RlbmVycy5zcGxpY2UoMCwgMSkpLCBRdC5kZWZhdWx0LnJlbW92ZSh0aGlzLl9jb250ZXh0LCBlLCBRdC5kZWZhdWx0LmRlbGVnYXRlTGlzdGVuZXIpLCBRdC5kZWZhdWx0LnJlbW92ZSh0aGlzLl9jb250ZXh0LCBlLCBRdC5kZWZhdWx0LmRlbGVnYXRlVXNlQ2FwdHVyZSwgITApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBRdC5kZWZhdWx0LnJlbW92ZSh0aGlzLnRhcmdldCwgXCJhbGxcIik7IH0gfV0pLCByOyB9KCksIGNuID0gVXQuSW50ZXJhY3RhYmxlID0gbG47IFV0LmRlZmF1bHQgPSBjbjsgdmFyIGZuID0ge307IGZ1bmN0aW9uIHBuKGUpIHsgcmV0dXJuIChwbiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgZm4uZGVmYXVsdCA9IHZvaWQgMDsgdmFyIGRuLCB2biA9IGJuKHUpLCB5biA9IGJuKEMpLCBtbiA9IChkbiA9IG1lKSAmJiBkbi5fX2VzTW9kdWxlID8gZG4gOiB7IGRlZmF1bHQ6IGRuIH0sIGduID0gYm4oeSk7IGZ1bmN0aW9uIGhuKCkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKVxuICAgICAgICByZXR1cm4gbnVsbDsgdmFyIGUgPSBuZXcgV2Vha01hcDsgcmV0dXJuIGhuID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZTsgfSwgZTsgfSBmdW5jdGlvbiBibihlKSB7IGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICAgICAgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT09IHBuKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IGhuKCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IHJldHVybiBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pLCBuOyB9IGZ1bmN0aW9uIE9uKGUsIHQpIHsgZm9yICh2YXIgbiA9IDA7IG4gPCB0Lmxlbmd0aDsgbisrKSB7XG4gICAgICAgIHZhciByID0gdFtuXTtcbiAgICAgICAgci5lbnVtZXJhYmxlID0gci5lbnVtZXJhYmxlIHx8ICExLCByLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gciAmJiAoci53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIua2V5LCByKTtcbiAgICB9IH0gZnVuY3Rpb24gd24oZSwgdCwgbikgeyByZXR1cm4gdCBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHQsIHsgdmFsdWU6IG4sIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiBlW3RdID0gbiwgZTsgfSB2YXIgUG4gPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHQoZSkgeyB2YXIgYSA9IHRoaXM7ICFmdW5jdGlvbiAoZSwgdCkgeyBpZiAoIShlIGluc3RhbmNlb2YgdCkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0odGhpcywgdCksIHRoaXMuc2NvcGUgPSBlLCB3bih0aGlzLCBcImxpc3RcIiwgW10pLCB3bih0aGlzLCBcInNlbGVjdG9yTWFwXCIsIHt9KSwgZS5hZGRMaXN0ZW5lcnMoeyBcImludGVyYWN0YWJsZTp1bnNldFwiOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuaW50ZXJhY3RhYmxlLCBuID0gdC50YXJnZXQsIHIgPSB0Ll9jb250ZXh0LCBvID0gZ24uc3RyaW5nKG4pID8gYS5zZWxlY3Rvck1hcFtuXSA6IG5bYS5zY29wZS5pZF0sIGkgPSBvLmZpbmRJbmRleChmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5jb250ZXh0ID09PSByOyB9KTsgb1tpXSAmJiAob1tpXS5jb250ZXh0ID0gbnVsbCwgb1tpXS5pbnRlcmFjdGFibGUgPSBudWxsKSwgby5zcGxpY2UoaSwgMSk7IH0gfSk7IH0gdmFyIGUsIG47IHJldHVybiBlID0gdCwgKG4gPSBbeyBrZXk6IFwibmV3XCIsIHZhbHVlOiBmdW5jdGlvbiAoZSwgdCkgeyB0ID0gKDAsIG1uLmRlZmF1bHQpKHQgfHwge30sIHsgYWN0aW9uczogdGhpcy5zY29wZS5hY3Rpb25zIH0pOyB2YXIgbiA9IG5ldyB0aGlzLnNjb3BlLkludGVyYWN0YWJsZShlLCB0LCB0aGlzLnNjb3BlLmRvY3VtZW50KSwgciA9IHsgY29udGV4dDogbi5fY29udGV4dCwgaW50ZXJhY3RhYmxlOiBuIH07IHJldHVybiB0aGlzLnNjb3BlLmFkZERvY3VtZW50KG4uX2RvYyksIHRoaXMubGlzdC5wdXNoKG4pLCBnbi5zdHJpbmcoZSkgPyAodGhpcy5zZWxlY3Rvck1hcFtlXSB8fCAodGhpcy5zZWxlY3Rvck1hcFtlXSA9IFtdKSwgdGhpcy5zZWxlY3Rvck1hcFtlXS5wdXNoKHIpKSA6IChuLnRhcmdldFt0aGlzLnNjb3BlLmlkXSB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgdGhpcy5zY29wZS5pZCwgeyB2YWx1ZTogW10sIGNvbmZpZ3VyYWJsZTogITAgfSksIGVbdGhpcy5zY29wZS5pZF0ucHVzaChyKSksIHRoaXMuc2NvcGUuZmlyZShcImludGVyYWN0YWJsZTpuZXdcIiwgeyB0YXJnZXQ6IGUsIG9wdGlvbnM6IHQsIGludGVyYWN0YWJsZTogbiwgd2luOiB0aGlzLnNjb3BlLl93aW4gfSksIG47IH0gfSwgeyBrZXk6IFwiZ2V0XCIsIHZhbHVlOiBmdW5jdGlvbiAodCwgZSkgeyB2YXIgbiA9IGUgJiYgZS5jb250ZXh0IHx8IHRoaXMuc2NvcGUuZG9jdW1lbnQsIHIgPSBnbi5zdHJpbmcodCksIG8gPSByID8gdGhpcy5zZWxlY3Rvck1hcFt0XSA6IHRbdGhpcy5zY29wZS5pZF07IGlmICghbylcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgdmFyIGkgPSB2bi5maW5kKG8sIGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmNvbnRleHQgPT09IG4gJiYgKHIgfHwgZS5pbnRlcmFjdGFibGUuaW5Db250ZXh0KHQpKTsgfSk7IHJldHVybiBpICYmIGkuaW50ZXJhY3RhYmxlOyB9IH0sIHsga2V5OiBcImZvckVhY2hNYXRjaFwiLCB2YWx1ZTogZnVuY3Rpb24gKGUsIHQpIHsgZm9yICh2YXIgbiA9IDA7IG4gPCB0aGlzLmxpc3QubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMubGlzdFtuXSwgbyA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBpZiAoKGduLnN0cmluZyhyLnRhcmdldCkgPyBnbi5lbGVtZW50KGUpICYmIHluLm1hdGNoZXNTZWxlY3RvcihlLCByLnRhcmdldCkgOiBlID09PSByLnRhcmdldCkgJiYgci5pbkNvbnRleHQoZSkgJiYgKG8gPSB0KHIpKSwgdm9pZCAwICE9PSBvKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgICAgIH0gfSB9XSkgJiYgT24oZS5wcm90b3R5cGUsIG4pLCB0OyB9KCk7IGZuLmRlZmF1bHQgPSBQbjsgdmFyIF9uLCB4biwgU24gPSB7fTsgZnVuY3Rpb24gam4oZSwgdCkgeyBmb3IgKHZhciBuID0gMDsgbiA8IHQubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgdmFyIHIgPSB0W25dO1xuICAgICAgICByLmVudW1lcmFibGUgPSByLmVudW1lcmFibGUgfHwgITEsIHIuY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiByICYmIChyLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgci5rZXksIHIpO1xuICAgIH0gfSBmdW5jdGlvbiBNbihlLCB0LCBuKSB7IHJldHVybiB0ICYmIGpuKGUucHJvdG90eXBlLCB0KSwgbiAmJiBqbihlLCBuKSwgZTsgfSBmdW5jdGlvbiBFbihlLCB0LCBuKSB7IHJldHVybiB0IGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgdCwgeyB2YWx1ZTogbiwgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCB9KSA6IGVbdF0gPSBuLCBlOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTbiwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBTbi5kZWZhdWx0ID0gU24uQmFzZUV2ZW50ID0gU24uRXZlbnRQaGFzZSA9IHZvaWQgMCwgU24uRXZlbnRQaGFzZSA9IF9uLCAoeG4gPSBfbiB8fCAoU24uRXZlbnRQaGFzZSA9IF9uID0ge30pKS5TdGFydCA9IFwic3RhcnRcIiwgeG4uTW92ZSA9IFwibW92ZVwiLCB4bi5FbmQgPSBcImVuZFwiLCB4bi5fTk9ORSA9IFwiXCI7IHZhciBrbiA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gdChlKSB7ICFmdW5jdGlvbiAoZSwgdCkgeyBpZiAoIShlIGluc3RhbmNlb2YgdCkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0odGhpcywgdCksIEVuKHRoaXMsIFwidHlwZVwiLCB2b2lkIDApLCBFbih0aGlzLCBcInRhcmdldFwiLCB2b2lkIDApLCBFbih0aGlzLCBcImN1cnJlbnRUYXJnZXRcIiwgdm9pZCAwKSwgRW4odGhpcywgXCJpbnRlcmFjdGFibGVcIiwgdm9pZCAwKSwgRW4odGhpcywgXCJfaW50ZXJhY3Rpb25cIiwgdm9pZCAwKSwgRW4odGhpcywgXCJ0aW1lU3RhbXBcIiwgdm9pZCAwKSwgRW4odGhpcywgXCJpbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWRcIiwgITEpLCBFbih0aGlzLCBcInByb3BhZ2F0aW9uU3RvcHBlZFwiLCAhMSksIHRoaXMuX2ludGVyYWN0aW9uID0gZTsgfSByZXR1cm4gTW4odCwgW3sga2V5OiBcImludGVyYWN0aW9uXCIsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5faW50ZXJhY3Rpb24uX3Byb3h5OyB9IH1dKSwgTW4odCwgW3sga2V5OiBcInByZXZlbnREZWZhdWx0XCIsIHZhbHVlOiBmdW5jdGlvbiAoKSB7IH0gfSwgeyBrZXk6IFwic3RvcFByb3BhZ2F0aW9uXCIsIHZhbHVlOiBmdW5jdGlvbiAoKSB7IHRoaXMucHJvcGFnYXRpb25TdG9wcGVkID0gITA7IH0gfSwgeyBrZXk6IFwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uXCIsIHZhbHVlOiBmdW5jdGlvbiAoKSB7IHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdGhpcy5wcm9wYWdhdGlvblN0b3BwZWQgPSAhMDsgfSB9XSksIHQ7IH0oKSwgRG4gPSBTbi5CYXNlRXZlbnQgPSBrbjsgU24uZGVmYXVsdCA9IERuOyB2YXIgVG4gPSB7fTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRuLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIFRuLmRlZmF1bHQgPSBUbi5JbnRlcmFjdEV2ZW50ID0gVG4uRXZlbnRQaGFzZSA9IHZvaWQgMDsgdmFyIEluLCBBbiwgem4gPSBObihtZSksIENuID0gTm4oSmUpLCBSbiA9IE5uKEspLCBXbiA9IE5uKFNuKSwgWG4gPSBObihJdCk7IGZ1bmN0aW9uIE5uKGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgZGVmYXVsdDogZSB9OyB9IGZ1bmN0aW9uIFluKGUpIHsgcmV0dXJuIChZbiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBmdW5jdGlvbiBGbihlLCB0KSB7IGZvciAodmFyIG4gPSAwOyBuIDwgdC5sZW5ndGg7IG4rKykge1xuICAgICAgICB2YXIgciA9IHRbbl07XG4gICAgICAgIHIuZW51bWVyYWJsZSA9IHIuZW51bWVyYWJsZSB8fCAhMSwgci5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIHIgJiYgKHIud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLmtleSwgcik7XG4gICAgfSB9IGZ1bmN0aW9uIExuKGUpIHsgcmV0dXJuIChMbiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7IH0pKGUpOyB9IGZ1bmN0aW9uIHFuKGUpIHsgaWYgKHZvaWQgMCA9PT0gZSlcbiAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyByZXR1cm4gZTsgfSBmdW5jdGlvbiBWbihlLCB0KSB7IHJldHVybiAoVm4gPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIGUuX19wcm90b19fID0gdCwgZTsgfSkoZSwgdCk7IH0gZnVuY3Rpb24gR24oZSwgdCwgbikgeyByZXR1cm4gdCBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHQsIHsgdmFsdWU6IG4sIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiBlW3RdID0gbiwgZTsgfSBUbi5FdmVudFBoYXNlID0gSW4sIChBbiA9IEluIHx8IChUbi5FdmVudFBoYXNlID0gSW4gPSB7fSkpLlN0YXJ0ID0gXCJzdGFydFwiLCBBbi5Nb3ZlID0gXCJtb3ZlXCIsIEFuLkVuZCA9IFwiZW5kXCIsIEFuLl9OT05FID0gXCJcIjsgdmFyIFVuID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBoKGUsIHQsIG4sIHIsIG8sIGksIGEsIHUpIHsgdmFyIHMsIGwsIGM7ICFmdW5jdGlvbiAoZSwgdCkgeyBpZiAoIShlIGluc3RhbmNlb2YgdCkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0odGhpcywgaCksIGwgPSB0aGlzLCBzID0gIShjID0gTG4oaCkuY2FsbCh0aGlzLCBlKSkgfHwgXCJvYmplY3RcIiAhPT0gWW4oYykgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBjID8gcW4obCkgOiBjLCBHbihxbihzKSwgXCJ0YXJnZXRcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwiY3VycmVudFRhcmdldFwiLCB2b2lkIDApLCBHbihxbihzKSwgXCJyZWxhdGVkVGFyZ2V0XCIsIHZvaWQgMCksIEduKHFuKHMpLCBcInNjcmVlblhcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwic2NyZWVuWVwiLCB2b2lkIDApLCBHbihxbihzKSwgXCJidXR0b25cIiwgdm9pZCAwKSwgR24ocW4ocyksIFwiYnV0dG9uc1wiLCB2b2lkIDApLCBHbihxbihzKSwgXCJjdHJsS2V5XCIsIHZvaWQgMCksIEduKHFuKHMpLCBcInNoaWZ0S2V5XCIsIHZvaWQgMCksIEduKHFuKHMpLCBcImFsdEtleVwiLCB2b2lkIDApLCBHbihxbihzKSwgXCJtZXRhS2V5XCIsIHZvaWQgMCksIEduKHFuKHMpLCBcInBhZ2VcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwiY2xpZW50XCIsIHZvaWQgMCksIEduKHFuKHMpLCBcImRlbHRhXCIsIHZvaWQgMCksIEduKHFuKHMpLCBcInJlY3RcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwieDBcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwieTBcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwidDBcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwiZHRcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwiZHVyYXRpb25cIiwgdm9pZCAwKSwgR24ocW4ocyksIFwiY2xpZW50WDBcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwiY2xpZW50WTBcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwidmVsb2NpdHlcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwic3BlZWRcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwic3dpcGVcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwidGltZVN0YW1wXCIsIHZvaWQgMCksIEduKHFuKHMpLCBcImRyYWdFbnRlclwiLCB2b2lkIDApLCBHbihxbihzKSwgXCJkcmFnTGVhdmVcIiwgdm9pZCAwKSwgR24ocW4ocyksIFwiYXhlc1wiLCB2b2lkIDApLCBHbihxbihzKSwgXCJwcmVFbmRcIiwgdm9pZCAwKSwgbyA9IG8gfHwgZS5lbGVtZW50OyB2YXIgZiA9IGUuaW50ZXJhY3RhYmxlLCBwID0gKGYgJiYgZi5vcHRpb25zIHx8IFhuLmRlZmF1bHQpLmRlbHRhU291cmNlLCBkID0gKDAsIENuLmRlZmF1bHQpKGYsIG8sIG4pLCB2ID0gXCJzdGFydFwiID09PSByLCB5ID0gXCJlbmRcIiA9PT0gciwgbSA9IHYgPyBxbihzKSA6IGUucHJldkV2ZW50LCBnID0gdiA/IGUuY29vcmRzLnN0YXJ0IDogeSA/IHsgcGFnZTogbS5wYWdlLCBjbGllbnQ6IG0uY2xpZW50LCB0aW1lU3RhbXA6IGUuY29vcmRzLmN1ci50aW1lU3RhbXAgfSA6IGUuY29vcmRzLmN1cjsgcmV0dXJuIHMucGFnZSA9ICgwLCB6bi5kZWZhdWx0KSh7fSwgZy5wYWdlKSwgcy5jbGllbnQgPSAoMCwgem4uZGVmYXVsdCkoe30sIGcuY2xpZW50KSwgcy5yZWN0ID0gKDAsIHpuLmRlZmF1bHQpKHt9LCBlLnJlY3QpLCBzLnRpbWVTdGFtcCA9IGcudGltZVN0YW1wLCB5IHx8IChzLnBhZ2UueCAtPSBkLngsIHMucGFnZS55IC09IGQueSwgcy5jbGllbnQueCAtPSBkLngsIHMuY2xpZW50LnkgLT0gZC55KSwgcy5jdHJsS2V5ID0gdC5jdHJsS2V5LCBzLmFsdEtleSA9IHQuYWx0S2V5LCBzLnNoaWZ0S2V5ID0gdC5zaGlmdEtleSwgcy5tZXRhS2V5ID0gdC5tZXRhS2V5LCBzLmJ1dHRvbiA9IHQuYnV0dG9uLCBzLmJ1dHRvbnMgPSB0LmJ1dHRvbnMsIHMudGFyZ2V0ID0gbywgcy5jdXJyZW50VGFyZ2V0ID0gbywgcy5yZWxhdGVkVGFyZ2V0ID0gaSB8fCBudWxsLCBzLnByZUVuZCA9IGEsIHMudHlwZSA9IHUgfHwgbiArIChyIHx8IFwiXCIpLCBzLmludGVyYWN0YWJsZSA9IGYsIHMudDAgPSB2ID8gZS5wb2ludGVyc1tlLnBvaW50ZXJzLmxlbmd0aCAtIDFdLmRvd25UaW1lIDogbS50MCwgcy54MCA9IGUuY29vcmRzLnN0YXJ0LnBhZ2UueCAtIGQueCwgcy55MCA9IGUuY29vcmRzLnN0YXJ0LnBhZ2UueSAtIGQueSwgcy5jbGllbnRYMCA9IGUuY29vcmRzLnN0YXJ0LmNsaWVudC54IC0gZC54LCBzLmNsaWVudFkwID0gZS5jb29yZHMuc3RhcnQuY2xpZW50LnkgLSBkLnksIHMuZGVsdGEgPSB2IHx8IHkgPyB7IHg6IDAsIHk6IDAgfSA6IHsgeDogc1twXS54IC0gbVtwXS54LCB5OiBzW3BdLnkgLSBtW3BdLnkgfSwgcy5kdCA9IGUuY29vcmRzLmRlbHRhLnRpbWVTdGFtcCwgcy5kdXJhdGlvbiA9IHMudGltZVN0YW1wIC0gcy50MCwgcy52ZWxvY2l0eSA9ICgwLCB6bi5kZWZhdWx0KSh7fSwgZS5jb29yZHMudmVsb2NpdHlbcF0pLCBzLnNwZWVkID0gKDAsIFJuLmRlZmF1bHQpKHMudmVsb2NpdHkueCwgcy52ZWxvY2l0eS55KSwgcy5zd2lwZSA9IHkgfHwgXCJpbmVydGlhc3RhcnRcIiA9PT0gciA/IHMuZ2V0U3dpcGUoKSA6IG51bGwsIHM7IH0gdmFyIGUsIHQ7IHJldHVybiBmdW5jdGlvbiAoZSwgdCkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0ICYmIG51bGwgIT09IHQpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQgJiYgdC5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IGUsIHdyaXRhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCB9IH0pLCB0ICYmIFZuKGUsIHQpOyB9KGgsIFduW1wiZGVmYXVsdFwiXSksIGUgPSBoLCAodCA9IFt7IGtleTogXCJnZXRTd2lwZVwiLCB2YWx1ZTogZnVuY3Rpb24gKCkgeyB2YXIgZSA9IHRoaXMuX2ludGVyYWN0aW9uOyBpZiAoZS5wcmV2RXZlbnQuc3BlZWQgPCA2MDAgfHwgMTUwIDwgdGhpcy50aW1lU3RhbXAgLSBlLnByZXZFdmVudC50aW1lU3RhbXApXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7IHZhciB0ID0gMTgwICogTWF0aC5hdGFuMihlLnByZXZFdmVudC52ZWxvY2l0eVksIGUucHJldkV2ZW50LnZlbG9jaXR5WCkgLyBNYXRoLlBJOyB0IDwgMCAmJiAodCArPSAzNjApOyB2YXIgbiA9IDExMi41IDw9IHQgJiYgdCA8IDI0Ny41LCByID0gMjAyLjUgPD0gdCAmJiB0IDwgMzM3LjU7IHJldHVybiB7IHVwOiByLCBkb3duOiAhciAmJiAyMi41IDw9IHQgJiYgdCA8IDE1Ny41LCBsZWZ0OiBuLCByaWdodDogIW4gJiYgKDI5Mi41IDw9IHQgfHwgdCA8IDY3LjUpLCBhbmdsZTogdCwgc3BlZWQ6IGUucHJldkV2ZW50LnNwZWVkLCB2ZWxvY2l0eTogeyB4OiBlLnByZXZFdmVudC52ZWxvY2l0eVgsIHk6IGUucHJldkV2ZW50LnZlbG9jaXR5WSB9IH07IH0gfSwgeyBrZXk6IFwicHJldmVudERlZmF1bHRcIiwgdmFsdWU6IGZ1bmN0aW9uICgpIHsgfSB9LCB7IGtleTogXCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25cIiwgdmFsdWU6IGZ1bmN0aW9uICgpIHsgdGhpcy5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSB0aGlzLnByb3BhZ2F0aW9uU3RvcHBlZCA9ICEwOyB9IH0sIHsga2V5OiBcInN0b3BQcm9wYWdhdGlvblwiLCB2YWx1ZTogZnVuY3Rpb24gKCkgeyB0aGlzLnByb3BhZ2F0aW9uU3RvcHBlZCA9ICEwOyB9IH0sIHsga2V5OiBcInBhZ2VYXCIsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5wYWdlLng7IH0sIHNldDogZnVuY3Rpb24gKGUpIHsgdGhpcy5wYWdlLnggPSBlOyB9IH0sIHsga2V5OiBcInBhZ2VZXCIsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5wYWdlLnk7IH0sIHNldDogZnVuY3Rpb24gKGUpIHsgdGhpcy5wYWdlLnkgPSBlOyB9IH0sIHsga2V5OiBcImNsaWVudFhcIiwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmNsaWVudC54OyB9LCBzZXQ6IGZ1bmN0aW9uIChlKSB7IHRoaXMuY2xpZW50LnggPSBlOyB9IH0sIHsga2V5OiBcImNsaWVudFlcIiwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmNsaWVudC55OyB9LCBzZXQ6IGZ1bmN0aW9uIChlKSB7IHRoaXMuY2xpZW50LnkgPSBlOyB9IH0sIHsga2V5OiBcImR4XCIsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5kZWx0YS54OyB9LCBzZXQ6IGZ1bmN0aW9uIChlKSB7IHRoaXMuZGVsdGEueCA9IGU7IH0gfSwgeyBrZXk6IFwiZHlcIiwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmRlbHRhLnk7IH0sIHNldDogZnVuY3Rpb24gKGUpIHsgdGhpcy5kZWx0YS55ID0gZTsgfSB9LCB7IGtleTogXCJ2ZWxvY2l0eVhcIiwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnZlbG9jaXR5Lng7IH0sIHNldDogZnVuY3Rpb24gKGUpIHsgdGhpcy52ZWxvY2l0eS54ID0gZTsgfSB9LCB7IGtleTogXCJ2ZWxvY2l0eVlcIiwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnZlbG9jaXR5Lnk7IH0sIHNldDogZnVuY3Rpb24gKGUpIHsgdGhpcy52ZWxvY2l0eS55ID0gZTsgfSB9XSkgJiYgRm4oZS5wcm90b3R5cGUsIHQpLCBoOyB9KCksIEJuID0gVG4uSW50ZXJhY3RFdmVudCA9IFVuOyBUbi5kZWZhdWx0ID0gQm47IHZhciBIbiA9IHt9OyBPYmplY3QuZGVmaW5lUHJvcGVydHkoSG4sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgSG4uZGVmYXVsdCA9IEhuLlBvaW50ZXJJbmZvID0gdm9pZCAwOyBmdW5jdGlvbiBLbihlLCB0LCBuLCByLCBvKSB7ICFmdW5jdGlvbiAoZSwgdCkgeyBpZiAoIShlIGluc3RhbmNlb2YgdCkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0odGhpcywgS24pLCB0aGlzLmlkID0gZSwgdGhpcy5wb2ludGVyID0gdCwgdGhpcy5ldmVudCA9IG4sIHRoaXMuZG93blRpbWUgPSByLCB0aGlzLmRvd25UYXJnZXQgPSBvOyB9IHZhciAkbiA9IEhuLlBvaW50ZXJJbmZvID0gS247IEhuLmRlZmF1bHQgPSAkbjsgdmFyIFFuID0ge307IGZ1bmN0aW9uIFpuKGUpIHsgcmV0dXJuIChabiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoUW4sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgUW4uZGVmYXVsdCA9IHZvaWQgMDsgdmFyIEpuID0gZnVuY3Rpb24gKGUpIHsgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKVxuICAgICAgICByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPT0gWm4oZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKVxuICAgICAgICByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gZXIoKTsgaWYgKHQgJiYgdC5oYXMoZSkpXG4gICAgICAgIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7fSwgciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBvIGluIGUpXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykpIHtcbiAgICAgICAgICAgIHZhciBpID0gciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBudWxsO1xuICAgICAgICAgICAgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIG8sIGkpIDogbltvXSA9IGVbb107XG4gICAgICAgIH0gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKTsgcmV0dXJuIG47IH0oQyk7IGZ1bmN0aW9uIGVyKCkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKVxuICAgICAgICByZXR1cm4gbnVsbDsgdmFyIGUgPSBuZXcgV2Vha01hcDsgcmV0dXJuIGVyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZTsgfSwgZTsgfSB2YXIgdHIgPSB7IG1ldGhvZE9yZGVyOiBbXCJzaW11bGF0aW9uUmVzdW1lXCIsIFwibW91c2VPclBlblwiLCBcImhhc1BvaW50ZXJcIiwgXCJpZGxlXCJdLCBzZWFyY2g6IGZ1bmN0aW9uIChlKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgdHIubWV0aG9kT3JkZXIubGVuZ3RoOyB0KyspIHtcbiAgICAgICAgICAgIHZhciBuO1xuICAgICAgICAgICAgbiA9IHRyLm1ldGhvZE9yZGVyW3RdO1xuICAgICAgICAgICAgdmFyIHIgPSB0cltuXShlKTtcbiAgICAgICAgICAgIGlmIChyKVxuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9IHJldHVybiBudWxsOyB9LCBzaW11bGF0aW9uUmVzdW1lOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUucG9pbnRlclR5cGUsIG4gPSBlLmV2ZW50VHlwZSwgciA9IGUuZXZlbnRUYXJnZXQsIG8gPSBlLnNjb3BlOyBpZiAoIS9kb3dufHN0YXJ0L2kudGVzdChuKSlcbiAgICAgICAgICAgIHJldHVybiBudWxsOyBmb3IgKHZhciBpID0gMDsgaSA8IG8uaW50ZXJhY3Rpb25zLmxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhID0gby5pbnRlcmFjdGlvbnMubGlzdFtpXSwgdSA9IHI7XG4gICAgICAgICAgICBpZiAoYS5zaW11bGF0aW9uICYmIGEuc2ltdWxhdGlvbi5hbGxvd1Jlc3VtZSAmJiBhLnBvaW50ZXJUeXBlID09PSB0KVxuICAgICAgICAgICAgICAgIGZvciAoOyB1Oykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gYS5lbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgICAgIHUgPSBKbi5wYXJlbnROb2RlKHUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfSByZXR1cm4gbnVsbDsgfSwgbW91c2VPclBlbjogZnVuY3Rpb24gKGUpIHsgdmFyIHQsIG4gPSBlLnBvaW50ZXJJZCwgciA9IGUucG9pbnRlclR5cGUsIG8gPSBlLmV2ZW50VHlwZSwgaSA9IGUuc2NvcGU7IGlmIChcIm1vdXNlXCIgIT09IHIgJiYgXCJwZW5cIiAhPT0gcilcbiAgICAgICAgICAgIHJldHVybiBudWxsOyBmb3IgKHZhciBhID0gMDsgYSA8IGkuaW50ZXJhY3Rpb25zLmxpc3QubGVuZ3RoOyBhKyspIHtcbiAgICAgICAgICAgIHZhciB1ID0gaS5pbnRlcmFjdGlvbnMubGlzdFthXTtcbiAgICAgICAgICAgIGlmICh1LnBvaW50ZXJUeXBlID09PSByKSB7XG4gICAgICAgICAgICAgICAgaWYgKHUuc2ltdWxhdGlvbiAmJiAhbnIodSwgbikpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmICh1LmludGVyYWN0aW5nKCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1O1xuICAgICAgICAgICAgICAgIHQgPSB0IHx8IHU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gaWYgKHQpXG4gICAgICAgICAgICByZXR1cm4gdDsgZm9yICh2YXIgcyA9IDA7IHMgPCBpLmludGVyYWN0aW9ucy5saXN0Lmxlbmd0aDsgcysrKSB7XG4gICAgICAgICAgICB2YXIgbCA9IGkuaW50ZXJhY3Rpb25zLmxpc3Rbc107XG4gICAgICAgICAgICBpZiAoIShsLnBvaW50ZXJUeXBlICE9PSByIHx8IC9kb3duL2kudGVzdChvKSAmJiBsLnNpbXVsYXRpb24pKVxuICAgICAgICAgICAgICAgIHJldHVybiBsO1xuICAgICAgICB9IHJldHVybiBudWxsOyB9LCBoYXNQb2ludGVyOiBmdW5jdGlvbiAoZSkgeyBmb3IgKHZhciB0ID0gZS5wb2ludGVySWQsIG4gPSBlLnNjb3BlLCByID0gMDsgciA8IG4uaW50ZXJhY3Rpb25zLmxpc3QubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgIHZhciBvID0gbi5pbnRlcmFjdGlvbnMubGlzdFtyXTtcbiAgICAgICAgICAgIGlmIChucihvLCB0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgfSByZXR1cm4gbnVsbDsgfSwgaWRsZTogZnVuY3Rpb24gKGUpIHsgZm9yICh2YXIgdCA9IGUucG9pbnRlclR5cGUsIG4gPSBlLnNjb3BlLCByID0gMDsgciA8IG4uaW50ZXJhY3Rpb25zLmxpc3QubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgIHZhciBvID0gbi5pbnRlcmFjdGlvbnMubGlzdFtyXTtcbiAgICAgICAgICAgIGlmICgxID09PSBvLnBvaW50ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gby5pbnRlcmFjdGFibGU7XG4gICAgICAgICAgICAgICAgaWYgKGkgJiYgKCFpLm9wdGlvbnMuZ2VzdHVyZSB8fCAhaS5vcHRpb25zLmdlc3R1cmUuZW5hYmxlZCkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoMiA8PSBvLnBvaW50ZXJzLmxlbmd0aClcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGlmICghby5pbnRlcmFjdGluZygpICYmIHQgPT09IG8ucG9pbnRlclR5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgIH0gcmV0dXJuIG51bGw7IH0gfTsgZnVuY3Rpb24gbnIoZSwgdCkgeyByZXR1cm4gZS5wb2ludGVycy5zb21lKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmlkID09PSB0OyB9KTsgfSB2YXIgcnIgPSB0cjsgUW4uZGVmYXVsdCA9IHJyOyB2YXIgb3IgPSB7fTsgZnVuY3Rpb24gaXIoZSkgeyByZXR1cm4gKGlyID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHR5cGVvZiBlOyB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7IH0pKGUpOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvciwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBvci5kZWZhdWx0ID0gdm9pZCAwOyB2YXIgYXIgPSBPKHt9KSwgdXIgPSBjcih1KSwgc3IgPSBjcih5KTsgZnVuY3Rpb24gbHIoKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgZSA9IG5ldyBXZWFrTWFwOyByZXR1cm4gbHIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlOyB9LCBlOyB9IGZ1bmN0aW9uIGNyKGUpIHsgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKVxuICAgICAgICByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPT0gaXIoZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKVxuICAgICAgICByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gbHIoKTsgaWYgKHQgJiYgdC5oYXMoZSkpXG4gICAgICAgIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7fSwgciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBvIGluIGUpXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykpIHtcbiAgICAgICAgICAgIHZhciBpID0gciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBudWxsO1xuICAgICAgICAgICAgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIG8sIGkpIDogbltvXSA9IGVbb107XG4gICAgICAgIH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH0gZnVuY3Rpb24gZnIoZSkgeyB2YXIgdCA9IGUuaW50ZXJhY3Rpb247IGlmIChcImRyYWdcIiA9PT0gdC5wcmVwYXJlZC5uYW1lKSB7XG4gICAgICAgIHZhciBuID0gdC5wcmVwYXJlZC5heGlzO1xuICAgICAgICBcInhcIiA9PT0gbiA/ICh0LmNvb3Jkcy5jdXIucGFnZS55ID0gdC5jb29yZHMuc3RhcnQucGFnZS55LCB0LmNvb3Jkcy5jdXIuY2xpZW50LnkgPSB0LmNvb3Jkcy5zdGFydC5jbGllbnQueSwgdC5jb29yZHMudmVsb2NpdHkuY2xpZW50LnkgPSAwLCB0LmNvb3Jkcy52ZWxvY2l0eS5wYWdlLnkgPSAwKSA6IFwieVwiID09PSBuICYmICh0LmNvb3Jkcy5jdXIucGFnZS54ID0gdC5jb29yZHMuc3RhcnQucGFnZS54LCB0LmNvb3Jkcy5jdXIuY2xpZW50LnggPSB0LmNvb3Jkcy5zdGFydC5jbGllbnQueCwgdC5jb29yZHMudmVsb2NpdHkuY2xpZW50LnggPSAwLCB0LmNvb3Jkcy52ZWxvY2l0eS5wYWdlLnggPSAwKTtcbiAgICB9IH0gZnVuY3Rpb24gcHIoZSkgeyB2YXIgdCA9IGUuaUV2ZW50LCBuID0gZS5pbnRlcmFjdGlvbjsgaWYgKFwiZHJhZ1wiID09PSBuLnByZXBhcmVkLm5hbWUpIHtcbiAgICAgICAgdmFyIHIgPSBuLnByZXBhcmVkLmF4aXM7XG4gICAgICAgIGlmIChcInhcIiA9PT0gciB8fCBcInlcIiA9PT0gcikge1xuICAgICAgICAgICAgdmFyIG8gPSBcInhcIiA9PT0gciA/IFwieVwiIDogXCJ4XCI7XG4gICAgICAgICAgICB0LnBhZ2Vbb10gPSBuLmNvb3Jkcy5zdGFydC5wYWdlW29dLCB0LmNsaWVudFtvXSA9IG4uY29vcmRzLnN0YXJ0LmNsaWVudFtvXSwgdC5kZWx0YVtvXSA9IDA7XG4gICAgICAgIH1cbiAgICB9IH0gYXIuQWN0aW9uTmFtZS5EcmFnID0gXCJkcmFnXCI7IHZhciBkciA9IHsgaWQ6IFwiYWN0aW9ucy9kcmFnXCIsIGluc3RhbGw6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5hY3Rpb25zLCBuID0gZS5JbnRlcmFjdGFibGUsIHIgPSBlLmRlZmF1bHRzOyBuLnByb3RvdHlwZS5kcmFnZ2FibGUgPSBkci5kcmFnZ2FibGUsIHRbYXIuQWN0aW9uTmFtZS5EcmFnXSA9IGRyLCB0Lm5hbWVzLnB1c2goYXIuQWN0aW9uTmFtZS5EcmFnKSwgdXIubWVyZ2UodC5ldmVudFR5cGVzLCBbXCJkcmFnc3RhcnRcIiwgXCJkcmFnbW92ZVwiLCBcImRyYWdpbmVydGlhc3RhcnRcIiwgXCJkcmFncmVzdW1lXCIsIFwiZHJhZ2VuZFwiXSksIHQubWV0aG9kRGljdC5kcmFnID0gXCJkcmFnZ2FibGVcIiwgci5hY3Rpb25zLmRyYWcgPSBkci5kZWZhdWx0czsgfSwgbGlzdGVuZXJzOiB7IFwiaW50ZXJhY3Rpb25zOmJlZm9yZS1hY3Rpb24tbW92ZVwiOiBmciwgXCJpbnRlcmFjdGlvbnM6YWN0aW9uLXJlc3VtZVwiOiBmciwgXCJpbnRlcmFjdGlvbnM6YWN0aW9uLW1vdmVcIjogcHIsIFwiYXV0by1zdGFydDpjaGVja1wiOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuaW50ZXJhY3Rpb24sIG4gPSBlLmludGVyYWN0YWJsZSwgciA9IGUuYnV0dG9ucywgbyA9IG4ub3B0aW9ucy5kcmFnOyBpZiAobyAmJiBvLmVuYWJsZWQgJiYgKCF0LnBvaW50ZXJJc0Rvd24gfHwgIS9tb3VzZXxwb2ludGVyLy50ZXN0KHQucG9pbnRlclR5cGUpIHx8IDAgIT0gKHIgJiBuLm9wdGlvbnMuZHJhZy5tb3VzZUJ1dHRvbnMpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gIShlLmFjdGlvbiA9IHsgbmFtZTogYXIuQWN0aW9uTmFtZS5EcmFnLCBheGlzOiBcInN0YXJ0XCIgPT09IG8ubG9ja0F4aXMgPyBvLnN0YXJ0QXhpcyA6IG8ubG9ja0F4aXMgfSk7IH0gfSwgZHJhZ2dhYmxlOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gc3Iub2JqZWN0KGUpID8gKHRoaXMub3B0aW9ucy5kcmFnLmVuYWJsZWQgPSAhMSAhPT0gZS5lbmFibGVkLCB0aGlzLnNldFBlckFjdGlvbihhci5BY3Rpb25OYW1lLkRyYWcsIGUpLCB0aGlzLnNldE9uRXZlbnRzKGFyLkFjdGlvbk5hbWUuRHJhZywgZSksIC9eKHh5fHh8eXxzdGFydCkkLy50ZXN0KGUubG9ja0F4aXMpICYmICh0aGlzLm9wdGlvbnMuZHJhZy5sb2NrQXhpcyA9IGUubG9ja0F4aXMpLCAvXih4eXx4fHkpJC8udGVzdChlLnN0YXJ0QXhpcykgJiYgKHRoaXMub3B0aW9ucy5kcmFnLnN0YXJ0QXhpcyA9IGUuc3RhcnRBeGlzKSwgdGhpcykgOiBzci5ib29sKGUpID8gKHRoaXMub3B0aW9ucy5kcmFnLmVuYWJsZWQgPSBlLCB0aGlzKSA6IHRoaXMub3B0aW9ucy5kcmFnOyB9LCBiZWZvcmVNb3ZlOiBmciwgbW92ZTogcHIsIGRlZmF1bHRzOiB7IHN0YXJ0QXhpczogXCJ4eVwiLCBsb2NrQXhpczogXCJ4eVwiIH0sIGdldEN1cnNvcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJtb3ZlXCI7IH0gfSwgdnIgPSBkcjsgb3IuZGVmYXVsdCA9IHZyOyB2YXIgeXIgPSB7fTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHlyLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIHlyLmRlZmF1bHQgPSB2b2lkIDA7IHZhciBtciwgZ3IgPSAobXIgPSBTbikgJiYgbXIuX19lc01vZHVsZSA/IG1yIDogeyBkZWZhdWx0OiBtciB9LCBociA9IGZ1bmN0aW9uIChlKSB7IGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICAgICAgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT09IE9yKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IGJyKCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbik7IHJldHVybiBuOyB9KHUpOyBmdW5jdGlvbiBicigpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBiciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24gT3IoZSkgeyByZXR1cm4gKE9yID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHR5cGVvZiBlOyB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7IH0pKGUpOyB9IGZ1bmN0aW9uIHdyKGUsIHQpIHsgZm9yICh2YXIgbiA9IDA7IG4gPCB0Lmxlbmd0aDsgbisrKSB7XG4gICAgICAgIHZhciByID0gdFtuXTtcbiAgICAgICAgci5lbnVtZXJhYmxlID0gci5lbnVtZXJhYmxlIHx8ICExLCByLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gciAmJiAoci53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIua2V5LCByKTtcbiAgICB9IH0gZnVuY3Rpb24gUHIoZSkgeyByZXR1cm4gKFByID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihlKTsgfSkoZSk7IH0gZnVuY3Rpb24gX3IoZSkgeyBpZiAodm9pZCAwID09PSBlKVxuICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IHJldHVybiBlOyB9IGZ1bmN0aW9uIHhyKGUsIHQpIHsgcmV0dXJuICh4ciA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gZS5fX3Byb3RvX18gPSB0LCBlOyB9KShlLCB0KTsgfSBmdW5jdGlvbiBTcihlLCB0LCBuKSB7IHJldHVybiB0IGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgdCwgeyB2YWx1ZTogbiwgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCB9KSA6IGVbdF0gPSBuLCBlOyB9IHZhciBqciA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gbChlLCB0LCBuKSB7IHZhciByLCBvLCBpOyAhZnVuY3Rpb24gKGUsIHQpIHsgaWYgKCEoZSBpbnN0YW5jZW9mIHQpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9KHRoaXMsIGwpLCBvID0gdGhpcywgciA9ICEoaSA9IFByKGwpLmNhbGwodGhpcywgdC5faW50ZXJhY3Rpb24pKSB8fCBcIm9iamVjdFwiICE9PSBPcihpKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGkgPyBfcihvKSA6IGksIFNyKF9yKHIpLCBcInRhcmdldFwiLCB2b2lkIDApLCBTcihfcihyKSwgXCJkcm9wem9uZVwiLCB2b2lkIDApLCBTcihfcihyKSwgXCJkcmFnRXZlbnRcIiwgdm9pZCAwKSwgU3IoX3IociksIFwicmVsYXRlZFRhcmdldFwiLCB2b2lkIDApLCBTcihfcihyKSwgXCJkcmFnZ2FibGVcIiwgdm9pZCAwKSwgU3IoX3IociksIFwidGltZVN0YW1wXCIsIHZvaWQgMCksIFNyKF9yKHIpLCBcInByb3BhZ2F0aW9uU3RvcHBlZFwiLCAhMSksIFNyKF9yKHIpLCBcImltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZFwiLCAhMSk7IHZhciBhID0gXCJkcmFnbGVhdmVcIiA9PT0gbiA/IGUucHJldiA6IGUuY3VyLCB1ID0gYS5lbGVtZW50LCBzID0gYS5kcm9wem9uZTsgcmV0dXJuIHIudHlwZSA9IG4sIHIudGFyZ2V0ID0gdSwgci5jdXJyZW50VGFyZ2V0ID0gdSwgci5kcm9wem9uZSA9IHMsIHIuZHJhZ0V2ZW50ID0gdCwgci5yZWxhdGVkVGFyZ2V0ID0gdC50YXJnZXQsIHIuZHJhZ2dhYmxlID0gdC5pbnRlcmFjdGFibGUsIHIudGltZVN0YW1wID0gdC50aW1lU3RhbXAsIHI7IH0gdmFyIGUsIHQ7IHJldHVybiBmdW5jdGlvbiAoZSwgdCkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0ICYmIG51bGwgIT09IHQpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHQgJiYgdC5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IGUsIHdyaXRhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCB9IH0pLCB0ICYmIHhyKGUsIHQpOyB9KGwsIGdyW1wiZGVmYXVsdFwiXSksIGUgPSBsLCAodCA9IFt7IGtleTogXCJyZWplY3RcIiwgdmFsdWU6IGZ1bmN0aW9uICgpIHsgdmFyIHIgPSB0aGlzLCBlID0gdGhpcy5faW50ZXJhY3Rpb24uZHJvcFN0YXRlOyBpZiAoXCJkcm9wYWN0aXZhdGVcIiA9PT0gdGhpcy50eXBlIHx8IHRoaXMuZHJvcHpvbmUgJiYgZS5jdXIuZHJvcHpvbmUgPT09IHRoaXMuZHJvcHpvbmUgJiYgZS5jdXIuZWxlbWVudCA9PT0gdGhpcy50YXJnZXQpXG4gICAgICAgICAgICAgICAgaWYgKGUucHJldi5kcm9wem9uZSA9IHRoaXMuZHJvcHpvbmUsIGUucHJldi5lbGVtZW50ID0gdGhpcy50YXJnZXQsIGUucmVqZWN0ZWQgPSAhMCwgZS5ldmVudHMuZW50ZXIgPSBudWxsLCB0aGlzLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCBcImRyb3BhY3RpdmF0ZVwiID09PSB0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBlLmFjdGl2ZURyb3BzLCBuID0gaHIuZmluZEluZGV4KHQsIGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5kcm9wem9uZSwgbiA9IGUuZWxlbWVudDsgcmV0dXJuIHQgPT09IHIuZHJvcHpvbmUgJiYgbiA9PT0gci50YXJnZXQ7IH0pO1xuICAgICAgICAgICAgICAgICAgICBlLmFjdGl2ZURyb3BzLnNwbGljZShuLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBuZXcgbChlLCB0aGlzLmRyYWdFdmVudCwgXCJkcm9wZGVhY3RpdmF0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgby5kcm9wem9uZSA9IHRoaXMuZHJvcHpvbmUsIG8udGFyZ2V0ID0gdGhpcy50YXJnZXQsIHRoaXMuZHJvcHpvbmUuZmlyZShvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3B6b25lLmZpcmUobmV3IGwoZSwgdGhpcy5kcmFnRXZlbnQsIFwiZHJhZ2xlYXZlXCIpKTsgfSB9LCB7IGtleTogXCJwcmV2ZW50RGVmYXVsdFwiLCB2YWx1ZTogZnVuY3Rpb24gKCkgeyB9IH0sIHsga2V5OiBcInN0b3BQcm9wYWdhdGlvblwiLCB2YWx1ZTogZnVuY3Rpb24gKCkgeyB0aGlzLnByb3BhZ2F0aW9uU3RvcHBlZCA9ICEwOyB9IH0sIHsga2V5OiBcInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvblwiLCB2YWx1ZTogZnVuY3Rpb24gKCkgeyB0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHRoaXMucHJvcGFnYXRpb25TdG9wcGVkID0gITA7IH0gfV0pICYmIHdyKGUucHJvdG90eXBlLCB0KSwgbDsgfSgpOyB5ci5kZWZhdWx0ID0ganI7IHZhciBNciA9IHt9OyBmdW5jdGlvbiBFcihlKSB7IHJldHVybiAoRXIgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdHlwZW9mIGU7IH0gOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBlLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgZSAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgZTsgfSkoZSk7IH0gT2JqZWN0LmRlZmluZVByb3BlcnR5KE1yLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIE1yLmRlZmF1bHQgPSB2b2lkIDA7IHZhciBrciA9IE8oe30pLCBEciA9IGZ1bmN0aW9uIChlKSB7IGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICAgICAgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT09IEVyKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IEFyKCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbik7IHJldHVybiBuOyB9KHB0KSwgVHIgPSB6cihvciksIElyID0genIoeXIpOyBmdW5jdGlvbiBBcigpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBBciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24genIoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBkZWZhdWx0OiBlIH07IH0gZnVuY3Rpb24gQ3IoZSwgdCkgeyBmb3IgKHZhciBuID0gMDsgbiA8IGUuc2xpY2UoKS5sZW5ndGg7IG4rKykge1xuICAgICAgICB2YXIgciA9IGUuc2xpY2UoKVtuXSwgbyA9IHIuZHJvcHpvbmUsIGkgPSByLmVsZW1lbnQ7XG4gICAgICAgIHQuZHJvcHpvbmUgPSBvLCB0LnRhcmdldCA9IGksIG8uZmlyZSh0KSwgdC5wcm9wYWdhdGlvblN0b3BwZWQgPSB0LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9ICExO1xuICAgIH0gfSBmdW5jdGlvbiBScihlLCB0KSB7IGZvciAodmFyIG4gPSBmdW5jdGlvbiAoZSwgdCkgeyBmb3IgKHZhciBuID0gZS5pbnRlcmFjdGFibGVzLCByID0gW10sIG8gPSAwOyBvIDwgbi5saXN0Lmxlbmd0aDsgbysrKSB7XG4gICAgICAgIHZhciBpID0gbi5saXN0W29dO1xuICAgICAgICBpZiAoaS5vcHRpb25zLmRyb3AuZW5hYmxlZCkge1xuICAgICAgICAgICAgdmFyIGEgPSBpLm9wdGlvbnMuZHJvcC5hY2NlcHQ7XG4gICAgICAgICAgICBpZiAoIShEci5pcy5lbGVtZW50KGEpICYmIGEgIT09IHQgfHwgRHIuaXMuc3RyaW5nKGEpICYmICFEci5kb20ubWF0Y2hlc1NlbGVjdG9yKHQsIGEpIHx8IERyLmlzLmZ1bmMoYSkgJiYgIWEoeyBkcm9wem9uZTogaSwgZHJhZ2dhYmxlRWxlbWVudDogdCB9KSkpXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdSA9IERyLmlzLnN0cmluZyhpLnRhcmdldCkgPyBpLl9jb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoaS50YXJnZXQpIDogRHIuaXMuYXJyYXkoaS50YXJnZXQpID8gaS50YXJnZXQgOiBbaS50YXJnZXRdLCBzID0gMDsgcyA8IHUubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSB1W3NdO1xuICAgICAgICAgICAgICAgICAgICBsICE9PSB0ICYmIHIucHVzaCh7IGRyb3B6b25lOiBpLCBlbGVtZW50OiBsIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gcmV0dXJuIHI7IH0oZSwgdCksIHIgPSAwOyByIDwgbi5sZW5ndGg7IHIrKykge1xuICAgICAgICB2YXIgbyA9IG5bcl07XG4gICAgICAgIG8ucmVjdCA9IG8uZHJvcHpvbmUuZ2V0UmVjdChvLmVsZW1lbnQpO1xuICAgIH0gcmV0dXJuIG47IH0gZnVuY3Rpb24gV3IoZSwgdCwgbikgeyBmb3IgKHZhciByID0gZS5kcm9wU3RhdGUsIG8gPSBlLmludGVyYWN0YWJsZSwgaSA9IGUuZWxlbWVudCwgYSA9IFtdLCB1ID0gMDsgdSA8IHIuYWN0aXZlRHJvcHMubGVuZ3RoOyB1KyspIHtcbiAgICAgICAgdmFyIHMgPSByLmFjdGl2ZURyb3BzW3VdLCBsID0gcy5kcm9wem9uZSwgYyA9IHMuZWxlbWVudCwgZiA9IHMucmVjdDtcbiAgICAgICAgYS5wdXNoKGwuZHJvcENoZWNrKHQsIG4sIG8sIGksIGMsIGYpID8gYyA6IG51bGwpO1xuICAgIH0gdmFyIHAgPSBEci5kb20uaW5kZXhPZkRlZXBlc3RFbGVtZW50KGEpOyByZXR1cm4gci5hY3RpdmVEcm9wc1twXSB8fCBudWxsOyB9IGZ1bmN0aW9uIFhyKGUsIHQsIG4pIHsgdmFyIHIgPSBlLmRyb3BTdGF0ZSwgbyA9IHsgZW50ZXI6IG51bGwsIGxlYXZlOiBudWxsLCBhY3RpdmF0ZTogbnVsbCwgZGVhY3RpdmF0ZTogbnVsbCwgbW92ZTogbnVsbCwgZHJvcDogbnVsbCB9OyByZXR1cm4gXCJkcmFnc3RhcnRcIiA9PT0gbi50eXBlICYmIChvLmFjdGl2YXRlID0gbmV3IElyLmRlZmF1bHQociwgbiwgXCJkcm9wYWN0aXZhdGVcIiksIG8uYWN0aXZhdGUudGFyZ2V0ID0gbnVsbCwgby5hY3RpdmF0ZS5kcm9wem9uZSA9IG51bGwpLCBcImRyYWdlbmRcIiA9PT0gbi50eXBlICYmIChvLmRlYWN0aXZhdGUgPSBuZXcgSXIuZGVmYXVsdChyLCBuLCBcImRyb3BkZWFjdGl2YXRlXCIpLCBvLmRlYWN0aXZhdGUudGFyZ2V0ID0gbnVsbCwgby5kZWFjdGl2YXRlLmRyb3B6b25lID0gbnVsbCksIHIucmVqZWN0ZWQgfHwgKHIuY3VyLmVsZW1lbnQgIT09IHIucHJldi5lbGVtZW50ICYmIChyLnByZXYuZHJvcHpvbmUgJiYgKG8ubGVhdmUgPSBuZXcgSXIuZGVmYXVsdChyLCBuLCBcImRyYWdsZWF2ZVwiKSwgbi5kcmFnTGVhdmUgPSBvLmxlYXZlLnRhcmdldCA9IHIucHJldi5lbGVtZW50LCBuLnByZXZEcm9wem9uZSA9IG8ubGVhdmUuZHJvcHpvbmUgPSByLnByZXYuZHJvcHpvbmUpLCByLmN1ci5kcm9wem9uZSAmJiAoby5lbnRlciA9IG5ldyBJci5kZWZhdWx0KHIsIG4sIFwiZHJhZ2VudGVyXCIpLCBuLmRyYWdFbnRlciA9IHIuY3VyLmVsZW1lbnQsIG4uZHJvcHpvbmUgPSByLmN1ci5kcm9wem9uZSkpLCBcImRyYWdlbmRcIiA9PT0gbi50eXBlICYmIHIuY3VyLmRyb3B6b25lICYmIChvLmRyb3AgPSBuZXcgSXIuZGVmYXVsdChyLCBuLCBcImRyb3BcIiksIG4uZHJvcHpvbmUgPSByLmN1ci5kcm9wem9uZSwgbi5yZWxhdGVkVGFyZ2V0ID0gci5jdXIuZWxlbWVudCksIFwiZHJhZ21vdmVcIiA9PT0gbi50eXBlICYmIHIuY3VyLmRyb3B6b25lICYmIChvLm1vdmUgPSBuZXcgSXIuZGVmYXVsdChyLCBuLCBcImRyb3Btb3ZlXCIpLCAoby5tb3ZlLmRyYWdtb3ZlID0gbikuZHJvcHpvbmUgPSByLmN1ci5kcm9wem9uZSkpLCBvOyB9IGZ1bmN0aW9uIE5yKGUsIHQpIHsgdmFyIG4gPSBlLmRyb3BTdGF0ZSwgciA9IG4uYWN0aXZlRHJvcHMsIG8gPSBuLmN1ciwgaSA9IG4ucHJldjsgdC5sZWF2ZSAmJiBpLmRyb3B6b25lLmZpcmUodC5sZWF2ZSksIHQubW92ZSAmJiBvLmRyb3B6b25lLmZpcmUodC5tb3ZlKSwgdC5lbnRlciAmJiBvLmRyb3B6b25lLmZpcmUodC5lbnRlciksIHQuZHJvcCAmJiBvLmRyb3B6b25lLmZpcmUodC5kcm9wKSwgdC5kZWFjdGl2YXRlICYmIENyKHIsIHQuZGVhY3RpdmF0ZSksIG4ucHJldi5kcm9wem9uZSA9IG8uZHJvcHpvbmUsIG4ucHJldi5lbGVtZW50ID0gby5lbGVtZW50OyB9IGZ1bmN0aW9uIFlyKGUsIHQpIHsgdmFyIG4gPSBlLmludGVyYWN0aW9uLCByID0gZS5pRXZlbnQsIG8gPSBlLmV2ZW50OyBpZiAoXCJkcmFnbW92ZVwiID09PSByLnR5cGUgfHwgXCJkcmFnZW5kXCIgPT09IHIudHlwZSkge1xuICAgICAgICB2YXIgaSA9IG4uZHJvcFN0YXRlO1xuICAgICAgICB0LmR5bmFtaWNEcm9wICYmIChpLmFjdGl2ZURyb3BzID0gUnIodCwgbi5lbGVtZW50KSk7XG4gICAgICAgIHZhciBhID0gciwgdSA9IFdyKG4sIGEsIG8pO1xuICAgICAgICBpLnJlamVjdGVkID0gaS5yZWplY3RlZCAmJiAhIXUgJiYgdS5kcm9wem9uZSA9PT0gaS5jdXIuZHJvcHpvbmUgJiYgdS5lbGVtZW50ID09PSBpLmN1ci5lbGVtZW50LCBpLmN1ci5kcm9wem9uZSA9IHUgJiYgdS5kcm9wem9uZSwgaS5jdXIuZWxlbWVudCA9IHUgJiYgdS5lbGVtZW50LCBpLmV2ZW50cyA9IFhyKG4sIDAsIGEpO1xuICAgIH0gfSB2YXIgRnIgPSB7IGlkOiBcImFjdGlvbnMvZHJvcFwiLCBpbnN0YWxsOiBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHQuYWN0aW9ucywgbiA9IHQuaW50ZXJhY3QsIHIgPSB0LkludGVyYWN0YWJsZSwgbyA9IHQuZGVmYXVsdHM7IHQudXNlUGx1Z2luKFRyLmRlZmF1bHQpLCByLnByb3RvdHlwZS5kcm9wem9uZSA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBmdW5jdGlvbiAoZSwgdCkgeyBpZiAoRHIuaXMub2JqZWN0KHQpKSB7XG4gICAgICAgICAgICBpZiAoZS5vcHRpb25zLmRyb3AuZW5hYmxlZCA9ICExICE9PSB0LmVuYWJsZWQsIHQubGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSBEci5ub3JtYWxpemVMaXN0ZW5lcnModC5saXN0ZW5lcnMpLCByID0gT2JqZWN0LmtleXMobikucmVkdWNlKGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBlWy9eKGVudGVyfGxlYXZlKS8udGVzdCh0KSA/IFwiZHJhZ1wiLmNvbmNhdCh0KSA6IC9eKGFjdGl2YXRlfGRlYWN0aXZhdGV8bW92ZSkvLnRlc3QodCkgPyBcImRyb3BcIi5jb25jYXQodCkgOiB0XSA9IG5bdF0sIGU7IH0sIHt9KTtcbiAgICAgICAgICAgICAgICBlLm9mZihlLm9wdGlvbnMuZHJvcC5saXN0ZW5lcnMpLCBlLm9uKHIpLCBlLm9wdGlvbnMuZHJvcC5saXN0ZW5lcnMgPSByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIERyLmlzLmZ1bmModC5vbmRyb3ApICYmIGUub24oXCJkcm9wXCIsIHQub25kcm9wKSwgRHIuaXMuZnVuYyh0Lm9uZHJvcGFjdGl2YXRlKSAmJiBlLm9uKFwiZHJvcGFjdGl2YXRlXCIsIHQub25kcm9wYWN0aXZhdGUpLCBEci5pcy5mdW5jKHQub25kcm9wZGVhY3RpdmF0ZSkgJiYgZS5vbihcImRyb3BkZWFjdGl2YXRlXCIsIHQub25kcm9wZGVhY3RpdmF0ZSksIERyLmlzLmZ1bmModC5vbmRyYWdlbnRlcikgJiYgZS5vbihcImRyYWdlbnRlclwiLCB0Lm9uZHJhZ2VudGVyKSwgRHIuaXMuZnVuYyh0Lm9uZHJhZ2xlYXZlKSAmJiBlLm9uKFwiZHJhZ2xlYXZlXCIsIHQub25kcmFnbGVhdmUpLCBEci5pcy5mdW5jKHQub25kcm9wbW92ZSkgJiYgZS5vbihcImRyb3Btb3ZlXCIsIHQub25kcm9wbW92ZSksIC9eKHBvaW50ZXJ8Y2VudGVyKSQvLnRlc3QodC5vdmVybGFwKSA/IGUub3B0aW9ucy5kcm9wLm92ZXJsYXAgPSB0Lm92ZXJsYXAgOiBEci5pcy5udW1iZXIodC5vdmVybGFwKSAmJiAoZS5vcHRpb25zLmRyb3Aub3ZlcmxhcCA9IE1hdGgubWF4KE1hdGgubWluKDEsIHQub3ZlcmxhcCksIDApKSwgXCJhY2NlcHRcIiBpbiB0ICYmIChlLm9wdGlvbnMuZHJvcC5hY2NlcHQgPSB0LmFjY2VwdCksIFwiY2hlY2tlclwiIGluIHQgJiYgKGUub3B0aW9ucy5kcm9wLmNoZWNrZXIgPSB0LmNoZWNrZXIpLCBlO1xuICAgICAgICB9IGlmIChEci5pcy5ib29sKHQpKVxuICAgICAgICAgICAgcmV0dXJuIGUub3B0aW9ucy5kcm9wLmVuYWJsZWQgPSB0LCBlOyByZXR1cm4gZS5vcHRpb25zLmRyb3A7IH0odGhpcywgZSk7IH0sIHIucHJvdG90eXBlLmRyb3BDaGVjayA9IGZ1bmN0aW9uIChlLCB0LCBuLCByLCBvLCBpKSB7IHJldHVybiBmdW5jdGlvbiAoZSwgdCwgbiwgciwgbywgaSwgYSkgeyB2YXIgdSA9ICExOyBpZiAoIShhID0gYSB8fCBlLmdldFJlY3QoaSkpKVxuICAgICAgICAgICAgcmV0dXJuICEhZS5vcHRpb25zLmRyb3AuY2hlY2tlciAmJiBlLm9wdGlvbnMuZHJvcC5jaGVja2VyKHQsIG4sIHUsIGUsIGksIHIsIG8pOyB2YXIgcyA9IGUub3B0aW9ucy5kcm9wLm92ZXJsYXA7IGlmIChcInBvaW50ZXJcIiA9PT0gcykge1xuICAgICAgICAgICAgdmFyIGwgPSBEci5nZXRPcmlnaW5YWShyLCBvLCBrci5BY3Rpb25OYW1lLkRyYWcpLCBjID0gRHIucG9pbnRlci5nZXRQYWdlWFkodCk7XG4gICAgICAgICAgICBjLnggKz0gbC54LCBjLnkgKz0gbC55O1xuICAgICAgICAgICAgdmFyIGYgPSBjLnggPiBhLmxlZnQgJiYgYy54IDwgYS5yaWdodCwgcCA9IGMueSA+IGEudG9wICYmIGMueSA8IGEuYm90dG9tO1xuICAgICAgICAgICAgdSA9IGYgJiYgcDtcbiAgICAgICAgfSB2YXIgZCA9IHIuZ2V0UmVjdChvKTsgaWYgKGQgJiYgXCJjZW50ZXJcIiA9PT0gcykge1xuICAgICAgICAgICAgdmFyIHYgPSBkLmxlZnQgKyBkLndpZHRoIC8gMiwgeSA9IGQudG9wICsgZC5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgdSA9IHYgPj0gYS5sZWZ0ICYmIHYgPD0gYS5yaWdodCAmJiB5ID49IGEudG9wICYmIHkgPD0gYS5ib3R0b207XG4gICAgICAgIH0gaWYgKGQgJiYgRHIuaXMubnVtYmVyKHMpKSB7XG4gICAgICAgICAgICB2YXIgbSA9IE1hdGgubWF4KDAsIE1hdGgubWluKGEucmlnaHQsIGQucmlnaHQpIC0gTWF0aC5tYXgoYS5sZWZ0LCBkLmxlZnQpKSAqIE1hdGgubWF4KDAsIE1hdGgubWluKGEuYm90dG9tLCBkLmJvdHRvbSkgLSBNYXRoLm1heChhLnRvcCwgZC50b3ApKSAvIChkLndpZHRoICogZC5oZWlnaHQpO1xuICAgICAgICAgICAgdSA9IHMgPD0gbTtcbiAgICAgICAgfSBlLm9wdGlvbnMuZHJvcC5jaGVja2VyICYmICh1ID0gZS5vcHRpb25zLmRyb3AuY2hlY2tlcih0LCBuLCB1LCBlLCBpLCByLCBvKSk7IHJldHVybiB1OyB9KHRoaXMsIGUsIHQsIG4sIHIsIG8sIGkpOyB9LCBuLmR5bmFtaWNEcm9wID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIERyLmlzLmJvb2woZSkgPyAodC5keW5hbWljRHJvcCA9IGUsIG4pIDogdC5keW5hbWljRHJvcDsgfSwgRHIuYXJyLm1lcmdlKGUuZXZlbnRUeXBlcywgW1wiZHJhZ2VudGVyXCIsIFwiZHJhZ2xlYXZlXCIsIFwiZHJvcGFjdGl2YXRlXCIsIFwiZHJvcGRlYWN0aXZhdGVcIiwgXCJkcm9wbW92ZVwiLCBcImRyb3BcIl0pLCBlLm1ldGhvZERpY3QuZHJvcCA9IFwiZHJvcHpvbmVcIiwgdC5keW5hbWljRHJvcCA9ICExLCBvLmFjdGlvbnMuZHJvcCA9IEZyLmRlZmF1bHRzOyB9LCBsaXN0ZW5lcnM6IHsgXCJpbnRlcmFjdGlvbnM6YmVmb3JlLWFjdGlvbi1zdGFydFwiOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuaW50ZXJhY3Rpb247IFwiZHJhZ1wiID09PSB0LnByZXBhcmVkLm5hbWUgJiYgKHQuZHJvcFN0YXRlID0geyBjdXI6IHsgZHJvcHpvbmU6IG51bGwsIGVsZW1lbnQ6IG51bGwgfSwgcHJldjogeyBkcm9wem9uZTogbnVsbCwgZWxlbWVudDogbnVsbCB9LCByZWplY3RlZDogbnVsbCwgZXZlbnRzOiBudWxsLCBhY3RpdmVEcm9wczogW10gfSk7IH0sIFwiaW50ZXJhY3Rpb25zOmFmdGVyLWFjdGlvbi1zdGFydFwiOiBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IGUuaW50ZXJhY3Rpb24sIHIgPSAoZS5pRXZlbnQpOyBpZiAoXCJkcmFnXCIgPT09IG4ucHJlcGFyZWQubmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBvID0gbi5kcm9wU3RhdGU7XG4gICAgICAgICAgICAgICAgby5hY3RpdmVEcm9wcyA9IG51bGwsIG8uZXZlbnRzID0gbnVsbCwgby5hY3RpdmVEcm9wcyA9IFJyKHQsIG4uZWxlbWVudCksIG8uZXZlbnRzID0gWHIobiwgMCwgciksIG8uZXZlbnRzLmFjdGl2YXRlICYmIChDcihvLmFjdGl2ZURyb3BzLCBvLmV2ZW50cy5hY3RpdmF0ZSksIHQuZmlyZShcImFjdGlvbnMvZHJvcDpzdGFydFwiLCB7IGludGVyYWN0aW9uOiBuLCBkcmFnRXZlbnQ6IHIgfSkpO1xuICAgICAgICAgICAgfSB9LCBcImludGVyYWN0aW9uczphY3Rpb24tbW92ZVwiOiBZciwgXCJpbnRlcmFjdGlvbnM6YWN0aW9uLWVuZFwiOiBZciwgXCJpbnRlcmFjdGlvbnM6YWZ0ZXItYWN0aW9uLW1vdmVcIjogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSBlLmludGVyYWN0aW9uLCByID0gZS5pRXZlbnQ7IFwiZHJhZ1wiID09PSBuLnByZXBhcmVkLm5hbWUgJiYgKE5yKG4sIG4uZHJvcFN0YXRlLmV2ZW50cyksIHQuZmlyZShcImFjdGlvbnMvZHJvcDptb3ZlXCIsIHsgaW50ZXJhY3Rpb246IG4sIGRyYWdFdmVudDogciB9KSwgbi5kcm9wU3RhdGUuZXZlbnRzID0ge30pOyB9LCBcImludGVyYWN0aW9uczphZnRlci1hY3Rpb24tZW5kXCI6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gZS5pbnRlcmFjdGlvbiwgciA9IGUuaUV2ZW50OyBcImRyYWdcIiA9PT0gbi5wcmVwYXJlZC5uYW1lICYmIChOcihuLCBuLmRyb3BTdGF0ZS5ldmVudHMpLCB0LmZpcmUoXCJhY3Rpb25zL2Ryb3A6ZW5kXCIsIHsgaW50ZXJhY3Rpb246IG4sIGRyYWdFdmVudDogciB9KSk7IH0sIFwiaW50ZXJhY3Rpb25zOnN0b3BcIjogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLmludGVyYWN0aW9uOyBpZiAoXCJkcmFnXCIgPT09IHQucHJlcGFyZWQubmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBuID0gdC5kcm9wU3RhdGU7XG4gICAgICAgICAgICAgICAgbiAmJiAobi5hY3RpdmVEcm9wcyA9IG51bGwsIG4uZXZlbnRzID0gbnVsbCwgbi5jdXIuZHJvcHpvbmUgPSBudWxsLCBuLmN1ci5lbGVtZW50ID0gbnVsbCwgbi5wcmV2LmRyb3B6b25lID0gbnVsbCwgbi5wcmV2LmVsZW1lbnQgPSBudWxsLCBuLnJlamVjdGVkID0gITEpO1xuICAgICAgICAgICAgfSB9IH0sIGdldEFjdGl2ZURyb3BzOiBSciwgZ2V0RHJvcDogV3IsIGdldERyb3BFdmVudHM6IFhyLCBmaXJlRHJvcEV2ZW50czogTnIsIGRlZmF1bHRzOiB7IGVuYWJsZWQ6ICExLCBhY2NlcHQ6IG51bGwsIG92ZXJsYXA6IFwicG9pbnRlclwiIH0gfSwgTHIgPSBGcjsgTXIuZGVmYXVsdCA9IExyOyB2YXIgcXIgPSB7fTsgZnVuY3Rpb24gVnIoZSkgeyByZXR1cm4gKFZyID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHR5cGVvZiBlOyB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7IH0pKGUpOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShxciwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBxci5kZWZhdWx0ID0gdm9pZCAwOyB2YXIgR3IsIFVyID0gKEdyID0gVG4pICYmIEdyLl9fZXNNb2R1bGUgPyBHciA6IHsgZGVmYXVsdDogR3IgfSwgQnIgPSBPKHt9KSwgSHIgPSBmdW5jdGlvbiAoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSBWcihlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBLcigpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pOyByZXR1cm4gbjsgfShwdCk7IGZ1bmN0aW9uIEtyKCkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKVxuICAgICAgICByZXR1cm4gbnVsbDsgdmFyIGUgPSBuZXcgV2Vha01hcDsgcmV0dXJuIEtyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZTsgfSwgZTsgfSBmdW5jdGlvbiAkcihlKSB7IHZhciB0ID0gZS5pbnRlcmFjdGlvbiwgbiA9IGUuaUV2ZW50LCByID0gZS5ldmVudCwgbyA9IGUucGhhc2U7IGlmIChcImdlc3R1cmVcIiA9PT0gdC5wcmVwYXJlZC5uYW1lKSB7XG4gICAgICAgIHZhciBpID0gdC5wb2ludGVycy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUucG9pbnRlcjsgfSksIGEgPSBcInN0YXJ0XCIgPT09IG8sIHUgPSBcImVuZFwiID09PSBvLCBzID0gdC5pbnRlcmFjdGFibGUub3B0aW9ucy5kZWx0YVNvdXJjZTtcbiAgICAgICAgaWYgKG4udG91Y2hlcyA9IFtpWzBdLCBpWzFdXSwgYSlcbiAgICAgICAgICAgIG4uZGlzdGFuY2UgPSBIci5wb2ludGVyLnRvdWNoRGlzdGFuY2UoaSwgcyksIG4uYm94ID0gSHIucG9pbnRlci50b3VjaEJCb3goaSksIG4uc2NhbGUgPSAxLCBuLmRzID0gMCwgbi5hbmdsZSA9IEhyLnBvaW50ZXIudG91Y2hBbmdsZShpLCBzKSwgbi5kYSA9IDAsIHQuZ2VzdHVyZS5zdGFydERpc3RhbmNlID0gbi5kaXN0YW5jZSwgdC5nZXN0dXJlLnN0YXJ0QW5nbGUgPSBuLmFuZ2xlO1xuICAgICAgICBlbHNlIGlmICh1IHx8IHIgaW5zdGFuY2VvZiBVci5kZWZhdWx0KSB7XG4gICAgICAgICAgICB2YXIgbCA9IHQucHJldkV2ZW50O1xuICAgICAgICAgICAgbi5kaXN0YW5jZSA9IGwuZGlzdGFuY2UsIG4uYm94ID0gbC5ib3gsIG4uc2NhbGUgPSBsLnNjYWxlLCBuLmRzID0gMCwgbi5hbmdsZSA9IGwuYW5nbGUsIG4uZGEgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG4uZGlzdGFuY2UgPSBIci5wb2ludGVyLnRvdWNoRGlzdGFuY2UoaSwgcyksIG4uYm94ID0gSHIucG9pbnRlci50b3VjaEJCb3goaSksIG4uc2NhbGUgPSBuLmRpc3RhbmNlIC8gdC5nZXN0dXJlLnN0YXJ0RGlzdGFuY2UsIG4uYW5nbGUgPSBIci5wb2ludGVyLnRvdWNoQW5nbGUoaSwgcyksIG4uZHMgPSBuLnNjYWxlIC0gdC5nZXN0dXJlLnNjYWxlLCBuLmRhID0gbi5hbmdsZSAtIHQuZ2VzdHVyZS5hbmdsZTtcbiAgICAgICAgdC5nZXN0dXJlLmRpc3RhbmNlID0gbi5kaXN0YW5jZSwgdC5nZXN0dXJlLmFuZ2xlID0gbi5hbmdsZSwgSHIuaXMubnVtYmVyKG4uc2NhbGUpICYmIG4uc2NhbGUgIT09IDEgLyAwICYmICFpc05hTihuLnNjYWxlKSAmJiAodC5nZXN0dXJlLnNjYWxlID0gbi5zY2FsZSk7XG4gICAgfSB9IEJyLkFjdGlvbk5hbWUuR2VzdHVyZSA9IFwiZ2VzdHVyZVwiOyB2YXIgUXIgPSB7IGlkOiBcImFjdGlvbnMvZ2VzdHVyZVwiLCBiZWZvcmU6IFtcImFjdGlvbnMvZHJhZ1wiLCBcImFjdGlvbnMvcmVzaXplXCJdLCBpbnN0YWxsOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuYWN0aW9ucywgbiA9IGUuSW50ZXJhY3RhYmxlLCByID0gZS5kZWZhdWx0czsgbi5wcm90b3R5cGUuZ2VzdHVyYWJsZSA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBIci5pcy5vYmplY3QoZSkgPyAodGhpcy5vcHRpb25zLmdlc3R1cmUuZW5hYmxlZCA9ICExICE9PSBlLmVuYWJsZWQsIHRoaXMuc2V0UGVyQWN0aW9uKEJyLkFjdGlvbk5hbWUuR2VzdHVyZSwgZSksIHRoaXMuc2V0T25FdmVudHMoQnIuQWN0aW9uTmFtZS5HZXN0dXJlLCBlKSwgdGhpcykgOiBIci5pcy5ib29sKGUpID8gKHRoaXMub3B0aW9ucy5nZXN0dXJlLmVuYWJsZWQgPSBlLCB0aGlzKSA6IHRoaXMub3B0aW9ucy5nZXN0dXJlOyB9LCB0W0JyLkFjdGlvbk5hbWUuR2VzdHVyZV0gPSBRciwgdC5uYW1lcy5wdXNoKEJyLkFjdGlvbk5hbWUuR2VzdHVyZSksIEhyLmFyci5tZXJnZSh0LmV2ZW50VHlwZXMsIFtcImdlc3R1cmVzdGFydFwiLCBcImdlc3R1cmVtb3ZlXCIsIFwiZ2VzdHVyZWVuZFwiXSksIHQubWV0aG9kRGljdC5nZXN0dXJlID0gXCJnZXN0dXJhYmxlXCIsIHIuYWN0aW9ucy5nZXN0dXJlID0gUXIuZGVmYXVsdHM7IH0sIGxpc3RlbmVyczogeyBcImludGVyYWN0aW9uczphY3Rpb24tc3RhcnRcIjogJHIsIFwiaW50ZXJhY3Rpb25zOmFjdGlvbi1tb3ZlXCI6ICRyLCBcImludGVyYWN0aW9uczphY3Rpb24tZW5kXCI6ICRyLCBcImludGVyYWN0aW9uczpuZXdcIjogZnVuY3Rpb24gKGUpIHsgZS5pbnRlcmFjdGlvbi5nZXN0dXJlID0geyBhbmdsZTogMCwgZGlzdGFuY2U6IDAsIHNjYWxlOiAxLCBzdGFydEFuZ2xlOiAwLCBzdGFydERpc3RhbmNlOiAwIH07IH0sIFwiYXV0by1zdGFydDpjaGVja1wiOiBmdW5jdGlvbiAoZSkgeyBpZiAoIShlLmludGVyYWN0aW9uLnBvaW50ZXJzLmxlbmd0aCA8IDIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBlLmludGVyYWN0YWJsZS5vcHRpb25zLmdlc3R1cmU7XG4gICAgICAgICAgICAgICAgaWYgKHQgJiYgdC5lbmFibGVkKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIShlLmFjdGlvbiA9IHsgbmFtZTogQnIuQWN0aW9uTmFtZS5HZXN0dXJlIH0pO1xuICAgICAgICAgICAgfSB9IH0sIGRlZmF1bHRzOiB7fSwgZ2V0Q3Vyc29yOiBmdW5jdGlvbiAoKSB7IHJldHVybiBcIlwiOyB9IH0sIFpyID0gUXI7IHFyLmRlZmF1bHQgPSBacjsgdmFyIEpyID0ge307IGZ1bmN0aW9uIGVvKGUpIHsgcmV0dXJuIChlbyA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoSnIsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgSnIuZGVmYXVsdCA9IHZvaWQgMDsgZyh7fSk7IHZhciB0bywgbm8gPSBPKHt9KSwgcm8gPSBzbyh1KSwgb28gPSBzbyhDKSwgaW8gPSAodG8gPSBtZSkgJiYgdG8uX19lc01vZHVsZSA/IHRvIDogeyBkZWZhdWx0OiB0byB9LCBhbyA9IHNvKHkpOyBmdW5jdGlvbiB1bygpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiB1byA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24gc28oZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSBlbyhlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSB1bygpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSByZXR1cm4gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKSwgbjsgfSBmdW5jdGlvbiBsbyhlLCB0LCBuLCByLCBvLCBpLCBhKSB7IGlmICghdClcbiAgICAgICAgcmV0dXJuICExOyBpZiAoITAgPT09IHQpIHtcbiAgICAgICAgdmFyIHUgPSBhby5udW1iZXIoaS53aWR0aCkgPyBpLndpZHRoIDogaS5yaWdodCAtIGkubGVmdCwgcyA9IGFvLm51bWJlcihpLmhlaWdodCkgPyBpLmhlaWdodCA6IGkuYm90dG9tIC0gaS50b3A7XG4gICAgICAgIGlmIChhID0gTWF0aC5taW4oYSwgKFwibGVmdFwiID09PSBlIHx8IFwicmlnaHRcIiA9PT0gZSA/IHUgOiBzKSAvIDIpLCB1IDwgMCAmJiAoXCJsZWZ0XCIgPT09IGUgPyBlID0gXCJyaWdodFwiIDogXCJyaWdodFwiID09PSBlICYmIChlID0gXCJsZWZ0XCIpKSwgcyA8IDAgJiYgKFwidG9wXCIgPT09IGUgPyBlID0gXCJib3R0b21cIiA6IFwiYm90dG9tXCIgPT09IGUgJiYgKGUgPSBcInRvcFwiKSksIFwibGVmdFwiID09PSBlKVxuICAgICAgICAgICAgcmV0dXJuIG4ueCA8ICgwIDw9IHUgPyBpLmxlZnQgOiBpLnJpZ2h0KSArIGE7XG4gICAgICAgIGlmIChcInRvcFwiID09PSBlKVxuICAgICAgICAgICAgcmV0dXJuIG4ueSA8ICgwIDw9IHMgPyBpLnRvcCA6IGkuYm90dG9tKSArIGE7XG4gICAgICAgIGlmIChcInJpZ2h0XCIgPT09IGUpXG4gICAgICAgICAgICByZXR1cm4gbi54ID4gKDAgPD0gdSA/IGkucmlnaHQgOiBpLmxlZnQpIC0gYTtcbiAgICAgICAgaWYgKFwiYm90dG9tXCIgPT09IGUpXG4gICAgICAgICAgICByZXR1cm4gbi55ID4gKDAgPD0gcyA/IGkuYm90dG9tIDogaS50b3ApIC0gYTtcbiAgICB9IHJldHVybiAhIWFvLmVsZW1lbnQocikgJiYgKGFvLmVsZW1lbnQodCkgPyB0ID09PSByIDogb28ubWF0Y2hlc1VwVG8ociwgdCwgbykpOyB9IGZ1bmN0aW9uIGNvKGUpIHsgdmFyIHQgPSBlLmlFdmVudCwgbiA9IGUuaW50ZXJhY3Rpb247IG4ucHJlcGFyZWQubmFtZSA9PT0gbm8uQWN0aW9uTmFtZS5SZXNpemUgJiYgbi5yZXNpemVBeGVzICYmIChuLmludGVyYWN0YWJsZS5vcHRpb25zLnJlc2l6ZS5zcXVhcmUgPyAoXCJ5XCIgPT09IG4ucmVzaXplQXhlcyA/IHQuZGVsdGEueCA9IHQuZGVsdGEueSA6IHQuZGVsdGEueSA9IHQuZGVsdGEueCwgdC5heGVzID0gXCJ4eVwiKSA6ICh0LmF4ZXMgPSBuLnJlc2l6ZUF4ZXMsIFwieFwiID09PSBuLnJlc2l6ZUF4ZXMgPyB0LmRlbHRhLnkgPSAwIDogXCJ5XCIgPT09IG4ucmVzaXplQXhlcyAmJiAodC5kZWx0YS54ID0gMCkpKTsgfSB2YXIgZm8gPSB7IGlkOiBcImFjdGlvbnMvcmVzaXplXCIsIGJlZm9yZTogW1wiYWN0aW9ucy9kcmFnXCJdLCBpbnN0YWxsOiBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHQuYWN0aW9ucywgbiA9IHQuYnJvd3NlciwgciA9IHQuSW50ZXJhY3RhYmxlLCBvID0gdC5kZWZhdWx0czsgZm8uY3Vyc29ycyA9IG4uaXNJZTkgPyB7IHg6IFwiZS1yZXNpemVcIiwgeTogXCJzLXJlc2l6ZVwiLCB4eTogXCJzZS1yZXNpemVcIiwgdG9wOiBcIm4tcmVzaXplXCIsIGxlZnQ6IFwidy1yZXNpemVcIiwgYm90dG9tOiBcInMtcmVzaXplXCIsIHJpZ2h0OiBcImUtcmVzaXplXCIsIHRvcGxlZnQ6IFwic2UtcmVzaXplXCIsIGJvdHRvbXJpZ2h0OiBcInNlLXJlc2l6ZVwiLCB0b3ByaWdodDogXCJuZS1yZXNpemVcIiwgYm90dG9tbGVmdDogXCJuZS1yZXNpemVcIiB9IDogeyB4OiBcImV3LXJlc2l6ZVwiLCB5OiBcIm5zLXJlc2l6ZVwiLCB4eTogXCJud3NlLXJlc2l6ZVwiLCB0b3A6IFwibnMtcmVzaXplXCIsIGxlZnQ6IFwiZXctcmVzaXplXCIsIGJvdHRvbTogXCJucy1yZXNpemVcIiwgcmlnaHQ6IFwiZXctcmVzaXplXCIsIHRvcGxlZnQ6IFwibndzZS1yZXNpemVcIiwgYm90dG9tcmlnaHQ6IFwibndzZS1yZXNpemVcIiwgdG9wcmlnaHQ6IFwibmVzdy1yZXNpemVcIiwgYm90dG9tbGVmdDogXCJuZXN3LXJlc2l6ZVwiIH0sIGZvLmRlZmF1bHRNYXJnaW4gPSBuLnN1cHBvcnRzVG91Y2ggfHwgbi5zdXBwb3J0c1BvaW50ZXJFdmVudCA/IDIwIDogMTAsIHIucHJvdG90eXBlLnJlc2l6YWJsZSA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBmdW5jdGlvbiAoZSwgdCwgbikgeyBpZiAoYW8ub2JqZWN0KHQpKVxuICAgICAgICAgICAgcmV0dXJuIGUub3B0aW9ucy5yZXNpemUuZW5hYmxlZCA9ICExICE9PSB0LmVuYWJsZWQsIGUuc2V0UGVyQWN0aW9uKG5vLkFjdGlvbk5hbWUuUmVzaXplLCB0KSwgZS5zZXRPbkV2ZW50cyhuby5BY3Rpb25OYW1lLlJlc2l6ZSwgdCksIGFvLnN0cmluZyh0LmF4aXMpICYmIC9eeCR8XnkkfF54eSQvLnRlc3QodC5heGlzKSA/IGUub3B0aW9ucy5yZXNpemUuYXhpcyA9IHQuYXhpcyA6IG51bGwgPT09IHQuYXhpcyAmJiAoZS5vcHRpb25zLnJlc2l6ZS5heGlzID0gbi5kZWZhdWx0cy5hY3Rpb25zLnJlc2l6ZS5heGlzKSwgYW8uYm9vbCh0LnByZXNlcnZlQXNwZWN0UmF0aW8pID8gZS5vcHRpb25zLnJlc2l6ZS5wcmVzZXJ2ZUFzcGVjdFJhdGlvID0gdC5wcmVzZXJ2ZUFzcGVjdFJhdGlvIDogYW8uYm9vbCh0LnNxdWFyZSkgJiYgKGUub3B0aW9ucy5yZXNpemUuc3F1YXJlID0gdC5zcXVhcmUpLCBlOyBpZiAoYW8uYm9vbCh0KSlcbiAgICAgICAgICAgIHJldHVybiBlLm9wdGlvbnMucmVzaXplLmVuYWJsZWQgPSB0LCBlOyByZXR1cm4gZS5vcHRpb25zLnJlc2l6ZTsgfSh0aGlzLCBlLCB0KTsgfSwgZVtuby5BY3Rpb25OYW1lLlJlc2l6ZV0gPSBmbywgZS5uYW1lcy5wdXNoKG5vLkFjdGlvbk5hbWUuUmVzaXplKSwgcm8ubWVyZ2UoZS5ldmVudFR5cGVzLCBbXCJyZXNpemVzdGFydFwiLCBcInJlc2l6ZW1vdmVcIiwgXCJyZXNpemVpbmVydGlhc3RhcnRcIiwgXCJyZXNpemVyZXN1bWVcIiwgXCJyZXNpemVlbmRcIl0pLCBlLm1ldGhvZERpY3QucmVzaXplID0gXCJyZXNpemFibGVcIiwgby5hY3Rpb25zLnJlc2l6ZSA9IGZvLmRlZmF1bHRzOyB9LCBsaXN0ZW5lcnM6IHsgXCJpbnRlcmFjdGlvbnM6bmV3XCI6IGZ1bmN0aW9uIChlKSB7IGUuaW50ZXJhY3Rpb24ucmVzaXplQXhlcyA9IFwieHlcIjsgfSwgXCJpbnRlcmFjdGlvbnM6YWN0aW9uLXN0YXJ0XCI6IGZ1bmN0aW9uIChlKSB7ICFmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuaUV2ZW50LCBuID0gZS5pbnRlcmFjdGlvbjsgaWYgKFwicmVzaXplXCIgPT09IG4ucHJlcGFyZWQubmFtZSAmJiBuLnByZXBhcmVkLmVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSBuLnJlY3Q7XG4gICAgICAgICAgICAgICAgbi5fcmVjdHMgPSB7IHN0YXJ0OiAoMCwgaW8uZGVmYXVsdCkoe30sIHIpLCBjb3JyZWN0ZWQ6ICgwLCBpby5kZWZhdWx0KSh7fSwgciksIHByZXZpb3VzOiAoMCwgaW8uZGVmYXVsdCkoe30sIHIpLCBkZWx0YTogeyBsZWZ0OiAwLCByaWdodDogMCwgd2lkdGg6IDAsIHRvcDogMCwgYm90dG9tOiAwLCBoZWlnaHQ6IDAgfSB9LCB0LmVkZ2VzID0gbi5wcmVwYXJlZC5lZGdlcywgdC5yZWN0ID0gbi5fcmVjdHMuY29ycmVjdGVkLCB0LmRlbHRhUmVjdCA9IG4uX3JlY3RzLmRlbHRhO1xuICAgICAgICAgICAgfSB9KGUpLCBjbyhlKTsgfSwgXCJpbnRlcmFjdGlvbnM6YWN0aW9uLW1vdmVcIjogZnVuY3Rpb24gKGUpIHsgIWZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5pRXZlbnQsIG4gPSBlLmludGVyYWN0aW9uOyBpZiAoXCJyZXNpemVcIiA9PT0gbi5wcmVwYXJlZC5uYW1lICYmIG4ucHJlcGFyZWQuZWRnZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IG4uaW50ZXJhY3RhYmxlLm9wdGlvbnMucmVzaXplLmludmVydCwgbyA9IFwicmVwb3NpdGlvblwiID09PSByIHx8IFwibmVnYXRlXCIgPT09IHIsIGkgPSBuLnJlY3QsIGEgPSBuLl9yZWN0cywgdSA9IGEuc3RhcnQsIHMgPSBhLmNvcnJlY3RlZCwgbCA9IGEuZGVsdGEsIGMgPSBhLnByZXZpb3VzO1xuICAgICAgICAgICAgICAgIGlmICgoMCwgaW8uZGVmYXVsdCkoYywgcyksIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgwLCBpby5kZWZhdWx0KShzLCBpKSwgXCJyZXBvc2l0aW9uXCIgPT09IHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLnRvcCA+IHMuYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBzLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnRvcCA9IHMuYm90dG9tLCBzLmJvdHRvbSA9IGY7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5sZWZ0ID4gcy5yaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gcy5sZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMubGVmdCA9IHMucmlnaHQsIHMucmlnaHQgPSBwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgcy50b3AgPSBNYXRoLm1pbihpLnRvcCwgdS5ib3R0b20pLCBzLmJvdHRvbSA9IE1hdGgubWF4KGkuYm90dG9tLCB1LnRvcCksIHMubGVmdCA9IE1hdGgubWluKGkubGVmdCwgdS5yaWdodCksIHMucmlnaHQgPSBNYXRoLm1heChpLnJpZ2h0LCB1LmxlZnQpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGQgaW4gcy53aWR0aCA9IHMucmlnaHQgLSBzLmxlZnQsIHMuaGVpZ2h0ID0gcy5ib3R0b20gLSBzLnRvcCwgcylcbiAgICAgICAgICAgICAgICAgICAgbFtkXSA9IHNbZF0gLSBjW2RdO1xuICAgICAgICAgICAgICAgIHQuZWRnZXMgPSBuLnByZXBhcmVkLmVkZ2VzLCB0LnJlY3QgPSBzLCB0LmRlbHRhUmVjdCA9IGw7XG4gICAgICAgICAgICB9IH0oZSksIGNvKGUpOyB9LCBcImludGVyYWN0aW9uczphY3Rpb24tZW5kXCI6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5pRXZlbnQsIG4gPSBlLmludGVyYWN0aW9uOyBcInJlc2l6ZVwiID09PSBuLnByZXBhcmVkLm5hbWUgJiYgbi5wcmVwYXJlZC5lZGdlcyAmJiAodC5lZGdlcyA9IG4ucHJlcGFyZWQuZWRnZXMsIHQucmVjdCA9IG4uX3JlY3RzLmNvcnJlY3RlZCwgdC5kZWx0YVJlY3QgPSBuLl9yZWN0cy5kZWx0YSk7IH0sIFwiYXV0by1zdGFydDpjaGVja1wiOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuaW50ZXJhY3Rpb24sIG4gPSBlLmludGVyYWN0YWJsZSwgciA9IGUuZWxlbWVudCwgbyA9IGUucmVjdCwgaSA9IGUuYnV0dG9uczsgaWYgKG8pIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9ICgwLCBpby5kZWZhdWx0KSh7fSwgdC5jb29yZHMuY3VyLnBhZ2UpLCB1ID0gbi5vcHRpb25zLnJlc2l6ZTtcbiAgICAgICAgICAgICAgICBpZiAodSAmJiB1LmVuYWJsZWQgJiYgKCF0LnBvaW50ZXJJc0Rvd24gfHwgIS9tb3VzZXxwb2ludGVyLy50ZXN0KHQucG9pbnRlclR5cGUpIHx8IDAgIT0gKGkgJiB1Lm1vdXNlQnV0dG9ucykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhby5vYmplY3QodS5lZGdlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0geyBsZWZ0OiAhMSwgcmlnaHQ6ICExLCB0b3A6ICExLCBib3R0b206ICExIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBsIGluIHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc1tsXSA9IGxvKGwsIHUuZWRnZXNbbF0sIGEsIHQuX2xhdGVzdFBvaW50ZXIuZXZlbnRUYXJnZXQsIHIsIG8sIHUubWFyZ2luIHx8IGZvLmRlZmF1bHRNYXJnaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5sZWZ0ID0gcy5sZWZ0ICYmICFzLnJpZ2h0LCBzLnRvcCA9IHMudG9wICYmICFzLmJvdHRvbSwgKHMubGVmdCB8fCBzLnJpZ2h0IHx8IHMudG9wIHx8IHMuYm90dG9tKSAmJiAoZS5hY3Rpb24gPSB7IG5hbWU6IG5vLkFjdGlvbk5hbWUuUmVzaXplLCBlZGdlczogcyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gXCJ5XCIgIT09IHUuYXhpcyAmJiBhLnggPiBvLnJpZ2h0IC0gZm8uZGVmYXVsdE1hcmdpbiwgZiA9IFwieFwiICE9PSB1LmF4aXMgJiYgYS55ID4gby5ib3R0b20gLSBmby5kZWZhdWx0TWFyZ2luO1xuICAgICAgICAgICAgICAgICAgICAgICAgKGMgfHwgZikgJiYgKGUuYWN0aW9uID0geyBuYW1lOiBcInJlc2l6ZVwiLCBheGVzOiAoYyA/IFwieFwiIDogXCJcIikgKyAoZiA/IFwieVwiIDogXCJcIikgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFlLmFjdGlvbiAmJiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB9IH0sIGRlZmF1bHRzOiB7IHNxdWFyZTogIShuby5BY3Rpb25OYW1lLlJlc2l6ZSA9IFwicmVzaXplXCIpLCBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiAhMSwgYXhpczogXCJ4eVwiLCBtYXJnaW46IE5hTiwgZWRnZXM6IG51bGwsIGludmVydDogXCJub25lXCIgfSwgY3Vyc29yczogbnVsbCwgZ2V0Q3Vyc29yOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuZWRnZXMsIG4gPSBlLmF4aXMsIHIgPSBlLm5hbWUsIG8gPSBmby5jdXJzb3JzLCBpID0gbnVsbDsgaWYgKG4pXG4gICAgICAgICAgICBpID0gb1tyICsgbl07XG4gICAgICAgIGVsc2UgaWYgKHQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGEgPSBcIlwiLCB1ID0gW1widG9wXCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLCBcInJpZ2h0XCJdLCBzID0gMDsgcyA8IHUubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IHVbc107XG4gICAgICAgICAgICAgICAgdFtsXSAmJiAoYSArPSBsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkgPSBvW2FdO1xuICAgICAgICB9IHJldHVybiBpOyB9LCBkZWZhdWx0TWFyZ2luOiBudWxsIH0sIHBvID0gZm87IEpyLmRlZmF1bHQgPSBwbzsgdmFyIHZvID0ge307IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2bywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCB2by5pbnN0YWxsID0gZnVuY3Rpb24gKGUpIHsgZS51c2VQbHVnaW4oZ28uZGVmYXVsdCksIGUudXNlUGx1Z2luKGhvLmRlZmF1bHQpLCBlLnVzZVBsdWdpbih5by5kZWZhdWx0KSwgZS51c2VQbHVnaW4obW8uZGVmYXVsdCk7IH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2bywgXCJkcmFnXCIsIHsgZW51bWVyYWJsZTogITAsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4geW8uZGVmYXVsdDsgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZvLCBcImRyb3BcIiwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtby5kZWZhdWx0OyB9IH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodm8sIFwiZ2VzdHVyZVwiLCB7IGVudW1lcmFibGU6ICEwLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdvLmRlZmF1bHQ7IH0gfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2bywgXCJyZXNpemVcIiwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoby5kZWZhdWx0OyB9IH0pLCB2by5pZCA9IHZvaWQgMDsgdmFyIHlvID0gYm8ob3IpLCBtbyA9IGJvKE1yKSwgZ28gPSBibyhxciksIGhvID0gYm8oSnIpOyBmdW5jdGlvbiBibyhlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IGRlZmF1bHQ6IGUgfTsgfSB2by5pZCA9IFwiYWN0aW9uc1wiOyB2YXIgT28gPSB7fTsgZnVuY3Rpb24gd28oZSkgeyByZXR1cm4gKHdvID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHR5cGVvZiBlOyB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7IH0pKGUpOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPbywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBPby5nZXRDb250YWluZXIgPSBrbywgT28uZ2V0U2Nyb2xsID0gRG8sIE9vLmdldFNjcm9sbFNpemUgPSBmdW5jdGlvbiAoZSkgeyB4by53aW5kb3coZSkgJiYgKGUgPSB3aW5kb3cuZG9jdW1lbnQuYm9keSk7IHJldHVybiB7IHg6IGUuc2Nyb2xsV2lkdGgsIHk6IGUuc2Nyb2xsSGVpZ2h0IH07IH0sIE9vLmdldFNjcm9sbFNpemVEZWx0YSA9IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gZS5pbnRlcmFjdGlvbiwgciA9IGUuZWxlbWVudCwgbyA9IG4gJiYgbi5pbnRlcmFjdGFibGUub3B0aW9uc1tuLnByZXBhcmVkLm5hbWVdLmF1dG9TY3JvbGw7IGlmICghbyB8fCAhby5lbmFibGVkKVxuICAgICAgICByZXR1cm4gdCgpLCB7IHg6IDAsIHk6IDAgfTsgdmFyIGkgPSBrbyhvLmNvbnRhaW5lciwgbi5pbnRlcmFjdGFibGUsIHIpLCBhID0gRG8oaSk7IHQoKTsgdmFyIHUgPSBEbyhpKTsgcmV0dXJuIHsgeDogdS54IC0gYS54LCB5OiB1LnkgLSBhLnkgfTsgfSwgT28uZGVmYXVsdCA9IHZvaWQgMDsgdmFyIFBvLCBfbyA9IE1vKEMpLCB4byA9IE1vKHkpLCBTbyA9IChQbyA9IHV0KSAmJiBQby5fX2VzTW9kdWxlID8gUG8gOiB7IGRlZmF1bHQ6IFBvIH07IGZ1bmN0aW9uIGpvKCkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKVxuICAgICAgICByZXR1cm4gbnVsbDsgdmFyIGUgPSBuZXcgV2Vha01hcDsgcmV0dXJuIGpvID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZTsgfSwgZTsgfSBmdW5jdGlvbiBNbyhlKSB7IGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICAgICAgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT09IHdvKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IGpvKCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IHJldHVybiBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pLCBuOyB9IHZhciBFbyA9IHsgZGVmYXVsdHM6IHsgZW5hYmxlZDogITEsIG1hcmdpbjogNjAsIGNvbnRhaW5lcjogbnVsbCwgc3BlZWQ6IDMwMCB9LCBub3c6IERhdGUubm93LCBpbnRlcmFjdGlvbjogbnVsbCwgaTogMCwgeDogMCwgeTogMCwgaXNTY3JvbGxpbmc6ICExLCBwcmV2VGltZTogMCwgbWFyZ2luOiAwLCBzcGVlZDogMCwgc3RhcnQ6IGZ1bmN0aW9uIChlKSB7IEVvLmlzU2Nyb2xsaW5nID0gITAsIFNvLmRlZmF1bHQuY2FuY2VsKEVvLmkpLCAoZS5hdXRvU2Nyb2xsID0gRW8pLmludGVyYWN0aW9uID0gZSwgRW8ucHJldlRpbWUgPSBFby5ub3coKSwgRW8uaSA9IFNvLmRlZmF1bHQucmVxdWVzdChFby5zY3JvbGwpOyB9LCBzdG9wOiBmdW5jdGlvbiAoKSB7IEVvLmlzU2Nyb2xsaW5nID0gITEsIEVvLmludGVyYWN0aW9uICYmIChFby5pbnRlcmFjdGlvbi5hdXRvU2Nyb2xsID0gbnVsbCksIFNvLmRlZmF1bHQuY2FuY2VsKEVvLmkpOyB9LCBzY3JvbGw6IGZ1bmN0aW9uICgpIHsgdmFyIGUgPSBFby5pbnRlcmFjdGlvbiwgdCA9IGUuaW50ZXJhY3RhYmxlLCBuID0gZS5lbGVtZW50LCByID0gZS5wcmVwYXJlZC5uYW1lLCBvID0gdC5vcHRpb25zW3JdLmF1dG9TY3JvbGwsIGkgPSBrbyhvLmNvbnRhaW5lciwgdCwgbiksIGEgPSBFby5ub3coKSwgdSA9IChhIC0gRW8ucHJldlRpbWUpIC8gMWUzLCBzID0gby5zcGVlZCAqIHU7IGlmICgxIDw9IHMpIHtcbiAgICAgICAgICAgIHZhciBsID0geyB4OiBFby54ICogcywgeTogRW8ueSAqIHMgfTtcbiAgICAgICAgICAgIGlmIChsLnggfHwgbC55KSB7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBEbyhpKTtcbiAgICAgICAgICAgICAgICB4by53aW5kb3coaSkgPyBpLnNjcm9sbEJ5KGwueCwgbC55KSA6IGkgJiYgKGkuc2Nyb2xsTGVmdCArPSBsLngsIGkuc2Nyb2xsVG9wICs9IGwueSk7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSBEbyhpKSwgcCA9IHsgeDogZi54IC0gYy54LCB5OiBmLnkgLSBjLnkgfTtcbiAgICAgICAgICAgICAgICAocC54IHx8IHAueSkgJiYgdC5maXJlKHsgdHlwZTogXCJhdXRvc2Nyb2xsXCIsIHRhcmdldDogbiwgaW50ZXJhY3RhYmxlOiB0LCBkZWx0YTogcCwgaW50ZXJhY3Rpb246IGUsIGNvbnRhaW5lcjogaSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEVvLnByZXZUaW1lID0gYTtcbiAgICAgICAgfSBFby5pc1Njcm9sbGluZyAmJiAoU28uZGVmYXVsdC5jYW5jZWwoRW8uaSksIEVvLmkgPSBTby5kZWZhdWx0LnJlcXVlc3QoRW8uc2Nyb2xsKSk7IH0sIGNoZWNrOiBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IGUub3B0aW9uczsgcmV0dXJuIG5bdF0uYXV0b1Njcm9sbCAmJiBuW3RdLmF1dG9TY3JvbGwuZW5hYmxlZDsgfSwgb25JbnRlcmFjdGlvbk1vdmU6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5pbnRlcmFjdGlvbiwgbiA9IGUucG9pbnRlcjsgaWYgKHQuaW50ZXJhY3RpbmcoKSAmJiBFby5jaGVjayh0LmludGVyYWN0YWJsZSwgdC5wcmVwYXJlZC5uYW1lKSlcbiAgICAgICAgICAgIGlmICh0LnNpbXVsYXRpb24pXG4gICAgICAgICAgICAgICAgRW8ueCA9IEVvLnkgPSAwO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHIsIG8sIGksIGEsIHUgPSB0LmludGVyYWN0YWJsZSwgcyA9IHQuZWxlbWVudCwgbCA9IHQucHJlcGFyZWQubmFtZSwgYyA9IHUub3B0aW9uc1tsXS5hdXRvU2Nyb2xsLCBmID0ga28oYy5jb250YWluZXIsIHUsIHMpO1xuICAgICAgICAgICAgICAgIGlmICh4by53aW5kb3coZikpXG4gICAgICAgICAgICAgICAgICAgIGEgPSBuLmNsaWVudFggPCBFby5tYXJnaW4sIHIgPSBuLmNsaWVudFkgPCBFby5tYXJnaW4sIG8gPSBuLmNsaWVudFggPiBmLmlubmVyV2lkdGggLSBFby5tYXJnaW4sIGkgPSBuLmNsaWVudFkgPiBmLmlubmVySGVpZ2h0IC0gRW8ubWFyZ2luO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IF9vLmdldEVsZW1lbnRDbGllbnRSZWN0KGYpO1xuICAgICAgICAgICAgICAgICAgICBhID0gbi5jbGllbnRYIDwgcC5sZWZ0ICsgRW8ubWFyZ2luLCByID0gbi5jbGllbnRZIDwgcC50b3AgKyBFby5tYXJnaW4sIG8gPSBuLmNsaWVudFggPiBwLnJpZ2h0IC0gRW8ubWFyZ2luLCBpID0gbi5jbGllbnRZID4gcC5ib3R0b20gLSBFby5tYXJnaW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIEVvLnggPSBvID8gMSA6IGEgPyAtMSA6IDAsIEVvLnkgPSBpID8gMSA6IHIgPyAtMSA6IDAsIEVvLmlzU2Nyb2xsaW5nIHx8IChFby5tYXJnaW4gPSBjLm1hcmdpbiwgRW8uc3BlZWQgPSBjLnNwZWVkLCBFby5zdGFydCh0KSk7XG4gICAgICAgICAgICB9IH0gfTsgZnVuY3Rpb24ga28oZSwgdCwgbikgeyByZXR1cm4gKHhvLnN0cmluZyhlKSA/ICgwLCBnZS5nZXRTdHJpbmdPcHRpb25SZXN1bHQpKGUsIHQsIG4pIDogZSkgfHwgKDAsIHMuZ2V0V2luZG93KShuKTsgfSBmdW5jdGlvbiBEbyhlKSB7IHJldHVybiB4by53aW5kb3coZSkgJiYgKGUgPSB3aW5kb3cuZG9jdW1lbnQuYm9keSksIHsgeDogZS5zY3JvbGxMZWZ0LCB5OiBlLnNjcm9sbFRvcCB9OyB9IHZhciBUbyA9IHsgaWQ6IFwiYXV0by1zY3JvbGxcIiwgaW5zdGFsbDogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLmRlZmF1bHRzLCBuID0gZS5hY3Rpb25zOyAoZS5hdXRvU2Nyb2xsID0gRW8pLm5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGUubm93KCk7IH0sIG4uZXZlbnRUeXBlcy5wdXNoKFwiYXV0b3Njcm9sbFwiKSwgdC5wZXJBY3Rpb24uYXV0b1Njcm9sbCA9IEVvLmRlZmF1bHRzOyB9LCBsaXN0ZW5lcnM6IHsgXCJpbnRlcmFjdGlvbnM6bmV3XCI6IGZ1bmN0aW9uIChlKSB7IGUuaW50ZXJhY3Rpb24uYXV0b1Njcm9sbCA9IG51bGw7IH0sIFwiaW50ZXJhY3Rpb25zOmRlc3Ryb3lcIjogZnVuY3Rpb24gKGUpIHsgZS5pbnRlcmFjdGlvbi5hdXRvU2Nyb2xsID0gbnVsbCwgRW8uc3RvcCgpLCBFby5pbnRlcmFjdGlvbiAmJiAoRW8uaW50ZXJhY3Rpb24gPSBudWxsKTsgfSwgXCJpbnRlcmFjdGlvbnM6c3RvcFwiOiBFby5zdG9wLCBcImludGVyYWN0aW9uczphY3Rpb24tbW92ZVwiOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gRW8ub25JbnRlcmFjdGlvbk1vdmUoZSk7IH0gfSB9OyBPby5kZWZhdWx0ID0gVG87IHZhciBJbyA9IHt9OyBmdW5jdGlvbiBBbyhlKSB7IHJldHVybiAoQW8gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdHlwZW9mIGU7IH0gOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBlLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgZSAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgZTsgfSkoZSk7IH0gT2JqZWN0LmRlZmluZVByb3BlcnR5KElvLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIElvLmRlZmF1bHQgPSB2b2lkIDA7IHZhciB6byA9IGZ1bmN0aW9uIChlKSB7IGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICAgICAgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT09IEFvKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IENvKCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbik7IHJldHVybiBuOyB9KHkpOyBmdW5jdGlvbiBDbygpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBDbyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24gUm8oZSkgeyByZXR1cm4gem8uYm9vbChlKSA/ICh0aGlzLm9wdGlvbnMuc3R5bGVDdXJzb3IgPSBlLCB0aGlzKSA6IG51bGwgPT09IGUgPyAoZGVsZXRlIHRoaXMub3B0aW9ucy5zdHlsZUN1cnNvciwgdGhpcykgOiB0aGlzLm9wdGlvbnMuc3R5bGVDdXJzb3I7IH0gZnVuY3Rpb24gV28oZSkgeyByZXR1cm4gem8uZnVuYyhlKSA/ICh0aGlzLm9wdGlvbnMuYWN0aW9uQ2hlY2tlciA9IGUsIHRoaXMpIDogbnVsbCA9PT0gZSA/IChkZWxldGUgdGhpcy5vcHRpb25zLmFjdGlvbkNoZWNrZXIsIHRoaXMpIDogdGhpcy5vcHRpb25zLmFjdGlvbkNoZWNrZXI7IH0gdmFyIFhvID0geyBpZDogXCJhdXRvLXN0YXJ0L2ludGVyYWN0YWJsZU1ldGhvZHNcIiwgaW5zdGFsbDogZnVuY3Rpb24gKGQpIHsgdmFyIGUgPSBkLkludGVyYWN0YWJsZTsgZS5wcm90b3R5cGUuZ2V0QWN0aW9uID0gZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgdmFyIG8sIGksIGEsIHUsIHMsIGwsIGMsIGYsIHAgPSAoaSA9IHQsIGEgPSBuLCB1ID0gciwgcyA9IGQsIGwgPSAobyA9IHRoaXMpLmdldFJlY3QodSksIGMgPSBpLmJ1dHRvbnMgfHwgeyAwOiAxLCAxOiA0LCAzOiA4LCA0OiAxNiB9W2kuYnV0dG9uXSwgZiA9IHsgYWN0aW9uOiBudWxsLCBpbnRlcmFjdGFibGU6IG8sIGludGVyYWN0aW9uOiBhLCBlbGVtZW50OiB1LCByZWN0OiBsLCBidXR0b25zOiBjIH0sIHMuZmlyZShcImF1dG8tc3RhcnQ6Y2hlY2tcIiwgZiksIGYuYWN0aW9uKTsgcmV0dXJuIHRoaXMub3B0aW9ucy5hY3Rpb25DaGVja2VyID8gdGhpcy5vcHRpb25zLmFjdGlvbkNoZWNrZXIoZSwgdCwgcCwgdGhpcywgciwgbikgOiBwOyB9LCBlLnByb3RvdHlwZS5pZ25vcmVGcm9tID0gKDAsIHB0Lndhcm5PbmNlKShmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcy5fYmFja0NvbXBhdE9wdGlvbihcImlnbm9yZUZyb21cIiwgZSk7IH0sIFwiSW50ZXJhY3RhYmxlLmlnbm9yZUZyb20oKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgSW50ZXJhY3RibGUuZHJhZ2dhYmxlKHtpZ25vcmVGcm9tOiBuZXdWYWx1ZX0pLlwiKSwgZS5wcm90b3R5cGUuYWxsb3dGcm9tID0gKDAsIHB0Lndhcm5PbmNlKShmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcy5fYmFja0NvbXBhdE9wdGlvbihcImFsbG93RnJvbVwiLCBlKTsgfSwgXCJJbnRlcmFjdGFibGUuYWxsb3dGcm9tKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIEludGVyYWN0YmxlLmRyYWdnYWJsZSh7YWxsb3dGcm9tOiBuZXdWYWx1ZX0pLlwiKSwgZS5wcm90b3R5cGUuYWN0aW9uQ2hlY2tlciA9IFdvLCBlLnByb3RvdHlwZS5zdHlsZUN1cnNvciA9IFJvOyB9IH07IElvLmRlZmF1bHQgPSBYbzsgdmFyIE5vID0ge307IGZ1bmN0aW9uIFlvKGUpIHsgcmV0dXJuIChZbyA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm8sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgTm8uZGVmYXVsdCA9IHZvaWQgMDsgdmFyIEZvLCBMbyA9IGZ1bmN0aW9uIChlKSB7IGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICAgICAgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT09IFlvKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IFZvKCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbik7IHJldHVybiBuOyB9KHB0KSwgcW8gPSAoRm8gPSBJbykgJiYgRm8uX19lc01vZHVsZSA/IEZvIDogeyBkZWZhdWx0OiBGbyB9OyBmdW5jdGlvbiBWbygpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBWbyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24gR28oZSwgdCwgbiwgciwgbykgeyByZXR1cm4gdC50ZXN0SWdub3JlQWxsb3codC5vcHRpb25zW2UubmFtZV0sIG4sIHIpICYmIHQub3B0aW9uc1tlLm5hbWVdLmVuYWJsZWQgJiYgS28odCwgbiwgZSwgbykgPyBlIDogbnVsbDsgfSBmdW5jdGlvbiBVbyhlLCB0LCBuLCByLCBvLCBpLCBhKSB7IGZvciAodmFyIHUgPSAwLCBzID0gci5sZW5ndGg7IHUgPCBzOyB1KyspIHtcbiAgICAgICAgdmFyIGwgPSByW3VdLCBjID0gb1t1XSwgZiA9IGwuZ2V0QWN0aW9uKHQsIG4sIGUsIGMpO1xuICAgICAgICBpZiAoZikge1xuICAgICAgICAgICAgdmFyIHAgPSBHbyhmLCBsLCBjLCBpLCBhKTtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGFjdGlvbjogcCwgaW50ZXJhY3RhYmxlOiBsLCBlbGVtZW50OiBjIH07XG4gICAgICAgIH1cbiAgICB9IHJldHVybiB7IGFjdGlvbjogbnVsbCwgaW50ZXJhY3RhYmxlOiBudWxsLCBlbGVtZW50OiBudWxsIH07IH0gZnVuY3Rpb24gQm8oZSwgdCwgbiwgciwgbykgeyB2YXIgaSA9IFtdLCBhID0gW10sIHUgPSByOyBmdW5jdGlvbiBzKGUpIHsgaS5wdXNoKGUpLCBhLnB1c2godSk7IH0gZm9yICg7IExvLmlzLmVsZW1lbnQodSk7KSB7XG4gICAgICAgIGkgPSBbXSwgYSA9IFtdLCBvLmludGVyYWN0YWJsZXMuZm9yRWFjaE1hdGNoKHUsIHMpO1xuICAgICAgICB2YXIgbCA9IFVvKGUsIHQsIG4sIGksIGEsIHIsIG8pO1xuICAgICAgICBpZiAobC5hY3Rpb24gJiYgIWwuaW50ZXJhY3RhYmxlLm9wdGlvbnNbbC5hY3Rpb24ubmFtZV0ubWFudWFsU3RhcnQpXG4gICAgICAgICAgICByZXR1cm4gbDtcbiAgICAgICAgdSA9IExvLmRvbS5wYXJlbnROb2RlKHUpO1xuICAgIH0gcmV0dXJuIHsgYWN0aW9uOiBudWxsLCBpbnRlcmFjdGFibGU6IG51bGwsIGVsZW1lbnQ6IG51bGwgfTsgfSBmdW5jdGlvbiBIbyhlLCB0LCBuKSB7IHZhciByID0gdC5hY3Rpb24sIG8gPSB0LmludGVyYWN0YWJsZSwgaSA9IHQuZWxlbWVudDsgciA9IHIgfHwgeyBuYW1lOiBudWxsIH0sIGUuaW50ZXJhY3RhYmxlID0gbywgZS5lbGVtZW50ID0gaSwgTG8uY29weUFjdGlvbihlLnByZXBhcmVkLCByKSwgZS5yZWN0ID0gbyAmJiByLm5hbWUgPyBvLmdldFJlY3QoaSkgOiBudWxsLCBabyhlLCBuKSwgbi5maXJlKFwiYXV0b1N0YXJ0OnByZXBhcmVkXCIsIHsgaW50ZXJhY3Rpb246IGUgfSk7IH0gZnVuY3Rpb24gS28oZSwgdCwgbiwgcikgeyB2YXIgbyA9IGUub3B0aW9ucywgaSA9IG9bbi5uYW1lXS5tYXgsIGEgPSBvW24ubmFtZV0ubWF4UGVyRWxlbWVudCwgdSA9IHIuYXV0b1N0YXJ0Lm1heEludGVyYWN0aW9ucywgcyA9IDAsIGwgPSAwLCBjID0gMDsgaWYgKCEoaSAmJiBhICYmIHUpKVxuICAgICAgICByZXR1cm4gITE7IGZvciAodmFyIGYgPSAwOyBmIDwgci5pbnRlcmFjdGlvbnMubGlzdC5sZW5ndGg7IGYrKykge1xuICAgICAgICB2YXIgcCA9IHIuaW50ZXJhY3Rpb25zLmxpc3RbZl0sIGQgPSBwLnByZXBhcmVkLm5hbWU7XG4gICAgICAgIGlmIChwLmludGVyYWN0aW5nKCkpIHtcbiAgICAgICAgICAgIGlmICh1IDw9ICsrcylcbiAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICBpZiAocC5pbnRlcmFjdGFibGUgPT09IGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA8PSAobCArPSBkID09PSBuLm5hbWUgPyAxIDogMCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICBpZiAocC5lbGVtZW50ID09PSB0ICYmIChjKyssIGQgPT09IG4ubmFtZSAmJiBhIDw9IGMpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IHJldHVybiAwIDwgdTsgfSBmdW5jdGlvbiAkbyhlLCB0KSB7IHJldHVybiBMby5pcy5udW1iZXIoZSkgPyAodC5hdXRvU3RhcnQubWF4SW50ZXJhY3Rpb25zID0gZSwgdGhpcykgOiB0LmF1dG9TdGFydC5tYXhJbnRlcmFjdGlvbnM7IH0gZnVuY3Rpb24gUW8oZSwgdCwgbikgeyB2YXIgciA9IG4uYXV0b1N0YXJ0LmN1cnNvckVsZW1lbnQ7IHIgJiYgciAhPT0gZSAmJiAoci5zdHlsZS5jdXJzb3IgPSBcIlwiKSwgZS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5jdXJzb3IgPSB0LCBlLnN0eWxlLmN1cnNvciA9IHQsIG4uYXV0b1N0YXJ0LmN1cnNvckVsZW1lbnQgPSB0ID8gZSA6IG51bGw7IH0gZnVuY3Rpb24gWm8oZSwgdCkgeyB2YXIgbiA9IGUuaW50ZXJhY3RhYmxlLCByID0gZS5lbGVtZW50LCBvID0gZS5wcmVwYXJlZDsgaWYgKFwibW91c2VcIiA9PT0gZS5wb2ludGVyVHlwZSAmJiBuICYmIG4ub3B0aW9ucy5zdHlsZUN1cnNvcikge1xuICAgICAgICB2YXIgaSA9IFwiXCI7XG4gICAgICAgIGlmIChvLm5hbWUpIHtcbiAgICAgICAgICAgIHZhciBhID0gbi5vcHRpb25zW28ubmFtZV0uY3Vyc29yQ2hlY2tlcjtcbiAgICAgICAgICAgIGkgPSBMby5pcy5mdW5jKGEpID8gYShvLCBuLCByLCBlLl9pbnRlcmFjdGluZykgOiB0LmFjdGlvbnNbby5uYW1lXS5nZXRDdXJzb3Iobyk7XG4gICAgICAgIH1cbiAgICAgICAgUW8oZS5lbGVtZW50LCBpIHx8IFwiXCIsIHQpO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHQuYXV0b1N0YXJ0LmN1cnNvckVsZW1lbnQgJiYgUW8odC5hdXRvU3RhcnQuY3Vyc29yRWxlbWVudCwgXCJcIiwgdCk7IH0gdmFyIEpvID0geyBpZDogXCJhdXRvLXN0YXJ0L2Jhc2VcIiwgYmVmb3JlOiBbXCJhY3Rpb25zXCIsIFwiYWN0aW9uL2RyYWdcIiwgXCJhY3Rpb25zL3Jlc2l6ZVwiLCBcImFjdGlvbnMvZ2VzdHVyZVwiXSwgaW5zdGFsbDogZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSB0LmludGVyYWN0LCBuID0gdC5kZWZhdWx0czsgdC51c2VQbHVnaW4ocW8uZGVmYXVsdCksIG4uYmFzZS5hY3Rpb25DaGVja2VyID0gbnVsbCwgbi5iYXNlLnN0eWxlQ3Vyc29yID0gITAsIExvLmV4dGVuZChuLnBlckFjdGlvbiwgeyBtYW51YWxTdGFydDogITEsIG1heDogMSAvIDAsIG1heFBlckVsZW1lbnQ6IDEsIGFsbG93RnJvbTogbnVsbCwgaWdub3JlRnJvbTogbnVsbCwgbW91c2VCdXR0b25zOiAxIH0pLCBlLm1heEludGVyYWN0aW9ucyA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiAkbyhlLCB0KTsgfSwgdC5hdXRvU3RhcnQgPSB7IG1heEludGVyYWN0aW9uczogMSAvIDAsIHdpdGhpbkludGVyYWN0aW9uTGltaXQ6IEtvLCBjdXJzb3JFbGVtZW50OiBudWxsIH07IH0sIGxpc3RlbmVyczogeyBcImludGVyYWN0aW9uczpkb3duXCI6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gZS5pbnRlcmFjdGlvbiwgciA9IGUucG9pbnRlciwgbyA9IGUuZXZlbnQsIGkgPSBlLmV2ZW50VGFyZ2V0OyBuLmludGVyYWN0aW5nKCkgfHwgSG8obiwgQm8obiwgciwgbywgaSwgdCksIHQpOyB9LCBcImludGVyYWN0aW9uczptb3ZlXCI6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuLCByLCBvLCBpLCBhLCB1OyByID0gdCwgbyA9IChuID0gZSkuaW50ZXJhY3Rpb24sIGkgPSBuLnBvaW50ZXIsIGEgPSBuLmV2ZW50LCB1ID0gbi5ldmVudFRhcmdldCwgXCJtb3VzZVwiICE9PSBvLnBvaW50ZXJUeXBlIHx8IG8ucG9pbnRlcklzRG93biB8fCBvLmludGVyYWN0aW5nKCkgfHwgSG8obywgQm8obywgaSwgYSwgdSwgciksIHIpLCBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IGUuaW50ZXJhY3Rpb247IGlmIChuLnBvaW50ZXJJc0Rvd24gJiYgIW4uaW50ZXJhY3RpbmcoKSAmJiBuLnBvaW50ZXJXYXNNb3ZlZCAmJiBuLnByZXBhcmVkLm5hbWUpIHtcbiAgICAgICAgICAgICAgICB0LmZpcmUoXCJhdXRvU3RhcnQ6YmVmb3JlLXN0YXJ0XCIsIGUpO1xuICAgICAgICAgICAgICAgIHZhciByID0gbi5pbnRlcmFjdGFibGUsIG8gPSBuLnByZXBhcmVkLm5hbWU7XG4gICAgICAgICAgICAgICAgbyAmJiByICYmIChyLm9wdGlvbnNbb10ubWFudWFsU3RhcnQgfHwgIUtvKHIsIG4uZWxlbWVudCwgbi5wcmVwYXJlZCwgdCkgPyBuLnN0b3AoKSA6IChuLnN0YXJ0KG4ucHJlcGFyZWQsIHIsIG4uZWxlbWVudCksIFpvKG4sIHQpKSk7XG4gICAgICAgICAgICB9IH0oZSwgdCk7IH0sIFwiaW50ZXJhY3Rpb25zOnN0b3BcIjogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSBlLmludGVyYWN0aW9uLCByID0gbi5pbnRlcmFjdGFibGU7IHIgJiYgci5vcHRpb25zLnN0eWxlQ3Vyc29yICYmIFFvKG4uZWxlbWVudCwgXCJcIiwgdCk7IH0gfSwgbWF4SW50ZXJhY3Rpb25zOiAkbywgd2l0aGluSW50ZXJhY3Rpb25MaW1pdDogS28sIHZhbGlkYXRlQWN0aW9uOiBHbyB9OyBOby5kZWZhdWx0ID0gSm87IHZhciBlaSA9IHt9OyBmdW5jdGlvbiB0aShlKSB7IHJldHVybiAodGkgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdHlwZW9mIGU7IH0gOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBlLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgZSAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgZTsgfSkoZSk7IH0gT2JqZWN0LmRlZmluZVByb3BlcnR5KGVpLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIGVpLmRlZmF1bHQgPSB2b2lkIDA7IHZhciBuaSwgcmkgPSBPKHt9KSwgb2kgPSBmdW5jdGlvbiAoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSB0aShlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBhaSgpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pOyByZXR1cm4gbjsgfSh5KSwgaWkgPSAobmkgPSBObykgJiYgbmkuX19lc01vZHVsZSA/IG5pIDogeyBkZWZhdWx0OiBuaSB9OyBmdW5jdGlvbiBhaSgpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBhaSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gdmFyIHVpID0geyBpZDogXCJhdXRvLXN0YXJ0L2RyYWdBeGlzXCIsIGxpc3RlbmVyczogeyBcImF1dG9TdGFydDpiZWZvcmUtc3RhcnRcIjogZnVuY3Rpb24gKGUsIHIpIHsgdmFyIG8gPSBlLmludGVyYWN0aW9uLCBpID0gZS5ldmVudFRhcmdldCwgdCA9IGUuZHgsIG4gPSBlLmR5OyBpZiAoXCJkcmFnXCIgPT09IG8ucHJlcGFyZWQubmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gTWF0aC5hYnModCksIHUgPSBNYXRoLmFicyhuKSwgcyA9IG8uaW50ZXJhY3RhYmxlLm9wdGlvbnMuZHJhZywgbCA9IHMuc3RhcnRBeGlzLCBjID0gdSA8IGEgPyBcInhcIiA6IGEgPCB1ID8gXCJ5XCIgOiBcInh5XCI7XG4gICAgICAgICAgICAgICAgaWYgKG8ucHJlcGFyZWQuYXhpcyA9IFwic3RhcnRcIiA9PT0gcy5sb2NrQXhpcyA/IGNbMF0gOiBzLmxvY2tBeGlzLCBcInh5XCIgIT0gYyAmJiBcInh5XCIgIT09IGwgJiYgbCAhPT0gYykge1xuICAgICAgICAgICAgICAgICAgICBvLnByZXBhcmVkLm5hbWUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmKGUpIHsgaWYgKGUgIT09IG8uaW50ZXJhY3RhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IG8uaW50ZXJhY3RhYmxlLm9wdGlvbnMuZHJhZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdC5tYW51YWxTdGFydCAmJiBlLnRlc3RJZ25vcmVBbGxvdyh0LCBwLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZS5nZXRBY3Rpb24oby5kb3duUG9pbnRlciwgby5kb3duRXZlbnQsIG8sIHApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuICYmIG4ubmFtZSA9PT0gcmkuQWN0aW9uTmFtZS5EcmFnICYmIGZ1bmN0aW9uIChlLCB0KSB7IGlmICghdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExOyB2YXIgbiA9IHQub3B0aW9uc1tyaS5BY3Rpb25OYW1lLkRyYWddLnN0YXJ0QXhpczsgcmV0dXJuIFwieHlcIiA9PT0gZSB8fCBcInh5XCIgPT09IG4gfHwgbiA9PT0gZTsgfShjLCBlKSAmJiBpaS5kZWZhdWx0LnZhbGlkYXRlQWN0aW9uKG4sIGUsIHAsIGksIHIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSB9XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHAgPSBpOyBvaS5lbGVtZW50KHApOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSByLmludGVyYWN0YWJsZXMuZm9yRWFjaE1hdGNoKHAsIGYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLnByZXBhcmVkLm5hbWUgPSByaS5BY3Rpb25OYW1lLkRyYWcsIG8uaW50ZXJhY3RhYmxlID0gZCwgby5lbGVtZW50ID0gcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSAoMCwgQy5wYXJlbnROb2RlKShwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gfSB9IH07IGVpLmRlZmF1bHQgPSB1aTsgdmFyIHNpID0ge307IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzaSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBzaS5kZWZhdWx0ID0gdm9pZCAwOyB2YXIgbGksIGNpID0gKGxpID0gTm8pICYmIGxpLl9fZXNNb2R1bGUgPyBsaSA6IHsgZGVmYXVsdDogbGkgfTsgZnVuY3Rpb24gZmkoZSkgeyB2YXIgdCA9IGUucHJlcGFyZWQgJiYgZS5wcmVwYXJlZC5uYW1lOyBpZiAoIXQpXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgbiA9IGUuaW50ZXJhY3RhYmxlLm9wdGlvbnM7IHJldHVybiBuW3RdLmhvbGQgfHwgblt0XS5kZWxheTsgfSB2YXIgcGkgPSB7IGlkOiBcImF1dG8tc3RhcnQvaG9sZFwiLCBpbnN0YWxsOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuZGVmYXVsdHM7IGUudXNlUGx1Z2luKGNpLmRlZmF1bHQpLCB0LnBlckFjdGlvbi5ob2xkID0gMCwgdC5wZXJBY3Rpb24uZGVsYXkgPSAwOyB9LCBsaXN0ZW5lcnM6IHsgXCJpbnRlcmFjdGlvbnM6bmV3XCI6IGZ1bmN0aW9uIChlKSB7IGUuaW50ZXJhY3Rpb24uYXV0b1N0YXJ0SG9sZFRpbWVyID0gbnVsbDsgfSwgXCJhdXRvU3RhcnQ6cHJlcGFyZWRcIjogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLmludGVyYWN0aW9uLCBuID0gZmkodCk7IDAgPCBuICYmICh0LmF1dG9TdGFydEhvbGRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyB0LnN0YXJ0KHQucHJlcGFyZWQsIHQuaW50ZXJhY3RhYmxlLCB0LmVsZW1lbnQpOyB9LCBuKSk7IH0sIFwiaW50ZXJhY3Rpb25zOm1vdmVcIjogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLmludGVyYWN0aW9uLCBuID0gZS5kdXBsaWNhdGU7IHQucG9pbnRlcldhc01vdmVkICYmICFuICYmIGNsZWFyVGltZW91dCh0LmF1dG9TdGFydEhvbGRUaW1lcik7IH0sIFwiYXV0b1N0YXJ0OmJlZm9yZS1zdGFydFwiOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuaW50ZXJhY3Rpb247IDAgPCBmaSh0KSAmJiAodC5wcmVwYXJlZC5uYW1lID0gbnVsbCk7IH0gfSwgZ2V0SG9sZER1cmF0aW9uOiBmaSB9OyBzaS5kZWZhdWx0ID0gcGk7IHZhciBkaSA9IHt9OyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGksIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgZGkuaW5zdGFsbCA9IGZ1bmN0aW9uIChlKSB7IGUudXNlUGx1Z2luKHZpLmRlZmF1bHQpLCBlLnVzZVBsdWdpbihtaS5kZWZhdWx0KSwgZS51c2VQbHVnaW4oeWkuZGVmYXVsdCk7IH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkaSwgXCJhdXRvU3RhcnRcIiwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2aS5kZWZhdWx0OyB9IH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGksIFwiZHJhZ0F4aXNcIiwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB5aS5kZWZhdWx0OyB9IH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGksIFwiaG9sZFwiLCB7IGVudW1lcmFibGU6ICEwLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1pLmRlZmF1bHQ7IH0gfSksIGRpLmlkID0gdm9pZCAwOyB2YXIgdmkgPSBnaShObyksIHlpID0gZ2koZWkpLCBtaSA9IGdpKHNpKTsgZnVuY3Rpb24gZ2koZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBkZWZhdWx0OiBlIH07IH0gZGkuaWQgPSBcImF1dG8tc3RhcnRcIjsgdmFyIGhpID0ge307IGZ1bmN0aW9uIGJpKGUpIHsgcmV0dXJuIChiaSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoaGksIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgaGkuaW5zdGFsbCA9IGppLCBoaS5kZWZhdWx0ID0gdm9pZCAwOyB2YXIgT2ksIHdpID0gKE9pID0gRGUpICYmIE9pLl9fZXNNb2R1bGUgPyBPaSA6IHsgZGVmYXVsdDogT2kgfSwgUGkgPSBmdW5jdGlvbiAoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSBiaShlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBfaSgpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pOyByZXR1cm4gbjsgfSh5KTsgZnVuY3Rpb24gX2koKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgZSA9IG5ldyBXZWFrTWFwOyByZXR1cm4gX2kgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlOyB9LCBlOyB9IGZ1bmN0aW9uIHhpKGUpIHsgcmV0dXJuIC9eKGFsd2F5c3xuZXZlcnxhdXRvKSQvLnRlc3QoZSkgPyAodGhpcy5vcHRpb25zLnByZXZlbnREZWZhdWx0ID0gZSwgdGhpcykgOiBQaS5ib29sKGUpID8gKHRoaXMub3B0aW9ucy5wcmV2ZW50RGVmYXVsdCA9IGUgPyBcImFsd2F5c1wiIDogXCJuZXZlclwiLCB0aGlzKSA6IHRoaXMub3B0aW9ucy5wcmV2ZW50RGVmYXVsdDsgfSBmdW5jdGlvbiBTaShlKSB7IHZhciB0ID0gZS5pbnRlcmFjdGlvbiwgbiA9IGUuZXZlbnQ7IHQuaW50ZXJhY3RhYmxlICYmIHQuaW50ZXJhY3RhYmxlLmNoZWNrQW5kUHJldmVudERlZmF1bHQobik7IH0gZnVuY3Rpb24gamkocikgeyB2YXIgZSA9IHIuSW50ZXJhY3RhYmxlOyBlLnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IHhpLCBlLnByb3RvdHlwZS5jaGVja0FuZFByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByID0gZS5vcHRpb25zLnByZXZlbnREZWZhdWx0OyBpZiAoXCJuZXZlclwiICE9PSByKVxuICAgICAgICBpZiAoXCJhbHdheXNcIiAhPT0gcikge1xuICAgICAgICAgICAgaWYgKHdpLmRlZmF1bHQuc3VwcG9ydHNQYXNzaXZlICYmIC9edG91Y2goc3RhcnR8bW92ZSkkLy50ZXN0KG4udHlwZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbyA9ICgwLCBzLmdldFdpbmRvdykobi50YXJnZXQpLmRvY3VtZW50LCBpID0gdC5nZXREb2NPcHRpb25zKG8pO1xuICAgICAgICAgICAgICAgIGlmICghaSB8fCAhaS5ldmVudHMgfHwgITEgIT09IGkuZXZlbnRzLnBhc3NpdmUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC9eKG1vdXNlfHBvaW50ZXJ8dG91Y2gpKihkb3dufHN0YXJ0KS9pLnRlc3Qobi50eXBlKSB8fCBQaS5lbGVtZW50KG4udGFyZ2V0KSAmJiAoMCwgQy5tYXRjaGVzU2VsZWN0b3IpKG4udGFyZ2V0LCBcImlucHV0LHNlbGVjdCx0ZXh0YXJlYSxbY29udGVudGVkaXRhYmxlPXRydWVdLFtjb250ZW50ZWRpdGFibGU9dHJ1ZV0gKlwiKSB8fCBuLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbi5wcmV2ZW50RGVmYXVsdCgpOyB9KHRoaXMsIHIsIGUpOyB9LCByLmludGVyYWN0aW9ucy5kb2NFdmVudHMucHVzaCh7IHR5cGU6IFwiZHJhZ3N0YXJ0XCIsIGxpc3RlbmVyOiBmdW5jdGlvbiAoZSkgeyBmb3IgKHZhciB0ID0gMDsgdCA8IHIuaW50ZXJhY3Rpb25zLmxpc3QubGVuZ3RoOyB0KyspIHtcbiAgICAgICAgICAgIHZhciBuID0gci5pbnRlcmFjdGlvbnMubGlzdFt0XTtcbiAgICAgICAgICAgIGlmIChuLmVsZW1lbnQgJiYgKG4uZWxlbWVudCA9PT0gZS50YXJnZXQgfHwgKDAsIEMubm9kZUNvbnRhaW5zKShuLmVsZW1lbnQsIGUudGFyZ2V0KSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgbi5pbnRlcmFjdGFibGUuY2hlY2tBbmRQcmV2ZW50RGVmYXVsdChlKTtcbiAgICAgICAgfSB9IH0pOyB9IHZhciBNaSA9IHsgaWQ6IFwiY29yZS9pbnRlcmFjdGFibGVQcmV2ZW50RGVmYXVsdFwiLCBpbnN0YWxsOiBqaSwgbGlzdGVuZXJzOiBbXCJkb3duXCIsIFwibW92ZVwiLCBcInVwXCIsIFwiY2FuY2VsXCJdLnJlZHVjZShmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gZVtcImludGVyYWN0aW9uczpcIi5jb25jYXQodCldID0gU2ksIGU7IH0sIHt9KSB9OyBoaS5kZWZhdWx0ID0gTWk7IHZhciBFaSA9IHt9OyBmdW5jdGlvbiBraShlKSB7IHJldHVybiAoa2kgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdHlwZW9mIGU7IH0gOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBlLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgZSAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgZTsgfSkoZSk7IH0gT2JqZWN0LmRlZmluZVByb3BlcnR5KEVpLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIEVpLmRlZmF1bHQgPSB2b2lkIDA7IHZhciBEaSwgVGksIEFpID0gKGZ1bmN0aW9uIChlKSB7IGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICAgICAgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT09IGtpKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IENpKCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbik7IHJldHVybiBuOyB9KHkpKTsgZnVuY3Rpb24gQ2koKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgZSA9IG5ldyBXZWFrTWFwOyByZXR1cm4gQ2kgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlOyB9LCBlOyB9IChUaSA9IERpID0gRGkgfHwge30pLnRvdWNoQWN0aW9uID0gXCJ0b3VjaEFjdGlvblwiLCBUaS5ib3hTaXppbmcgPSBcImJveFNpemluZ1wiLCBUaS5ub0xpc3RlbmVycyA9IFwibm9MaXN0ZW5lcnNcIjsgdmFyIE5pID0gXCJkZXYtdG9vbHNcIiwgWWkgPSB7IGlkOiBOaSwgaW5zdGFsbDogZnVuY3Rpb24gKCkgeyB9IH07IEVpLmRlZmF1bHQgPSBZaTsgdmFyIEZpID0ge307IGZ1bmN0aW9uIExpKGUpIHsgcmV0dXJuIChMaSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmksIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgRmkuc3RhcnRBbGwgPSBLaSwgRmkuc2V0QWxsID0gJGksIEZpLnByZXBhcmVTdGF0ZXMgPSBKaSwgRmkuc2V0Q29vcmRzID0gZWEsIEZpLnJlc3RvcmVDb29yZHMgPSB0YSwgRmkuc2hvdWxkRG8gPSBuYSwgRmkuZ2V0UmVjdE9mZnNldCA9IHJhLCBGaS5tYWtlTW9kaWZpZXIgPSBmdW5jdGlvbiAoZSwgcikgeyBmdW5jdGlvbiB0KGUpIHsgdmFyIHQgPSBlIHx8IHt9OyBmb3IgKHZhciBuIGluIHQuZW5hYmxlZCA9ICExICE9PSB0LmVuYWJsZWQsIG8pXG4gICAgICAgIG4gaW4gdCB8fCAodFtuXSA9IG9bbl0pOyByZXR1cm4geyBvcHRpb25zOiB0LCBtZXRob2RzOiBpLCBuYW1lOiByIH07IH0gdmFyIG8gPSBlLmRlZmF1bHRzLCBpID0geyBzdGFydDogZS5zdGFydCwgc2V0OiBlLnNldCwgYmVmb3JlRW5kOiBlLmJlZm9yZUVuZCwgc3RvcDogZS5zdG9wIH07IHIgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgciAmJiAodC5fZGVmYXVsdHMgPSBvLCB0Ll9tZXRob2RzID0gaSk7IHJldHVybiB0OyB9LCBGaS5kZWZhdWx0ID0gdm9pZCAwOyB2YXIgcWksIFZpID0gKHFpID0gbWUpICYmIHFpLl9fZXNNb2R1bGUgPyBxaSA6IHsgZGVmYXVsdDogcWkgfSwgR2kgPSBmdW5jdGlvbiAoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSBMaShlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBVaSgpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pOyByZXR1cm4gbjsgfShnZSk7IGZ1bmN0aW9uIFVpKCkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKVxuICAgICAgICByZXR1cm4gbnVsbDsgdmFyIGUgPSBuZXcgV2Vha01hcDsgcmV0dXJuIFVpID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZTsgfSwgZTsgfSBmdW5jdGlvbiBCaShlLCB0KSB7IHJldHVybiBmdW5jdGlvbiAoZSkgeyBpZiAoQXJyYXkuaXNBcnJheShlKSlcbiAgICAgICAgcmV0dXJuIGU7IH0oZSkgfHwgZnVuY3Rpb24gKGUsIHQpIHsgaWYgKCEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChlKSB8fCBcIltvYmplY3QgQXJndW1lbnRzXVwiID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpKVxuICAgICAgICByZXR1cm47IHZhciBuID0gW10sIHIgPSAhMCwgbyA9ICExLCBpID0gdm9pZCAwOyB0cnkge1xuICAgICAgICBmb3IgKHZhciBhLCB1ID0gZVtTeW1ib2wuaXRlcmF0b3JdKCk7ICEociA9IChhID0gdS5uZXh0KCkpLmRvbmUpICYmIChuLnB1c2goYS52YWx1ZSksICF0IHx8IG4ubGVuZ3RoICE9PSB0KTsgciA9ICEwKVxuICAgICAgICAgICAgO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBvID0gITAsIGkgPSBlO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHIgfHwgbnVsbCA9PSB1LnJldHVybiB8fCB1LnJldHVybigpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKG8pXG4gICAgICAgICAgICAgICAgdGhyb3cgaTtcbiAgICAgICAgfVxuICAgIH0gcmV0dXJuIG47IH0oZSwgdCkgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSgpOyB9IGZ1bmN0aW9uIEhpKGUsIHQsIG4sIHIpIHsgdmFyIG8gPSBlLmludGVyYWN0aW9uLCBpID0gZS5waGFzZSwgYSA9IG8uaW50ZXJhY3RhYmxlLCB1ID0gby5lbGVtZW50LCBzID0gby5lZGdlcywgbCA9IEppKGZ1bmN0aW9uIChlKSB7IHZhciBuID0gZS5pbnRlcmFjdGFibGUub3B0aW9uc1tlLnByZXBhcmVkLm5hbWVdLCB0ID0gbi5tb2RpZmllcnM7IGlmICh0ICYmIHQubGVuZ3RoKVxuICAgICAgICByZXR1cm4gdC5maWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuICFlLm9wdGlvbnMgfHwgITEgIT09IGUub3B0aW9ucy5lbmFibGVkOyB9KTsgcmV0dXJuIFtcInNuYXBcIiwgXCJzbmFwU2l6ZVwiLCBcInNuYXBFZGdlc1wiLCBcInJlc3RyaWN0XCIsIFwicmVzdHJpY3RFZGdlc1wiLCBcInJlc3RyaWN0U2l6ZVwiXS5tYXAoZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBuW2VdOyByZXR1cm4gdCAmJiB0LmVuYWJsZWQgJiYgeyBvcHRpb25zOiB0LCBtZXRob2RzOiB0Ll9tZXRob2RzIH07IH0pLmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gISFlOyB9KTsgfShvKSksIGMgPSAoMCwgVmkuZGVmYXVsdCkoe30sIG8ucmVjdCksIGYgPSByYShjLCB0KTsgby5tb2RpZmllcnMuc3RhcnRPZmZzZXQgPSBmLCBvLm1vZGlmaWVycy5zdGFydERlbHRhID0geyB4OiAwLCB5OiAwIH07IHZhciBwID0geyBpbnRlcmFjdGlvbjogbywgaW50ZXJhY3RhYmxlOiBhLCBlbGVtZW50OiB1LCBwYWdlQ29vcmRzOiB0LCBwaGFzZTogaSwgcmVjdDogYywgZWRnZXM6IHMsIHN0YXJ0T2Zmc2V0OiBmLCBzdGF0ZXM6IGwsIHByZUVuZDogITEsIHJlcXVpcmVFbmRPbmx5OiAhMSwgcHJldkNvb3JkczogbiwgcHJldlJlY3Q6IHIgfTsgcmV0dXJuIG8ubW9kaWZpZXJzLnN0YXRlcyA9IGwsIG8ubW9kaWZpZXJzLnJlc3VsdCA9IG51bGwsIEtpKHApLCBvLm1vZGlmaWVycy5yZXN1bHQgPSAkaShwKTsgfSBmdW5jdGlvbiBLaShlKSB7IGZvciAodmFyIHQgPSBlLnN0YXRlcywgbiA9IDA7IG4gPCB0Lmxlbmd0aDsgbisrKSB7XG4gICAgICAgIHZhciByID0gdFtuXTtcbiAgICAgICAgci5tZXRob2RzLnN0YXJ0ICYmIChlLnN0YXRlID0gcikubWV0aG9kcy5zdGFydChlKTtcbiAgICB9IGUuaW50ZXJhY3Rpb24uZWRnZXMgPSBlLmVkZ2VzOyB9IGZ1bmN0aW9uICRpKGUpIHsgdmFyIHQgPSBlLnByZXZDb29yZHMsIG4gPSBlLnByZXZSZWN0LCByID0gZS5waGFzZSwgbyA9IGUucHJlRW5kLCBpID0gZS5yZXF1aXJlRW5kT25seSwgYSA9IGUuc3RhdGVzLCB1ID0gZS5yZWN0OyBlLmNvb3JkcyA9ICgwLCBWaS5kZWZhdWx0KSh7fSwgZS5wYWdlQ29vcmRzKSwgZS5yZWN0ID0gKDAsIFZpLmRlZmF1bHQpKHt9LCB1KTsgZm9yICh2YXIgcyA9IHsgZGVsdGE6IHsgeDogMCwgeTogMCB9LCByZWN0RGVsdGE6IHsgbGVmdDogMCwgcmlnaHQ6IDAsIHRvcDogMCwgYm90dG9tOiAwIH0sIGNvb3JkczogZS5jb29yZHMsIHJlY3Q6IGUucmVjdCwgZXZlbnRQcm9wczogW10sIGNoYW5nZWQ6ICEwIH0sIGwgPSBlLmVkZ2VzIHx8IHsgbGVmdDogITAsIHJpZ2h0OiAhMCwgdG9wOiAhMCwgYm90dG9tOiAhMCB9LCBjID0gMDsgYyA8IGEubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgdmFyIGYgPSBhW2NdLCBwID0gZi5vcHRpb25zLCBkID0gKDAsIFZpLmRlZmF1bHQpKHt9LCBlLmNvb3JkcyksIHYgPSBudWxsO1xuICAgICAgICBmLm1ldGhvZHMuc2V0ICYmIG5hKHAsIG8sIGksIHIpICYmICh2ID0gKGUuc3RhdGUgPSBmKS5tZXRob2RzLnNldChlKSwgR2kuYWRkRWRnZXMobCwgZS5yZWN0LCB7IHg6IGUuY29vcmRzLnggLSBkLngsIHk6IGUuY29vcmRzLnkgLSBkLnkgfSkpLCBzLmV2ZW50UHJvcHMucHVzaCh2KTtcbiAgICB9IHMuZGVsdGEueCA9IGUuY29vcmRzLnggLSBlLnBhZ2VDb29yZHMueCwgcy5kZWx0YS55ID0gZS5jb29yZHMueSAtIGUucGFnZUNvb3Jkcy55LCBzLnJlY3REZWx0YS5sZWZ0ID0gZS5yZWN0LmxlZnQgLSB1LmxlZnQsIHMucmVjdERlbHRhLnJpZ2h0ID0gZS5yZWN0LnJpZ2h0IC0gdS5yaWdodCwgcy5yZWN0RGVsdGEudG9wID0gZS5yZWN0LnRvcCAtIHUudG9wLCBzLnJlY3REZWx0YS5ib3R0b20gPSBlLnJlY3QuYm90dG9tIC0gdS5ib3R0b207IHZhciB5ID0gIW4gfHwgcy5yZWN0LmxlZnQgIT09IG4ubGVmdCB8fCBzLnJlY3QucmlnaHQgIT09IG4ucmlnaHQgfHwgcy5yZWN0LnRvcCAhPT0gbi50b3AgfHwgcy5yZWN0LmJvdHRvbSAhPT0gbi5ib3R0b207IHJldHVybiBzLmNoYW5nZWQgPSAhdCB8fCB0LnggIT09IHMuY29vcmRzLnggfHwgdC55ICE9PSBzLmNvb3Jkcy55IHx8IHksIHM7IH0gZnVuY3Rpb24gUWkoZSkgeyB2YXIgdCA9IGUuaW50ZXJhY3Rpb24sIG4gPSBlLnBoYXNlLCByID0gZS5wcmVFbmQsIG8gPSBlLnNraXBNb2RpZmllcnMsIGkgPSB0LmludGVyYWN0YWJsZSwgYSA9IHQuZWxlbWVudCwgdSA9IG8gPyB0Lm1vZGlmaWVycy5zdGF0ZXMuc2xpY2UobykgOiB0Lm1vZGlmaWVycy5zdGF0ZXMsIHMgPSBlLnByZXZDb29yZHMgfHwgKHQubW9kaWZpZXJzLnJlc3VsdCA/IHQubW9kaWZpZXJzLnJlc3VsdC5jb29yZHMgOiBudWxsKSwgbCA9IGUucHJldlJlY3QgfHwgKHQubW9kaWZpZXJzLnJlc3VsdCA/IHQubW9kaWZpZXJzLnJlc3VsdC5yZWN0IDogbnVsbCksIGMgPSAkaSh7IGludGVyYWN0aW9uOiB0LCBpbnRlcmFjdGFibGU6IGksIGVsZW1lbnQ6IGEsIHByZUVuZDogciwgcGhhc2U6IG4sIHBhZ2VDb29yZHM6IGUubW9kaWZpZWRDb29yZHMgfHwgdC5jb29yZHMuY3VyLnBhZ2UsIHByZXZDb29yZHM6IHMsIHJlY3Q6IHQucmVjdCwgZWRnZXM6IHQuZWRnZXMsIHByZXZSZWN0OiBsLCBzdGF0ZXM6IHUsIHJlcXVpcmVFbmRPbmx5OiAhMSB9KTsgaWYgKCEodC5tb2RpZmllcnMucmVzdWx0ID0gYykuY2hhbmdlZCAmJiB0LmludGVyYWN0aW5nKCkpXG4gICAgICAgIHJldHVybiAhMTsgaWYgKGUubW9kaWZpZWRDb29yZHMpIHtcbiAgICAgICAgdmFyIGYgPSB0LmNvb3Jkcy5jdXIucGFnZSwgcCA9IGUubW9kaWZpZWRDb29yZHMueCAtIGYueCwgZCA9IGUubW9kaWZpZWRDb29yZHMueSAtIGYueTtcbiAgICAgICAgYy5jb29yZHMueCArPSBwLCBjLmNvb3Jkcy55ICs9IGQsIGMuZGVsdGEueCArPSBwLCBjLmRlbHRhLnkgKz0gZDtcbiAgICB9IGVhKGUpOyB9IGZ1bmN0aW9uIFppKGUpIHsgdmFyIHQgPSBlLmludGVyYWN0aW9uLCBuID0gdC5tb2RpZmllcnMuc3RhdGVzOyBpZiAobiAmJiBuLmxlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciByID0gKDAsIFZpLmRlZmF1bHQpKHsgc3RhdGVzOiBuLCBpbnRlcmFjdGFibGU6IHQuaW50ZXJhY3RhYmxlLCBlbGVtZW50OiB0LmVsZW1lbnQsIHJlY3Q6IG51bGwgfSwgZSksIG8gPSAwOyBvIDwgbi5sZW5ndGg7IG8rKykge1xuICAgICAgICAgICAgdmFyIGkgPSBuW29dO1xuICAgICAgICAgICAgKHIuc3RhdGUgPSBpKS5tZXRob2RzLnN0b3AgJiYgaS5tZXRob2RzLnN0b3Aocik7XG4gICAgICAgIH1cbiAgICAgICAgZS5pbnRlcmFjdGlvbi5tb2RpZmllcnMuc3RhdGVzID0gbnVsbCwgZS5pbnRlcmFjdGlvbi5tb2RpZmllcnMuZW5kUmVzdWx0ID0gbnVsbDtcbiAgICB9IH0gZnVuY3Rpb24gSmkoZSkgeyBmb3IgKHZhciB0ID0gW10sIG4gPSAwOyBuIDwgZS5sZW5ndGg7IG4rKykge1xuICAgICAgICB2YXIgciA9IGVbbl0sIG8gPSByLm9wdGlvbnMsIGkgPSByLm1ldGhvZHMsIGEgPSByLm5hbWU7XG4gICAgICAgIG8gJiYgITEgPT09IG8uZW5hYmxlZCB8fCB0LnB1c2goeyBvcHRpb25zOiBvLCBtZXRob2RzOiBpLCBpbmRleDogbiwgbmFtZTogYSB9KTtcbiAgICB9IHJldHVybiB0OyB9IGZ1bmN0aW9uIGVhKGUpIHsgdmFyIHQgPSBlLmludGVyYWN0aW9uLCBuID0gZS5waGFzZSwgciA9IHQuY29vcmRzLmN1ciwgbyA9IHQuY29vcmRzLnN0YXJ0LCBpID0gdC5tb2RpZmllcnMsIGEgPSBpLnJlc3VsdCwgdSA9IGkuc3RhcnREZWx0YSwgcyA9IGEuZGVsdGE7IFwic3RhcnRcIiA9PT0gbiAmJiAoMCwgVmkuZGVmYXVsdCkodC5tb2RpZmllcnMuc3RhcnREZWx0YSwgYS5kZWx0YSk7IGZvciAodmFyIGwgPSAwOyBsIDwgW1tvLCB1XSwgW3IsIHNdXS5sZW5ndGg7IGwrKykge1xuICAgICAgICB2YXIgYyA9IEJpKFtbbywgdV0sIFtyLCBzXV1bbF0sIDIpLCBmID0gY1swXSwgcCA9IGNbMV07XG4gICAgICAgIGYucGFnZS54ICs9IHAueCwgZi5wYWdlLnkgKz0gcC55LCBmLmNsaWVudC54ICs9IHAueCwgZi5jbGllbnQueSArPSBwLnk7XG4gICAgfSB2YXIgZCA9IHQubW9kaWZpZXJzLnJlc3VsdC5yZWN0RGVsdGEsIHYgPSBlLnJlY3QgfHwgdC5yZWN0OyB2LmxlZnQgKz0gZC5sZWZ0LCB2LnJpZ2h0ICs9IGQucmlnaHQsIHYudG9wICs9IGQudG9wLCB2LmJvdHRvbSArPSBkLmJvdHRvbSwgdi53aWR0aCA9IHYucmlnaHQgLSB2LmxlZnQsIHYuaGVpZ2h0ID0gdi5ib3R0b20gLSB2LnRvcDsgfSBmdW5jdGlvbiB0YShlKSB7IHZhciB0ID0gZS5pbnRlcmFjdGlvbiwgbiA9IHQuY29vcmRzLCByID0gdC5yZWN0LCBvID0gdC5tb2RpZmllcnM7IGlmIChvLnJlc3VsdCkge1xuICAgICAgICBmb3IgKHZhciBpID0gby5zdGFydERlbHRhLCBhID0gby5yZXN1bHQsIHUgPSBhLmRlbHRhLCBzID0gYS5yZWN0RGVsdGEsIGwgPSBbW24uc3RhcnQsIGldLCBbbi5jdXIsIHVdXSwgYyA9IDA7IGMgPCBsLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICB2YXIgZiA9IEJpKGxbY10sIDIpLCBwID0gZlswXSwgZCA9IGZbMV07XG4gICAgICAgICAgICBwLnBhZ2UueCAtPSBkLngsIHAucGFnZS55IC09IGQueSwgcC5jbGllbnQueCAtPSBkLngsIHAuY2xpZW50LnkgLT0gZC55O1xuICAgICAgICB9XG4gICAgICAgIHIubGVmdCAtPSBzLmxlZnQsIHIucmlnaHQgLT0gcy5yaWdodCwgci50b3AgLT0gcy50b3AsIHIuYm90dG9tIC09IHMuYm90dG9tO1xuICAgIH0gfSBmdW5jdGlvbiBuYShlLCB0LCBuLCByKSB7IHJldHVybiBlID8gITEgIT09IGUuZW5hYmxlZCAmJiAodCB8fCAhZS5lbmRPbmx5KSAmJiAoIW4gfHwgZS5lbmRPbmx5IHx8IGUuYWx3YXlzT25FbmQpICYmIChlLnNldFN0YXJ0IHx8IFwic3RhcnRcIiAhPT0gcikgOiAhbjsgfSBmdW5jdGlvbiByYShlLCB0KSB7IHJldHVybiBlID8geyBsZWZ0OiB0LnggLSBlLmxlZnQsIHRvcDogdC55IC0gZS50b3AsIHJpZ2h0OiBlLnJpZ2h0IC0gdC54LCBib3R0b206IGUuYm90dG9tIC0gdC55IH0gOiB7IGxlZnQ6IDAsIHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMCB9OyB9IGZ1bmN0aW9uIG9hKGUpIHsgdmFyIHQgPSBlLmlFdmVudCwgbiA9IGUuaW50ZXJhY3Rpb24ubW9kaWZpZXJzLnJlc3VsdDsgbiAmJiAodC5tb2RpZmllcnMgPSBuLmV2ZW50UHJvcHMpOyB9IHZhciBpYSA9IHsgaWQ6IFwibW9kaWZpZXJzL2Jhc2VcIiwgaW5zdGFsbDogZnVuY3Rpb24gKGUpIHsgZS5kZWZhdWx0cy5wZXJBY3Rpb24ubW9kaWZpZXJzID0gW107IH0sIGxpc3RlbmVyczogeyBcImludGVyYWN0aW9uczpuZXdcIjogZnVuY3Rpb24gKGUpIHsgZS5pbnRlcmFjdGlvbi5tb2RpZmllcnMgPSB7IHN0YXJ0T2Zmc2V0OiB7IGxlZnQ6IDAsIHJpZ2h0OiAwLCB0b3A6IDAsIGJvdHRvbTogMCB9LCBzdGF0ZXM6IG51bGwsIHJlc3VsdDogbnVsbCwgZW5kUmVzdWx0OiBudWxsLCBzdGFydERlbHRhOiBudWxsIH07IH0sIFwiaW50ZXJhY3Rpb25zOmJlZm9yZS1hY3Rpb24tc3RhcnRcIjogZnVuY3Rpb24gKGUpIHsgSGkoZSwgZS5pbnRlcmFjdGlvbi5jb29yZHMuc3RhcnQucGFnZSwgbnVsbCwgbnVsbCksIGVhKGUpOyB9LCBcImludGVyYWN0aW9uczphZnRlci1hY3Rpb24tc3RhcnRcIjogdGEsIFwiaW50ZXJhY3Rpb25zOmJlZm9yZS1hY3Rpb24tbW92ZVwiOiBRaSwgXCJpbnRlcmFjdGlvbnM6YWZ0ZXItYWN0aW9uLW1vdmVcIjogdGEsIFwiaW50ZXJhY3Rpb25zOmFjdGlvbi1yZXN1bWVcIjogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLmludGVyYWN0aW9uLm1vZGlmaWVycy5yZXN1bHQsIG4gPSB0LmNvb3JkcywgciA9IHQucmVjdDsgWmkoZSksIEhpKGUsIGUuaW50ZXJhY3Rpb24uY29vcmRzLmN1ci5wYWdlLCBuLCByKSwgUWkoZSk7IH0sIFwiaW50ZXJhY3Rpb25zOmJlZm9yZS1hY3Rpb24tZW5kXCI6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5pbnRlcmFjdGlvbiwgbiA9IGUuZXZlbnQsIHIgPSBlLm5vUHJlRW5kLCBvID0gdC5tb2RpZmllcnMuc3RhdGVzOyBpZiAoIXIgJiYgbyAmJiBvLmxlbmd0aClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gITEsIGEgPSAwOyBhIDwgby5sZW5ndGg7IGErKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IG9bYV0sIHMgPSAoZS5zdGF0ZSA9IHUpLm9wdGlvbnMsIGwgPSB1Lm1ldGhvZHMsIGMgPSBsLmJlZm9yZUVuZCAmJiBsLmJlZm9yZUVuZChlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5tb2RpZmllcnMuZW5kUmVzdWx0ID0gYywgITE7XG4gICAgICAgICAgICAgICAgICAgICFpICYmIG5hKHMsICEwLCAhMCkgJiYgKHQubW92ZSh7IGV2ZW50OiBuLCBwcmVFbmQ6ICEwIH0pLCBpID0gITApO1xuICAgICAgICAgICAgICAgIH0gfSwgXCJpbnRlcmFjdGlvbnM6YWN0aW9uLXN0YXJ0XCI6IG9hLCBcImludGVyYWN0aW9uczphY3Rpb24tbW92ZVwiOiBvYSwgXCJpbnRlcmFjdGlvbnM6YWN0aW9uLWVuZFwiOiBvYSwgXCJpbnRlcmFjdGlvbnM6c3RvcFwiOiBaaSB9LCBiZWZvcmU6IFtcImFjdGlvbnNcIiwgXCJhY3Rpb24vZHJhZ1wiLCBcImFjdGlvbnMvcmVzaXplXCIsIFwiYWN0aW9ucy9nZXN0dXJlXCJdIH07IEZpLmRlZmF1bHQgPSBpYTsgdmFyIGFhID0ge307IGZ1bmN0aW9uIHVhKGUpIHsgcmV0dXJuICh1YSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoYWEsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgYWEuZGVmYXVsdCA9IHZvaWQgMDsgdmFyIHNhLCBsYSA9IGRhKEZpKSwgY2EgPSBkYShwdCksIGZhID0gKHNhID0gdXQpICYmIHNhLl9fZXNNb2R1bGUgPyBzYSA6IHsgZGVmYXVsdDogc2EgfTsgZnVuY3Rpb24gcGEoKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgZSA9IG5ldyBXZWFrTWFwOyByZXR1cm4gcGEgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlOyB9LCBlOyB9IGZ1bmN0aW9uIGRhKGUpIHsgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKVxuICAgICAgICByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPT0gdWEoZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKVxuICAgICAgICByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gcGEoKTsgaWYgKHQgJiYgdC5oYXMoZSkpXG4gICAgICAgIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7fSwgciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBvIGluIGUpXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykpIHtcbiAgICAgICAgICAgIHZhciBpID0gciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBudWxsO1xuICAgICAgICAgICAgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIG8sIGkpIDogbltvXSA9IGVbb107XG4gICAgICAgIH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH0gZnVuY3Rpb24gdmEoZSwgdCkgeyB2YXIgbiA9IGhhKGUpLCByID0gbi5yZXNpc3RhbmNlLCBvID0gLU1hdGgubG9nKG4uZW5kU3BlZWQgLyB0LnYwKSAvIHI7IHQueDAgPSBlLnByZXZFdmVudC5wYWdlLngsIHQueTAgPSBlLnByZXZFdmVudC5wYWdlLnksIHQudDAgPSB0LnN0YXJ0RXZlbnQudGltZVN0YW1wIC8gMWUzLCB0LnN4ID0gdC5zeSA9IDAsIHQubW9kaWZpZWRYZSA9IHQueGUgPSAodC52eDAgLSBvKSAvIHIsIHQubW9kaWZpZWRZZSA9IHQueWUgPSAodC52eTAgLSBvKSAvIHIsIHQudGUgPSBvLCB0LmxhbWJkYV92MCA9IHIgLyB0LnYwLCB0Lm9uZV92ZV92MCA9IDEgLSBuLmVuZFNwZWVkIC8gdC52MDsgfSBmdW5jdGlvbiB5YShlKSB7IGdhKGUpLCBjYS5wb2ludGVyLnNldENvb3JkRGVsdGFzKGUuY29vcmRzLmRlbHRhLCBlLmNvb3Jkcy5wcmV2LCBlLmNvb3Jkcy5jdXIpLCBjYS5wb2ludGVyLnNldENvb3JkVmVsb2NpdHkoZS5jb29yZHMudmVsb2NpdHksIGUuY29vcmRzLmRlbHRhKTsgdmFyIHQgPSBlLmluZXJ0aWEsIG4gPSBoYShlKS5yZXNpc3RhbmNlLCByID0gZS5fbm93KCkgLyAxZTMgLSB0LnQwOyBpZiAociA8IHQudGUpIHtcbiAgICAgICAgdmFyIG8gPSAxIC0gKE1hdGguZXhwKC1uICogcikgLSB0LmxhbWJkYV92MCkgLyB0Lm9uZV92ZV92MDtcbiAgICAgICAgaWYgKHQubW9kaWZpZWRYZSA9PT0gdC54ZSAmJiB0Lm1vZGlmaWVkWWUgPT09IHQueWUpXG4gICAgICAgICAgICB0LnN4ID0gdC54ZSAqIG8sIHQuc3kgPSB0LnllICogbztcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgaSA9IGNhLmdldFF1YWRyYXRpY0N1cnZlUG9pbnQoMCwgMCwgdC54ZSwgdC55ZSwgdC5tb2RpZmllZFhlLCB0Lm1vZGlmaWVkWWUsIG8pO1xuICAgICAgICAgICAgdC5zeCA9IGkueCwgdC5zeSA9IGkueTtcbiAgICAgICAgfVxuICAgICAgICBlLm1vdmUoeyBldmVudDogdC5zdGFydEV2ZW50IH0pLCB0LnRpbWVvdXQgPSBmYS5kZWZhdWx0LnJlcXVlc3QoZnVuY3Rpb24gKCkgeyByZXR1cm4geWEoZSk7IH0pO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHQuc3ggPSB0Lm1vZGlmaWVkWGUsIHQuc3kgPSB0Lm1vZGlmaWVkWWUsIGUubW92ZSh7IGV2ZW50OiB0LnN0YXJ0RXZlbnQgfSksIGUuZW5kKHQuc3RhcnRFdmVudCksIHQuYWN0aXZlID0gITEsIGUuc2ltdWxhdGlvbiA9IG51bGw7IGNhLnBvaW50ZXIuY29weUNvb3JkcyhlLmNvb3Jkcy5wcmV2LCBlLmNvb3Jkcy5jdXIpOyB9IGZ1bmN0aW9uIG1hKGUpIHsgZ2EoZSk7IHZhciB0ID0gZS5pbmVydGlhLCBuID0gZS5fbm93KCkgLSB0LnQwLCByID0gaGEoZSkuc21vb3RoRW5kRHVyYXRpb247IG4gPCByID8gKHQuc3ggPSBjYS5lYXNlT3V0UXVhZChuLCAwLCB0LnhlLCByKSwgdC5zeSA9IGNhLmVhc2VPdXRRdWFkKG4sIDAsIHQueWUsIHIpLCBlLm1vdmUoeyBldmVudDogdC5zdGFydEV2ZW50IH0pLCB0LnRpbWVvdXQgPSBmYS5kZWZhdWx0LnJlcXVlc3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gbWEoZSk7IH0pKSA6ICh0LnN4ID0gdC54ZSwgdC5zeSA9IHQueWUsIGUubW92ZSh7IGV2ZW50OiB0LnN0YXJ0RXZlbnQgfSksIGUuZW5kKHQuc3RhcnRFdmVudCksIHQuc21vb3RoRW5kID0gdC5hY3RpdmUgPSAhMSwgZS5zaW11bGF0aW9uID0gbnVsbCk7IH0gZnVuY3Rpb24gZ2EoZSkgeyB2YXIgdCA9IGUuaW5lcnRpYTsgaWYgKHQuYWN0aXZlKSB7XG4gICAgICAgIHZhciBuID0gdC51cENvb3Jkcy5wYWdlLCByID0gdC51cENvb3Jkcy5jbGllbnQ7XG4gICAgICAgIGNhLnBvaW50ZXIuc2V0Q29vcmRzKGUuY29vcmRzLmN1ciwgW3sgcGFnZVg6IG4ueCArIHQuc3gsIHBhZ2VZOiBuLnkgKyB0LnN5LCBjbGllbnRYOiByLnggKyB0LnN4LCBjbGllbnRZOiByLnkgKyB0LnN5IH1dLCBlLl9ub3coKSk7XG4gICAgfSB9IGZ1bmN0aW9uIGhhKGUpIHsgdmFyIHQgPSBlLmludGVyYWN0YWJsZSwgbiA9IGUucHJlcGFyZWQ7IHJldHVybiB0ICYmIHQub3B0aW9ucyAmJiBuLm5hbWUgJiYgdC5vcHRpb25zW24ubmFtZV0uaW5lcnRpYTsgfSBUbi5FdmVudFBoYXNlLlJlc3VtZSA9IFwicmVzdW1lXCIsIFRuLkV2ZW50UGhhc2UuSW5lcnRpYVN0YXJ0ID0gXCJpbmVydGlhc3RhcnRcIjsgdmFyIGJhID0geyBpZDogXCJpbmVydGlhXCIsIGluc3RhbGw6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5kZWZhdWx0czsgZS51c2VQbHVnaW4obGEuZGVmYXVsdCksIHQucGVyQWN0aW9uLmluZXJ0aWEgPSB7IGVuYWJsZWQ6ICExLCByZXNpc3RhbmNlOiAxMCwgbWluU3BlZWQ6IDEwMCwgZW5kU3BlZWQ6IDEwLCBhbGxvd1Jlc3VtZTogITAsIHNtb290aEVuZER1cmF0aW9uOiAzMDAgfTsgfSwgbGlzdGVuZXJzOiB7IFwiaW50ZXJhY3Rpb25zOm5ld1wiOiBmdW5jdGlvbiAoZSkgeyBlLmludGVyYWN0aW9uLmluZXJ0aWEgPSB7IGFjdGl2ZTogITEsIHNtb290aEVuZDogITEsIGFsbG93UmVzdW1lOiAhMSwgdXBDb29yZHM6IHt9LCB0aW1lb3V0OiBudWxsIH07IH0sIFwiaW50ZXJhY3Rpb25zOmJlZm9yZS1hY3Rpb24tZW5kXCI6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gZS5pbnRlcmFjdGlvbiwgciA9IGUuZXZlbnQsIG8gPSBlLm5vUHJlRW5kLCBpID0gbi5pbmVydGlhOyBpZiAoIW4uaW50ZXJhY3RpbmcoKSB8fCBuLnNpbXVsYXRpb24gJiYgbi5zaW11bGF0aW9uLmFjdGl2ZSB8fCBvKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyB2YXIgYSwgdSA9IGhhKG4pLCBzID0gbi5fbm93KCksIGwgPSBuLmNvb3Jkcy52ZWxvY2l0eS5jbGllbnQsIGMgPSBjYS5oeXBvdChsLngsIGwueSksIGYgPSAhMSwgcCA9IHUgJiYgdS5lbmFibGVkICYmIFwiZ2VzdHVyZVwiICE9PSBuLnByZXBhcmVkLm5hbWUgJiYgciAhPT0gaS5zdGFydEV2ZW50LCBkID0gcCAmJiBzIC0gbi5jb29yZHMuY3VyLnRpbWVTdGFtcCA8IDUwICYmIGMgPiB1Lm1pblNwZWVkICYmIGMgPiB1LmVuZFNwZWVkLCB2ID0geyBpbnRlcmFjdGlvbjogbiwgaW50ZXJhY3RhYmxlOiBuLmludGVyYWN0YWJsZSwgZWxlbWVudDogbi5lbGVtZW50LCByZWN0OiBuLnJlY3QsIGVkZ2VzOiBuLmVkZ2VzLCBwYWdlQ29vcmRzOiBuLmNvb3Jkcy5jdXIucGFnZSwgc3RhdGVzOiBwICYmIG4ubW9kaWZpZXJzLnN0YXRlcy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGNhLmV4dGVuZCh7fSwgZSk7IH0pLCBwcmVFbmQ6ICEwLCBwcmV2Q29vcmRzOiBudWxsLCBwcmV2UmVjdDogbnVsbCwgcmVxdWlyZUVuZE9ubHk6IG51bGwsIHBoYXNlOiBUbi5FdmVudFBoYXNlLkluZXJ0aWFTdGFydCB9OyByZXR1cm4gcCAmJiAhZCAmJiAodi5wcmV2Q29vcmRzID0gbi5tb2RpZmllcnMucmVzdWx0LmNvb3Jkcywgdi5wcmV2UmVjdCA9IG4ubW9kaWZpZXJzLnJlc3VsdC5yZWN0LCB2LnJlcXVpcmVFbmRPbmx5ID0gITEsIGYgPSAoYSA9IGxhLnNldEFsbCh2KSkuY2hhbmdlZCksIGQgfHwgZiA/IChjYS5wb2ludGVyLmNvcHlDb29yZHMoaS51cENvb3Jkcywgbi5jb29yZHMuY3VyKSwgbGEuc2V0Q29vcmRzKHYpLCBuLnBvaW50ZXJzWzBdLnBvaW50ZXIgPSBpLnN0YXJ0RXZlbnQgPSBuZXcgdC5JbnRlcmFjdEV2ZW50KG4sIHIsIG4ucHJlcGFyZWQubmFtZSwgVG4uRXZlbnRQaGFzZS5JbmVydGlhU3RhcnQsIG4uZWxlbWVudCksIGxhLnJlc3RvcmVDb29yZHModiksIGkudDAgPSBzLCBpLmFjdGl2ZSA9ICEwLCBpLmFsbG93UmVzdW1lID0gdS5hbGxvd1Jlc3VtZSwgbi5zaW11bGF0aW9uID0gaSwgbi5pbnRlcmFjdGFibGUuZmlyZShpLnN0YXJ0RXZlbnQpLCBkID8gKGkudngwID0gbi5jb29yZHMudmVsb2NpdHkuY2xpZW50LngsIGkudnkwID0gbi5jb29yZHMudmVsb2NpdHkuY2xpZW50LnksIGkudjAgPSBjLCB2YShuLCBpKSwgY2EuZXh0ZW5kKHYucGFnZUNvb3Jkcywgbi5jb29yZHMuY3VyLnBhZ2UpLCB2LnBhZ2VDb29yZHMueCArPSBpLnhlLCB2LnBhZ2VDb29yZHMueSArPSBpLnllLCB2LnByZXZDb29yZHMgPSBudWxsLCB2LnByZXZSZWN0ID0gbnVsbCwgdi5yZXF1aXJlRW5kT25seSA9ICEwLCBhID0gbGEuc2V0QWxsKHYpLCBpLm1vZGlmaWVkWGUgKz0gYS5kZWx0YS54LCBpLm1vZGlmaWVkWWUgKz0gYS5kZWx0YS55LCBpLnRpbWVvdXQgPSBmYS5kZWZhdWx0LnJlcXVlc3QoZnVuY3Rpb24gKCkgeyByZXR1cm4geWEobik7IH0pKSA6IChpLnNtb290aEVuZCA9ICEwLCBpLnhlID0gYS5kZWx0YS54LCBpLnllID0gYS5kZWx0YS55LCBpLnN4ID0gaS5zeSA9IDAsIGkudGltZW91dCA9IGZhLmRlZmF1bHQucmVxdWVzdChmdW5jdGlvbiAoKSB7IHJldHVybiBtYShuKTsgfSkpLCAhMSkgOiBudWxsOyB9LCBcImludGVyYWN0aW9uczpkb3duXCI6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gZS5pbnRlcmFjdGlvbiwgciA9IGUuZXZlbnQsIG8gPSBlLnBvaW50ZXIsIGkgPSBlLmV2ZW50VGFyZ2V0LCBhID0gbi5pbmVydGlhOyBpZiAoYS5hY3RpdmUpXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdSA9IGk7IGNhLmlzLmVsZW1lbnQodSk7KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSBuLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhLmRlZmF1bHQuY2FuY2VsKGEudGltZW91dCksIGEuYWN0aXZlID0gITEsIG4uc2ltdWxhdGlvbiA9IG51bGwsIG4udXBkYXRlUG9pbnRlcihvLCByLCBpLCAhMCksIGNhLnBvaW50ZXIuc2V0Q29vcmRzKG4uY29vcmRzLmN1ciwgbi5wb2ludGVycy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUucG9pbnRlcjsgfSksIG4uX25vdygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0geyBpbnRlcmFjdGlvbjogbiwgcGhhc2U6IFRuLkV2ZW50UGhhc2UuUmVzdW1lIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmZpcmUoXCJpbnRlcmFjdGlvbnM6YWN0aW9uLXJlc3VtZVwiLCBzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gbmV3IHQuSW50ZXJhY3RFdmVudChuLCByLCBuLnByZXBhcmVkLm5hbWUsIFRuLkV2ZW50UGhhc2UuUmVzdW1lLCBuLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbi5fZmlyZUV2ZW50KGwpLCBjYS5wb2ludGVyLmNvcHlDb29yZHMobi5jb29yZHMucHJldiwgbi5jb29yZHMuY3VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHUgPSBjYS5kb20ucGFyZW50Tm9kZSh1KTtcbiAgICAgICAgICAgICAgICB9IH0sIFwiaW50ZXJhY3Rpb25zOnN0b3BcIjogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLmludGVyYWN0aW9uLCBuID0gdC5pbmVydGlhOyBuLmFjdGl2ZSAmJiAoZmEuZGVmYXVsdC5jYW5jZWwobi50aW1lb3V0KSwgbi5hY3RpdmUgPSAhMSwgdC5zaW11bGF0aW9uID0gbnVsbCk7IH0gfSwgYmVmb3JlOiBbXCJtb2RpZmllcnMvYmFzZVwiXSwgY2FsY0luZXJ0aWE6IHZhLCBpbmVydGlhVGljazogeWEsIHNtb3RoRW5kVGljazogbWEsIHVwZGF0ZUluZXJ0aWFDb29yZHM6IGdhIH07IGFhLmRlZmF1bHQgPSBiYTsgdmFyIE9hID0ge307IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBPYS5kZWZhdWx0ID0gdm9pZCAwOyB2YXIgd2EsIFBhID0gKHdhID0gbWUpICYmIHdhLl9fZXNNb2R1bGUgPyB3YSA6IHsgZGVmYXVsdDogd2EgfTsgZnVuY3Rpb24gX2EodCwgZSkgeyB2YXIgbiA9IE9iamVjdC5rZXlzKHQpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICB2YXIgciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCk7XG4gICAgICAgIGUgJiYgKHIgPSByLmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCBlKS5lbnVtZXJhYmxlOyB9KSksIG4ucHVzaC5hcHBseShuLCByKTtcbiAgICB9IHJldHVybiBuOyB9IGZ1bmN0aW9uIHhhKHQpIHsgZm9yICh2YXIgZSA9IDE7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgdmFyIG4gPSBudWxsICE9IGFyZ3VtZW50c1tlXSA/IGFyZ3VtZW50c1tlXSA6IHt9O1xuICAgICAgICBlICUgMiA/IF9hKE9iamVjdChuKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgU2EodCwgZSwgbltlXSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhuKSkgOiBfYShPYmplY3QobikpLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobiwgZSkpOyB9KTtcbiAgICB9IHJldHVybiB0OyB9IGZ1bmN0aW9uIFNhKGUsIHQsIG4pIHsgcmV0dXJuIHQgaW4gZSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCB0LCB7IHZhbHVlOiBuLCBlbnVtZXJhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCwgd3JpdGFibGU6ICEwIH0pIDogZVt0XSA9IG4sIGU7IH0gZnVuY3Rpb24gamEoZSwgdCwgbikgeyB2YXIgciA9IGUuc3RhcnRDb29yZHMsIG8gPSBlLmVkZ2VTaWduOyB0ID8gbi55ID0gci55ICsgKG4ueCAtIHIueCkgKiBvIDogbi54ID0gci54ICsgKG4ueSAtIHIueSkgKiBvOyB9IGZ1bmN0aW9uIE1hKGUsIHQsIG4sIHIpIHsgdmFyIG8gPSBlLnN0YXJ0UmVjdCwgaSA9IGUuc3RhcnRDb29yZHMsIGEgPSBlLnJhdGlvLCB1ID0gZS5lZGdlU2lnbjsgaWYgKHQpIHtcbiAgICAgICAgdmFyIHMgPSByLndpZHRoIC8gYTtcbiAgICAgICAgbi55ID0gaS55ICsgKHMgLSBvLmhlaWdodCkgKiB1O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGwgPSByLmhlaWdodCAqIGE7XG4gICAgICAgIG4ueCA9IGkueCArIChsIC0gby53aWR0aCkgKiB1O1xuICAgIH0gfSB2YXIgRWEgPSB7IHN0YXJ0OiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuc3RhdGUsIG4gPSBlLnJlY3QsIHIgPSBlLmVkZ2VzLCBvID0gZS5wYWdlQ29vcmRzLCBpID0gdC5vcHRpb25zLnJhdGlvLCBhID0gdC5vcHRpb25zLCB1ID0gYS5lcXVhbERlbHRhLCBzID0gYS5tb2RpZmllcnM7IFwicHJlc2VydmVcIiA9PT0gaSAmJiAoaSA9IG4ud2lkdGggLyBuLmhlaWdodCksIHQuc3RhcnRDb29yZHMgPSAoMCwgUGEuZGVmYXVsdCkoe30sIG8pLCB0LnN0YXJ0UmVjdCA9ICgwLCBQYS5kZWZhdWx0KSh7fSwgbiksIHQucmF0aW8gPSBpLCB0LmVxdWFsRGVsdGEgPSB1OyB2YXIgbCA9IHQubGlua2VkRWRnZXMgPSB7IHRvcDogci50b3AgfHwgci5sZWZ0ICYmICFyLmJvdHRvbSwgbGVmdDogci5sZWZ0IHx8IHIudG9wICYmICFyLnJpZ2h0LCBib3R0b206IHIuYm90dG9tIHx8IHIucmlnaHQgJiYgIXIudG9wLCByaWdodDogci5yaWdodCB8fCByLmJvdHRvbSAmJiAhci5sZWZ0IH07IGlmICh0LnhJc1ByaW1hcnlBeGlzID0gISghci5sZWZ0ICYmICFyLnJpZ2h0KSwgdC5lcXVhbERlbHRhKVxuICAgICAgICAgICAgdC5lZGdlU2lnbiA9IChsLmxlZnQgPyAxIDogLTEpICogKGwudG9wID8gMSA6IC0xKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYyA9IHQueElzUHJpbWFyeUF4aXMgPyBsLnRvcCA6IGwubGVmdDtcbiAgICAgICAgICAgIHQuZWRnZVNpZ24gPSBjID8gLTEgOiAxO1xuICAgICAgICB9IGlmICgoMCwgUGEuZGVmYXVsdCkoZS5lZGdlcywgbCksIHMgJiYgcy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdC5zdWJTdGF0ZXMgPSAoMCwgRmkucHJlcGFyZVN0YXRlcykocykubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLm9wdGlvbnMgPSB4YSh7fSwgZS5vcHRpb25zKSwgZTsgfSksICgwLCBGaS5zdGFydEFsbCkoeGEoe30sIGUsIHsgc3RhdGVzOiB0LnN1YlN0YXRlcyB9KSk7IH0sIHNldDogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLnN0YXRlLCBuID0gZS5yZWN0LCByID0gZS5jb29yZHMsIG8gPSAoMCwgUGEuZGVmYXVsdCkoe30sIHIpLCBpID0gdC5lcXVhbERlbHRhID8gamEgOiBNYTsgaWYgKGkodCwgdC54SXNQcmltYXJ5QXhpcywgciwgbiksICF0LnN1YlN0YXRlcylcbiAgICAgICAgICAgIHJldHVybiBudWxsOyB2YXIgYSA9ICgwLCBQYS5kZWZhdWx0KSh7fSwgbik7ICgwLCBnZS5hZGRFZGdlcykodC5saW5rZWRFZGdlcywgYSwgeyB4OiByLnggLSBvLngsIHk6IHIueSAtIG8ueSB9KTsgdmFyIHUgPSAoMCwgRmkuc2V0QWxsKSh4YSh7fSwgZSwgeyByZWN0OiBhLCBlZGdlczogdC5saW5rZWRFZGdlcywgcGFnZUNvb3Jkczogciwgc3RhdGVzOiB0LnN1YlN0YXRlcywgcHJldkNvb3JkczogciwgcHJldlJlY3Q6IGEgfSkpLCBzID0gdS5kZWx0YTsgdS5jaGFuZ2VkICYmIChpKHQsIE1hdGguYWJzKHMueCkgPiBNYXRoLmFicyhzLnkpLCB1LmNvb3JkcywgdS5yZWN0KSwgKDAsIFBhLmRlZmF1bHQpKHIsIHUuY29vcmRzKSk7IHJldHVybiB1LmV2ZW50UHJvcHM7IH0sIGRlZmF1bHRzOiB7IHJhdGlvOiBcInByZXNlcnZlXCIsIGVxdWFsRGVsdGE6ICExLCBtb2RpZmllcnM6IFtdLCBlbmFibGVkOiAhMSB9IH07IE9hLmRlZmF1bHQgPSBFYTsgdmFyIGthID0ge307IGZ1bmN0aW9uIERhKGUpIHsgcmV0dXJuIChEYSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoa2EsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwga2EuZ2V0UmVzdHJpY3Rpb25SZWN0ID0gV2EsIGthLmRlZmF1bHQgPSB2b2lkIDA7IHZhciBUYSwgSWEgPSAoVGEgPSBtZSkgJiYgVGEuX19lc01vZHVsZSA/IFRhIDogeyBkZWZhdWx0OiBUYSB9LCBBYSA9IFJhKHkpLCB6YSA9IFJhKGdlKTsgZnVuY3Rpb24gQ2EoKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgZSA9IG5ldyBXZWFrTWFwOyByZXR1cm4gQ2EgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlOyB9LCBlOyB9IGZ1bmN0aW9uIFJhKGUpIHsgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKVxuICAgICAgICByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPT0gRGEoZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKVxuICAgICAgICByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gQ2EoKTsgaWYgKHQgJiYgdC5oYXMoZSkpXG4gICAgICAgIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7fSwgciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBvIGluIGUpXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykpIHtcbiAgICAgICAgICAgIHZhciBpID0gciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBudWxsO1xuICAgICAgICAgICAgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIG8sIGkpIDogbltvXSA9IGVbb107XG4gICAgICAgIH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH0gZnVuY3Rpb24gV2EoZSwgdCwgbikgeyByZXR1cm4gQWEuZnVuYyhlKSA/IHphLnJlc29sdmVSZWN0TGlrZShlLCB0LmludGVyYWN0YWJsZSwgdC5lbGVtZW50LCBbbi54LCBuLnksIHRdKSA6IHphLnJlc29sdmVSZWN0TGlrZShlLCB0LmludGVyYWN0YWJsZSwgdC5lbGVtZW50KTsgfSB2YXIgWGEgPSB7IHN0YXJ0OiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUucmVjdCwgbiA9IGUuc3RhcnRPZmZzZXQsIHIgPSBlLnN0YXRlLCBvID0gZS5pbnRlcmFjdGlvbiwgaSA9IGUucGFnZUNvb3JkcywgYSA9IHIub3B0aW9ucywgdSA9IGEuZWxlbWVudFJlY3QsIHMgPSAoMCwgSWEuZGVmYXVsdCkoeyBsZWZ0OiAwLCB0b3A6IDAsIHJpZ2h0OiAwLCBib3R0b206IDAgfSwgYS5vZmZzZXQgfHwge30pOyBpZiAodCAmJiB1KSB7XG4gICAgICAgICAgICB2YXIgbCA9IFdhKGEucmVzdHJpY3Rpb24sIG8sIGkpO1xuICAgICAgICAgICAgaWYgKGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IGwucmlnaHQgLSBsLmxlZnQgLSB0LndpZHRoLCBmID0gbC5ib3R0b20gLSBsLnRvcCAtIHQuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGMgPCAwICYmIChzLmxlZnQgKz0gYywgcy5yaWdodCArPSBjKSwgZiA8IDAgJiYgKHMudG9wICs9IGYsIHMuYm90dG9tICs9IGYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcy5sZWZ0ICs9IG4ubGVmdCAtIHQud2lkdGggKiB1LmxlZnQsIHMudG9wICs9IG4udG9wIC0gdC5oZWlnaHQgKiB1LnRvcCwgcy5yaWdodCArPSBuLnJpZ2h0IC0gdC53aWR0aCAqICgxIC0gdS5yaWdodCksIHMuYm90dG9tICs9IG4uYm90dG9tIC0gdC5oZWlnaHQgKiAoMSAtIHUuYm90dG9tKTtcbiAgICAgICAgfSByLm9mZnNldCA9IHM7IH0sIHNldDogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLmNvb3JkcywgbiA9IGUuaW50ZXJhY3Rpb24sIHIgPSBlLnN0YXRlLCBvID0gci5vcHRpb25zLCBpID0gci5vZmZzZXQsIGEgPSBXYShvLnJlc3RyaWN0aW9uLCBuLCB0KTsgaWYgKGEpIHtcbiAgICAgICAgICAgIHZhciB1ID0gemEueHl3aFRvVGxicihhKTtcbiAgICAgICAgICAgIHQueCA9IE1hdGgubWF4KE1hdGgubWluKHUucmlnaHQgLSBpLnJpZ2h0LCB0LngpLCB1LmxlZnQgKyBpLmxlZnQpLCB0LnkgPSBNYXRoLm1heChNYXRoLm1pbih1LmJvdHRvbSAtIGkuYm90dG9tLCB0LnkpLCB1LnRvcCArIGkudG9wKTtcbiAgICAgICAgfSB9LCBkZWZhdWx0czogeyByZXN0cmljdGlvbjogbnVsbCwgZWxlbWVudFJlY3Q6IG51bGwsIG9mZnNldDogbnVsbCwgZW5kT25seTogITEsIGVuYWJsZWQ6ICExIH0gfTsga2EuZGVmYXVsdCA9IFhhOyB2YXIgTmEgPSB7fTsgZnVuY3Rpb24gWWEoZSkgeyByZXR1cm4gKFlhID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHR5cGVvZiBlOyB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7IH0pKGUpOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOYSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBOYS5kZWZhdWx0ID0gdm9pZCAwOyB2YXIgRmEsIExhID0gKEZhID0gbWUpICYmIEZhLl9fZXNNb2R1bGUgPyBGYSA6IHsgZGVmYXVsdDogRmEgfSwgcWEgPSBmdW5jdGlvbiAoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSBZYShlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBWYSgpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pOyByZXR1cm4gbjsgfShnZSk7IGZ1bmN0aW9uIFZhKCkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKVxuICAgICAgICByZXR1cm4gbnVsbDsgdmFyIGUgPSBuZXcgV2Vha01hcDsgcmV0dXJuIFZhID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZTsgfSwgZTsgfSB2YXIgR2EgPSB7IHRvcDogMSAvIDAsIGxlZnQ6IDEgLyAwLCBib3R0b206IC0xIC8gMCwgcmlnaHQ6IC0xIC8gMCB9LCBVYSA9IHsgdG9wOiAtMSAvIDAsIGxlZnQ6IC0xIC8gMCwgYm90dG9tOiAxIC8gMCwgcmlnaHQ6IDEgLyAwIH07IGZ1bmN0aW9uIEJhKGUsIHQpIHsgZm9yICh2YXIgbiA9IFtcInRvcFwiLCBcImxlZnRcIiwgXCJib3R0b21cIiwgXCJyaWdodFwiXSwgciA9IDA7IHIgPCBuLmxlbmd0aDsgcisrKSB7XG4gICAgICAgIHZhciBvID0gbltyXTtcbiAgICAgICAgbyBpbiBlIHx8IChlW29dID0gdFtvXSk7XG4gICAgfSByZXR1cm4gZTsgfSB2YXIgSGEgPSB7IG5vSW5uZXI6IEdhLCBub091dGVyOiBVYSwgc3RhcnQ6IGZ1bmN0aW9uIChlKSB7IHZhciB0LCBuID0gZS5pbnRlcmFjdGlvbiwgciA9IGUuc3RhcnRPZmZzZXQsIG8gPSBlLnN0YXRlLCBpID0gby5vcHRpb25zOyBpZiAoaSkge1xuICAgICAgICAgICAgdmFyIGEgPSAoMCwga2EuZ2V0UmVzdHJpY3Rpb25SZWN0KShpLm9mZnNldCwgbiwgbi5jb29yZHMuc3RhcnQucGFnZSk7XG4gICAgICAgICAgICB0ID0gcWEucmVjdFRvWFkoYSk7XG4gICAgICAgIH0gdCA9IHQgfHwgeyB4OiAwLCB5OiAwIH0sIG8ub2Zmc2V0ID0geyB0b3A6IHQueSArIHIudG9wLCBsZWZ0OiB0LnggKyByLmxlZnQsIGJvdHRvbTogdC55IC0gci5ib3R0b20sIHJpZ2h0OiB0LnggLSByLnJpZ2h0IH07IH0sIHNldDogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLmNvb3JkcywgbiA9IGUuZWRnZXMsIHIgPSBlLmludGVyYWN0aW9uLCBvID0gZS5zdGF0ZSwgaSA9IG8ub2Zmc2V0LCBhID0gby5vcHRpb25zOyBpZiAobikge1xuICAgICAgICAgICAgdmFyIHUgPSAoMCwgTGEuZGVmYXVsdCkoe30sIHQpLCBzID0gKDAsIGthLmdldFJlc3RyaWN0aW9uUmVjdCkoYS5pbm5lciwgciwgdSkgfHwge30sIGwgPSAoMCwga2EuZ2V0UmVzdHJpY3Rpb25SZWN0KShhLm91dGVyLCByLCB1KSB8fCB7fTtcbiAgICAgICAgICAgIEJhKHMsIEdhKSwgQmEobCwgVWEpLCBuLnRvcCA/IHQueSA9IE1hdGgubWluKE1hdGgubWF4KGwudG9wICsgaS50b3AsIHUueSksIHMudG9wICsgaS50b3ApIDogbi5ib3R0b20gJiYgKHQueSA9IE1hdGgubWF4KE1hdGgubWluKGwuYm90dG9tICsgaS5ib3R0b20sIHUueSksIHMuYm90dG9tICsgaS5ib3R0b20pKSwgbi5sZWZ0ID8gdC54ID0gTWF0aC5taW4oTWF0aC5tYXgobC5sZWZ0ICsgaS5sZWZ0LCB1LngpLCBzLmxlZnQgKyBpLmxlZnQpIDogbi5yaWdodCAmJiAodC54ID0gTWF0aC5tYXgoTWF0aC5taW4obC5yaWdodCArIGkucmlnaHQsIHUueCksIHMucmlnaHQgKyBpLnJpZ2h0KSk7XG4gICAgICAgIH0gfSwgZGVmYXVsdHM6IHsgaW5uZXI6IG51bGwsIG91dGVyOiBudWxsLCBvZmZzZXQ6IG51bGwsIGVuZE9ubHk6ICExLCBlbmFibGVkOiAhMSB9IH07IE5hLmRlZmF1bHQgPSBIYTsgdmFyIEthID0ge307IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShLYSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBLYS5kZWZhdWx0ID0gdm9pZCAwOyB2YXIgJGEgPSBaYShtZSksIFFhID0gWmEoa2EpOyBmdW5jdGlvbiBaYShlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7IGRlZmF1bHQ6IGUgfTsgfSB2YXIgSmEgPSAoMCwgJGEuZGVmYXVsdCkoeyBnZXQgZWxlbWVudFJlY3QoKSB7IHJldHVybiB7IHRvcDogMCwgbGVmdDogMCwgYm90dG9tOiAxLCByaWdodDogMSB9OyB9LCBzZXQgZWxlbWVudFJlY3QoZSkgeyB9IH0sIFFhLmRlZmF1bHQuZGVmYXVsdHMpLCBldSA9IHsgc3RhcnQ6IFFhLmRlZmF1bHQuc3RhcnQsIHNldDogUWEuZGVmYXVsdC5zZXQsIGRlZmF1bHRzOiBKYSB9OyBLYS5kZWZhdWx0ID0gZXU7IHZhciB0dSA9IHt9OyBmdW5jdGlvbiBudShlKSB7IHJldHVybiAobnUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdHlwZW9mIGU7IH0gOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBlLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgZSAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgZTsgfSkoZSk7IH0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHR1LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIHR1LmRlZmF1bHQgPSB2b2lkIDA7IHZhciBydSA9IHV1KG1lKSwgb3UgPSBmdW5jdGlvbiAoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSBudShlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBhdSgpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pOyByZXR1cm4gbjsgfShnZSksIGl1ID0gdXUoTmEpOyBmdW5jdGlvbiBhdSgpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBhdSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24gdXUoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBkZWZhdWx0OiBlIH07IH0gdmFyIHN1ID0geyB3aWR0aDogLTEgLyAwLCBoZWlnaHQ6IC0xIC8gMCB9LCBsdSA9IHsgd2lkdGg6IDEgLyAwLCBoZWlnaHQ6IDEgLyAwIH07IHZhciBjdSA9IHsgc3RhcnQ6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBpdS5kZWZhdWx0LnN0YXJ0KGUpOyB9LCBzZXQ6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5pbnRlcmFjdGlvbiwgbiA9IGUuc3RhdGUsIHIgPSBlLnJlY3QsIG8gPSBlLmVkZ2VzLCBpID0gbi5vcHRpb25zOyBpZiAobykge1xuICAgICAgICAgICAgdmFyIGEgPSBvdS50bGJyVG9YeXdoKCgwLCBrYS5nZXRSZXN0cmljdGlvblJlY3QpKGkubWluLCB0LCBlLmNvb3JkcykpIHx8IHN1LCB1ID0gb3UudGxiclRvWHl3aCgoMCwga2EuZ2V0UmVzdHJpY3Rpb25SZWN0KShpLm1heCwgdCwgZS5jb29yZHMpKSB8fCBsdTtcbiAgICAgICAgICAgIG4ub3B0aW9ucyA9IHsgZW5kT25seTogaS5lbmRPbmx5LCBpbm5lcjogKDAsIHJ1LmRlZmF1bHQpKHt9LCBpdS5kZWZhdWx0Lm5vSW5uZXIpLCBvdXRlcjogKDAsIHJ1LmRlZmF1bHQpKHt9LCBpdS5kZWZhdWx0Lm5vT3V0ZXIpIH0sIG8udG9wID8gKG4ub3B0aW9ucy5pbm5lci50b3AgPSByLmJvdHRvbSAtIGEuaGVpZ2h0LCBuLm9wdGlvbnMub3V0ZXIudG9wID0gci5ib3R0b20gLSB1LmhlaWdodCkgOiBvLmJvdHRvbSAmJiAobi5vcHRpb25zLmlubmVyLmJvdHRvbSA9IHIudG9wICsgYS5oZWlnaHQsIG4ub3B0aW9ucy5vdXRlci5ib3R0b20gPSByLnRvcCArIHUuaGVpZ2h0KSwgby5sZWZ0ID8gKG4ub3B0aW9ucy5pbm5lci5sZWZ0ID0gci5yaWdodCAtIGEud2lkdGgsIG4ub3B0aW9ucy5vdXRlci5sZWZ0ID0gci5yaWdodCAtIHUud2lkdGgpIDogby5yaWdodCAmJiAobi5vcHRpb25zLmlubmVyLnJpZ2h0ID0gci5sZWZ0ICsgYS53aWR0aCwgbi5vcHRpb25zLm91dGVyLnJpZ2h0ID0gci5sZWZ0ICsgdS53aWR0aCksIGl1LmRlZmF1bHQuc2V0KGUpLCBuLm9wdGlvbnMgPSBpO1xuICAgICAgICB9IH0sIGRlZmF1bHRzOiB7IG1pbjogbnVsbCwgbWF4OiBudWxsLCBlbmRPbmx5OiAhMSwgZW5hYmxlZDogITEgfSB9OyB0dS5kZWZhdWx0ID0gY3U7IHZhciBmdSA9IHt9OyBmdW5jdGlvbiBwdShlKSB7IHJldHVybiAocHUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdHlwZW9mIGU7IH0gOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBlLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgZSAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgZTsgfSkoZSk7IH0gT2JqZWN0LmRlZmluZVByb3BlcnR5KGZ1LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIGZ1LmRlZmF1bHQgPSB2b2lkIDA7IHZhciBkdSA9IGZ1bmN0aW9uIChlKSB7IGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICAgICAgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT09IHB1KGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IHZ1KCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbik7IHJldHVybiBuOyB9KHB0KTsgZnVuY3Rpb24gdnUoKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgZSA9IG5ldyBXZWFrTWFwOyByZXR1cm4gdnUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlOyB9LCBlOyB9IHZhciB5dSA9IHsgc3RhcnQ6IGZ1bmN0aW9uIChlKSB7IHZhciB0LCBuLCByLCBvID0gZS5pbnRlcmFjdGlvbiwgaSA9IGUuaW50ZXJhY3RhYmxlLCBhID0gZS5lbGVtZW50LCB1ID0gZS5yZWN0LCBzID0gZS5zdGF0ZSwgbCA9IGUuc3RhcnRPZmZzZXQsIGMgPSBzLm9wdGlvbnMsIGYgPSBjLm9mZnNldFdpdGhPcmlnaW4gPyAobiA9ICh0ID0gZSkuaW50ZXJhY3Rpb24uZWxlbWVudCwgZHUucmVjdC5yZWN0VG9YWShkdS5yZWN0LnJlc29sdmVSZWN0TGlrZSh0LnN0YXRlLm9wdGlvbnMub3JpZ2luLCBudWxsLCBudWxsLCBbbl0pKSB8fCBkdS5nZXRPcmlnaW5YWSh0LmludGVyYWN0YWJsZSwgbiwgdC5pbnRlcmFjdGlvbi5wcmVwYXJlZC5uYW1lKSkgOiB7IHg6IDAsIHk6IDAgfTsgaWYgKFwic3RhcnRDb29yZHNcIiA9PT0gYy5vZmZzZXQpXG4gICAgICAgICAgICByID0geyB4OiBvLmNvb3Jkcy5zdGFydC5wYWdlLngsIHk6IG8uY29vcmRzLnN0YXJ0LnBhZ2UueSB9O1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBwID0gZHUucmVjdC5yZXNvbHZlUmVjdExpa2UoYy5vZmZzZXQsIGksIGEsIFtvXSk7XG4gICAgICAgICAgICAociA9IGR1LnJlY3QucmVjdFRvWFkocCkgfHwgeyB4OiAwLCB5OiAwIH0pLnggKz0gZi54LCByLnkgKz0gZi55O1xuICAgICAgICB9IHZhciBkID0gYy5yZWxhdGl2ZVBvaW50czsgcy5vZmZzZXRzID0gdSAmJiBkICYmIGQubGVuZ3RoID8gZC5tYXAoZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIHsgaW5kZXg6IHQsIHJlbGF0aXZlUG9pbnQ6IGUsIHg6IGwubGVmdCAtIHUud2lkdGggKiBlLnggKyByLngsIHk6IGwudG9wIC0gdS5oZWlnaHQgKiBlLnkgKyByLnkgfTsgfSkgOiBbZHUuZXh0ZW5kKHsgaW5kZXg6IDAsIHJlbGF0aXZlUG9pbnQ6IG51bGwgfSwgcildOyB9LCBzZXQ6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5pbnRlcmFjdGlvbiwgbiA9IGUuY29vcmRzLCByID0gZS5zdGF0ZSwgbyA9IHIub3B0aW9ucywgaSA9IHIub2Zmc2V0cywgYSA9IGR1LmdldE9yaWdpblhZKHQuaW50ZXJhY3RhYmxlLCB0LmVsZW1lbnQsIHQucHJlcGFyZWQubmFtZSksIHUgPSBkdS5leHRlbmQoe30sIG4pLCBzID0gW107IG8ub2Zmc2V0V2l0aE9yaWdpbiB8fCAodS54IC09IGEueCwgdS55IC09IGEueSk7IGZvciAodmFyIGwgPSAwOyBsIDwgaS5sZW5ndGg7IGwrKylcbiAgICAgICAgICAgIGZvciAodmFyIGMgPSBpW2xdLCBmID0gdS54IC0gYy54LCBwID0gdS55IC0gYy55LCBkID0gMCwgdiA9IG8udGFyZ2V0cy5sZW5ndGg7IGQgPCB2OyBkKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgeSA9IG8udGFyZ2V0c1tkXSwgbSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAobSA9IGR1LmlzLmZ1bmMoeSkgPyB5KGYsIHAsIHQsIGMsIGQpIDogeSkgJiYgcy5wdXNoKHsgeDogKGR1LmlzLm51bWJlcihtLngpID8gbS54IDogZikgKyBjLngsIHk6IChkdS5pcy5udW1iZXIobS55KSA/IG0ueSA6IHApICsgYy55LCByYW5nZTogZHUuaXMubnVtYmVyKG0ucmFuZ2UpID8gbS5yYW5nZSA6IG8ucmFuZ2UsIHNvdXJjZTogeSwgaW5kZXg6IGQsIG9mZnNldDogYyB9KTtcbiAgICAgICAgICAgIH0gZm9yICh2YXIgZyA9IHsgdGFyZ2V0OiBudWxsLCBpblJhbmdlOiAhMSwgZGlzdGFuY2U6IDAsIHJhbmdlOiAwLCBkZWx0YTogeyB4OiAwLCB5OiAwIH0gfSwgaCA9IDA7IGggPCBzLmxlbmd0aDsgaCsrKSB7XG4gICAgICAgICAgICB2YXIgYiA9IHNbaF0sIE8gPSBiLnJhbmdlLCB3ID0gYi54IC0gdS54LCBQID0gYi55IC0gdS55LCBfID0gZHUuaHlwb3QodywgUCksIHggPSBfIDw9IE87XG4gICAgICAgICAgICBPID09PSAxIC8gMCAmJiBnLmluUmFuZ2UgJiYgZy5yYW5nZSAhPT0gMSAvIDAgJiYgKHggPSAhMSksIGcudGFyZ2V0ICYmICEoeCA/IGcuaW5SYW5nZSAmJiBPICE9PSAxIC8gMCA/IF8gLyBPIDwgZy5kaXN0YW5jZSAvIGcucmFuZ2UgOiBPID09PSAxIC8gMCAmJiBnLnJhbmdlICE9PSAxIC8gMCB8fCBfIDwgZy5kaXN0YW5jZSA6ICFnLmluUmFuZ2UgJiYgXyA8IGcuZGlzdGFuY2UpIHx8IChnLnRhcmdldCA9IGIsIGcuZGlzdGFuY2UgPSBfLCBnLnJhbmdlID0gTywgZy5pblJhbmdlID0geCwgZy5kZWx0YS54ID0gdywgZy5kZWx0YS55ID0gUCk7XG4gICAgICAgIH0gcmV0dXJuIGcuaW5SYW5nZSAmJiAobi54ID0gZy50YXJnZXQueCwgbi55ID0gZy50YXJnZXQueSksIHIuY2xvc2VzdCA9IGc7IH0sIGRlZmF1bHRzOiB7IHJhbmdlOiAxIC8gMCwgdGFyZ2V0czogbnVsbCwgb2Zmc2V0OiBudWxsLCBvZmZzZXRXaXRoT3JpZ2luOiAhMCwgb3JpZ2luOiBudWxsLCByZWxhdGl2ZVBvaW50czogbnVsbCwgZW5kT25seTogITEsIGVuYWJsZWQ6ICExIH0gfTsgZnUuZGVmYXVsdCA9IHl1OyB2YXIgbXUgPSB7fTsgZnVuY3Rpb24gZ3UoZSkgeyByZXR1cm4gKGd1ID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHR5cGVvZiBlOyB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7IH0pKGUpOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtdSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBtdS5kZWZhdWx0ID0gdm9pZCAwOyB2YXIgaHUgPSBQdShtZSksIGJ1ID0gZnVuY3Rpb24gKGUpIHsgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKVxuICAgICAgICByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPT0gZ3UoZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKVxuICAgICAgICByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gd3UoKTsgaWYgKHQgJiYgdC5oYXMoZSkpXG4gICAgICAgIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7fSwgciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBvIGluIGUpXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykpIHtcbiAgICAgICAgICAgIHZhciBpID0gciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBudWxsO1xuICAgICAgICAgICAgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIG8sIGkpIDogbltvXSA9IGVbb107XG4gICAgICAgIH0gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKTsgcmV0dXJuIG47IH0oeSksIE91ID0gUHUoZnUpOyBmdW5jdGlvbiB3dSgpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiB3dSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24gUHUoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBkZWZhdWx0OiBlIH07IH0gZnVuY3Rpb24gX3UoZSwgdCkgeyByZXR1cm4gZnVuY3Rpb24gKGUpIHsgaWYgKEFycmF5LmlzQXJyYXkoZSkpXG4gICAgICAgIHJldHVybiBlOyB9KGUpIHx8IGZ1bmN0aW9uIChlLCB0KSB7IGlmICghKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoZSkgfHwgXCJbb2JqZWN0IEFyZ3VtZW50c11cIiA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpKSlcbiAgICAgICAgcmV0dXJuOyB2YXIgbiA9IFtdLCByID0gITAsIG8gPSAhMSwgaSA9IHZvaWQgMDsgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgYSwgdSA9IGVbU3ltYm9sLml0ZXJhdG9yXSgpOyAhKHIgPSAoYSA9IHUubmV4dCgpKS5kb25lKSAmJiAobi5wdXNoKGEudmFsdWUpLCAhdCB8fCBuLmxlbmd0aCAhPT0gdCk7IHIgPSAhMClcbiAgICAgICAgICAgIDtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgbyA9ICEwLCBpID0gZTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByIHx8IG51bGwgPT0gdS5yZXR1cm4gfHwgdS5yZXR1cm4oKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChvKVxuICAgICAgICAgICAgICAgIHRocm93IGk7XG4gICAgICAgIH1cbiAgICB9IHJldHVybiBuOyB9KGUsIHQpIHx8IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0oKTsgfSB2YXIgeHUgPSB7IHN0YXJ0OiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuc3RhdGUsIG4gPSBlLmVkZ2VzLCByID0gdC5vcHRpb25zOyBpZiAoIW4pXG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgZS5zdGF0ZSA9IHsgb3B0aW9uczogeyB0YXJnZXRzOiBudWxsLCByZWxhdGl2ZVBvaW50czogW3sgeDogbi5sZWZ0ID8gMCA6IDEsIHk6IG4udG9wID8gMCA6IDEgfV0sIG9mZnNldDogci5vZmZzZXQgfHwgXCJzZWxmXCIsIG9yaWdpbjogeyB4OiAwLCB5OiAwIH0sIHJhbmdlOiByLnJhbmdlIH0gfSwgdC50YXJnZXRGaWVsZHMgPSB0LnRhcmdldEZpZWxkcyB8fCBbW1wid2lkdGhcIiwgXCJoZWlnaHRcIl0sIFtcInhcIiwgXCJ5XCJdXSwgT3UuZGVmYXVsdC5zdGFydChlKSwgdC5vZmZzZXRzID0gZS5zdGF0ZS5vZmZzZXRzLCBlLnN0YXRlID0gdDsgfSwgc2V0OiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuaW50ZXJhY3Rpb24sIG4gPSBlLnN0YXRlLCByID0gZS5jb29yZHMsIG8gPSBuLm9wdGlvbnMsIGkgPSBuLm9mZnNldHMsIGEgPSB7IHg6IHIueCAtIGlbMF0ueCwgeTogci55IC0gaVswXS55IH07IG4ub3B0aW9ucyA9ICgwLCBodS5kZWZhdWx0KSh7fSwgbyksIG4ub3B0aW9ucy50YXJnZXRzID0gW107IGZvciAodmFyIHUgPSAwOyB1IDwgKG8udGFyZ2V0cyB8fCBbXSkubGVuZ3RoOyB1KyspIHtcbiAgICAgICAgICAgIHZhciBzID0gKG8udGFyZ2V0cyB8fCBbXSlbdV0sIGwgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAobCA9IGJ1LmZ1bmMocykgPyBzKGEueCwgYS55LCB0KSA6IHMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IG4udGFyZ2V0RmllbGRzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmID0gX3Uobi50YXJnZXRGaWVsZHNbY10sIDIpLCBwID0gZlswXSwgZCA9IGZbMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChwIGluIGwgfHwgZCBpbiBsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsLnggPSBsW3BdLCBsLnkgPSBsW2RdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbi5vcHRpb25zLnRhcmdldHMucHVzaChsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB2YXIgdiA9IE91LmRlZmF1bHQuc2V0KGUpOyByZXR1cm4gbi5vcHRpb25zID0gbywgdjsgfSwgZGVmYXVsdHM6IHsgcmFuZ2U6IDEgLyAwLCB0YXJnZXRzOiBudWxsLCBvZmZzZXQ6IG51bGwsIGVuZE9ubHk6ICExLCBlbmFibGVkOiAhMSB9IH07IG11LmRlZmF1bHQgPSB4dTsgdmFyIFN1ID0ge307IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBTdS5kZWZhdWx0ID0gdm9pZCAwOyB2YXIganUgPSBrdSh4ZSksIE11ID0ga3UobWUpLCBFdSA9IGt1KG11KTsgZnVuY3Rpb24ga3UoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBkZWZhdWx0OiBlIH07IH0gdmFyIER1ID0geyBzdGFydDogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLmVkZ2VzOyByZXR1cm4gdCA/IChlLnN0YXRlLnRhcmdldEZpZWxkcyA9IGUuc3RhdGUudGFyZ2V0RmllbGRzIHx8IFtbdC5sZWZ0ID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCIsIHQudG9wID8gXCJ0b3BcIiA6IFwiYm90dG9tXCJdXSwgRXUuZGVmYXVsdC5zdGFydChlKSkgOiBudWxsOyB9LCBzZXQ6IEV1LmRlZmF1bHQuc2V0LCBkZWZhdWx0czogKDAsIE11LmRlZmF1bHQpKCgwLCBqdS5kZWZhdWx0KShFdS5kZWZhdWx0LmRlZmF1bHRzKSwgeyBvZmZzZXQ6IHsgeDogMCwgeTogMCB9IH0pIH07IFN1LmRlZmF1bHQgPSBEdTsgdmFyIFR1ID0ge307IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUdSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBUdS5hc3BlY3RSYXRpbyA9IFR1LnJlc3RyaWN0U2l6ZSA9IFR1LnJlc3RyaWN0RWRnZXMgPSBUdS5yZXN0cmljdFJlY3QgPSBUdS5yZXN0cmljdCA9IFR1LnNuYXBFZGdlcyA9IFR1LnNuYXBTaXplID0gVHUuc25hcCA9IHZvaWQgMDsgdmFyIEl1ID0gWXUoT2EpLCBBdSA9IFl1KE5hKSwgenUgPSBZdShrYSksIEN1ID0gWXUoS2EpLCBSdSA9IFl1KHR1KSwgV3UgPSBZdShTdSksIFh1ID0gWXUoZnUpLCBOdSA9IFl1KG11KTsgZnVuY3Rpb24gWXUoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBkZWZhdWx0OiBlIH07IH0gdmFyIEZ1ID0gKDAsIEZpLm1ha2VNb2RpZmllcikoWHUuZGVmYXVsdCwgXCJzbmFwXCIpOyBUdS5zbmFwID0gRnU7IHZhciBMdSA9ICgwLCBGaS5tYWtlTW9kaWZpZXIpKE51LmRlZmF1bHQsIFwic25hcFNpemVcIik7IFR1LnNuYXBTaXplID0gTHU7IHZhciBxdSA9ICgwLCBGaS5tYWtlTW9kaWZpZXIpKFd1LmRlZmF1bHQsIFwic25hcEVkZ2VzXCIpOyBUdS5zbmFwRWRnZXMgPSBxdTsgdmFyIFZ1ID0gKDAsIEZpLm1ha2VNb2RpZmllcikoenUuZGVmYXVsdCwgXCJyZXN0cmljdFwiKTsgVHUucmVzdHJpY3QgPSBWdTsgdmFyIEd1ID0gKDAsIEZpLm1ha2VNb2RpZmllcikoQ3UuZGVmYXVsdCwgXCJyZXN0cmljdFJlY3RcIik7IFR1LnJlc3RyaWN0UmVjdCA9IEd1OyB2YXIgVXUgPSAoMCwgRmkubWFrZU1vZGlmaWVyKShBdS5kZWZhdWx0LCBcInJlc3RyaWN0RWRnZXNcIik7IFR1LnJlc3RyaWN0RWRnZXMgPSBVdTsgdmFyIEJ1ID0gKDAsIEZpLm1ha2VNb2RpZmllcikoUnUuZGVmYXVsdCwgXCJyZXN0cmljdFNpemVcIik7IFR1LnJlc3RyaWN0U2l6ZSA9IEJ1OyB2YXIgSHUgPSAoMCwgRmkubWFrZU1vZGlmaWVyKShJdS5kZWZhdWx0LCBcImFzcGVjdFJhdGlvXCIpOyBUdS5hc3BlY3RSYXRpbyA9IEh1OyB2YXIgS3UgPSB7fTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KEt1LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIEt1LlBvaW50ZXJFdmVudCA9IEt1LmRlZmF1bHQgPSB2b2lkIDA7IHZhciAkdSwgUXUgPSAoJHUgPSBTbikgJiYgJHUuX19lc01vZHVsZSA/ICR1IDogeyBkZWZhdWx0OiAkdSB9LCBadSA9IGZ1bmN0aW9uIChlKSB7IGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICAgICAgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT09IGVzKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IEp1KCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbik7IHJldHVybiBuOyB9KEopOyBmdW5jdGlvbiBKdSgpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBKdSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24gZXMoZSkgeyByZXR1cm4gKGVzID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHR5cGVvZiBlOyB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7IH0pKGUpOyB9IGZ1bmN0aW9uIHRzKGUsIHQpIHsgZm9yICh2YXIgbiA9IDA7IG4gPCB0Lmxlbmd0aDsgbisrKSB7XG4gICAgICAgIHZhciByID0gdFtuXTtcbiAgICAgICAgci5lbnVtZXJhYmxlID0gci5lbnVtZXJhYmxlIHx8ICExLCByLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gciAmJiAoci53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIua2V5LCByKTtcbiAgICB9IH0gZnVuY3Rpb24gbnMoZSkgeyByZXR1cm4gKG5zID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihlKTsgfSkoZSk7IH0gZnVuY3Rpb24gcnMoZSkgeyBpZiAodm9pZCAwID09PSBlKVxuICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IHJldHVybiBlOyB9IGZ1bmN0aW9uIG9zKGUsIHQpIHsgcmV0dXJuIChvcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gZS5fX3Byb3RvX18gPSB0LCBlOyB9KShlLCB0KTsgfSBmdW5jdGlvbiBpcyhlLCB0LCBuKSB7IHJldHVybiB0IGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgdCwgeyB2YWx1ZTogbiwgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCB9KSA6IGVbdF0gPSBuLCBlOyB9IHZhciBhcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZihlLCB0LCBuLCByLCBvLCBpKSB7IHZhciBhLCB1LCBzOyBpZiAoIWZ1bmN0aW9uIChlLCB0KSB7IGlmICghKGUgaW5zdGFuY2VvZiB0KSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSh0aGlzLCBmKSwgdSA9IHRoaXMsIGEgPSAhKHMgPSBucyhmKS5jYWxsKHRoaXMsIG8pKSB8fCBcIm9iamVjdFwiICE9PSBlcyhzKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHMgPyBycyh1KSA6IHMsIGlzKHJzKGEpLCBcInR5cGVcIiwgdm9pZCAwKSwgaXMocnMoYSksIFwib3JpZ2luYWxFdmVudFwiLCB2b2lkIDApLCBpcyhycyhhKSwgXCJwb2ludGVySWRcIiwgdm9pZCAwKSwgaXMocnMoYSksIFwicG9pbnRlclR5cGVcIiwgdm9pZCAwKSwgaXMocnMoYSksIFwiZG91YmxlXCIsIHZvaWQgMCksIGlzKHJzKGEpLCBcInBhZ2VYXCIsIHZvaWQgMCksIGlzKHJzKGEpLCBcInBhZ2VZXCIsIHZvaWQgMCksIGlzKHJzKGEpLCBcImNsaWVudFhcIiwgdm9pZCAwKSwgaXMocnMoYSksIFwiY2xpZW50WVwiLCB2b2lkIDApLCBpcyhycyhhKSwgXCJkdFwiLCB2b2lkIDApLCBpcyhycyhhKSwgXCJldmVudGFibGVcIiwgdm9pZCAwKSwgWnUucG9pbnRlckV4dGVuZChycyhhKSwgbiksIG4gIT09IHQgJiYgWnUucG9pbnRlckV4dGVuZChycyhhKSwgdCksIGEudGltZVN0YW1wID0gaSwgYS5vcmlnaW5hbEV2ZW50ID0gbiwgYS50eXBlID0gZSwgYS5wb2ludGVySWQgPSBadS5nZXRQb2ludGVySWQodCksIGEucG9pbnRlclR5cGUgPSBadS5nZXRQb2ludGVyVHlwZSh0KSwgYS50YXJnZXQgPSByLCBhLmN1cnJlbnRUYXJnZXQgPSBudWxsLCBcInRhcFwiID09PSBlKSB7XG4gICAgICAgIHZhciBsID0gby5nZXRQb2ludGVySW5kZXgodCk7XG4gICAgICAgIGEuZHQgPSBhLnRpbWVTdGFtcCAtIG8ucG9pbnRlcnNbbF0uZG93blRpbWU7XG4gICAgICAgIHZhciBjID0gYS50aW1lU3RhbXAgLSBvLnRhcFRpbWU7XG4gICAgICAgIGEuZG91YmxlID0gISEoby5wcmV2VGFwICYmIFwiZG91YmxldGFwXCIgIT09IG8ucHJldlRhcC50eXBlICYmIG8ucHJldlRhcC50YXJnZXQgPT09IGEudGFyZ2V0ICYmIGMgPCA1MDApO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIFwiZG91YmxldGFwXCIgPT09IGUgJiYgKGEuZHQgPSB0LnRpbWVTdGFtcCAtIG8udGFwVGltZSk7IHJldHVybiBhOyB9IHZhciBlLCB0OyByZXR1cm4gZnVuY3Rpb24gKGUsIHQpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdCAmJiBudWxsICE9PSB0KVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0ICYmIHQucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBlLCB3cml0YWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAgfSB9KSwgdCAmJiBvcyhlLCB0KTsgfShmLCBRdVtcImRlZmF1bHRcIl0pLCBlID0gZiwgKHQgPSBbeyBrZXk6IFwiX3N1YnRyYWN0T3JpZ2luXCIsIHZhbHVlOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUueCwgbiA9IGUueTsgcmV0dXJuIHRoaXMucGFnZVggLT0gdCwgdGhpcy5wYWdlWSAtPSBuLCB0aGlzLmNsaWVudFggLT0gdCwgdGhpcy5jbGllbnRZIC09IG4sIHRoaXM7IH0gfSwgeyBrZXk6IFwiX2FkZE9yaWdpblwiLCB2YWx1ZTogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLngsIG4gPSBlLnk7IHJldHVybiB0aGlzLnBhZ2VYICs9IHQsIHRoaXMucGFnZVkgKz0gbiwgdGhpcy5jbGllbnRYICs9IHQsIHRoaXMuY2xpZW50WSArPSBuLCB0aGlzOyB9IH0sIHsga2V5OiBcInByZXZlbnREZWZhdWx0XCIsIHZhbHVlOiBmdW5jdGlvbiAoKSB7IHRoaXMub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpOyB9IH1dKSAmJiB0cyhlLnByb3RvdHlwZSwgdCksIGY7IH0oKTsgS3UuUG9pbnRlckV2ZW50ID0gS3UuZGVmYXVsdCA9IGFzOyB2YXIgdXMgPSB7fTsgZnVuY3Rpb24gc3MoZSkgeyByZXR1cm4gKHNzID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHR5cGVvZiBlOyB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7IH0pKGUpOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCB1cy5kZWZhdWx0ID0gdm9pZCAwOyBwcyhnKHt9KSksIE8oe30pOyB2YXIgbHMgPSBmdW5jdGlvbiAoZSkgeyBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpXG4gICAgICAgIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9PSBzcyhlKSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpXG4gICAgICAgIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBmcygpOyBpZiAodCAmJiB0LmhhcyhlKSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHt9LCByID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIG8gaW4gZSlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSkge1xuICAgICAgICAgICAgdmFyIGkgPSByID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IG51bGw7XG4gICAgICAgICAgICBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgbywgaSkgOiBuW29dID0gZVtvXTtcbiAgICAgICAgfSBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pOyByZXR1cm4gbjsgfShwdCksIGNzID0gcHMoS3UpOyBmdW5jdGlvbiBmcygpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBmcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24gcHMoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyBkZWZhdWx0OiBlIH07IH0gdmFyIGRzID0geyBpZDogXCJwb2ludGVyLWV2ZW50cy9iYXNlXCIsIGluc3RhbGw6IGZ1bmN0aW9uIChlKSB7IGUucG9pbnRlckV2ZW50cyA9IGRzLCBlLmRlZmF1bHRzLmFjdGlvbnMucG9pbnRlckV2ZW50cyA9IGRzLmRlZmF1bHRzOyB9LCBsaXN0ZW5lcnM6IHsgXCJpbnRlcmFjdGlvbnM6bmV3XCI6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5pbnRlcmFjdGlvbjsgdC5wcmV2VGFwID0gbnVsbCwgdC50YXBUaW1lID0gMDsgfSwgXCJpbnRlcmFjdGlvbnM6dXBkYXRlLXBvaW50ZXJcIjogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLmRvd24sIG4gPSBlLnBvaW50ZXJJbmZvOyBpZiAoIXQgJiYgbi5ob2xkKVxuICAgICAgICAgICAgICAgIHJldHVybjsgbi5ob2xkID0geyBkdXJhdGlvbjogMSAvIDAsIHRpbWVvdXQ6IG51bGwgfTsgfSwgXCJpbnRlcmFjdGlvbnM6bW92ZVwiOiBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IGUuaW50ZXJhY3Rpb24sIHIgPSBlLnBvaW50ZXIsIG8gPSBlLmV2ZW50LCBpID0gZS5ldmVudFRhcmdldCwgYSA9IGUuZHVwbGljYXRlLCB1ID0gbi5nZXRQb2ludGVySW5kZXgocik7IGEgfHwgbi5wb2ludGVySXNEb3duICYmICFuLnBvaW50ZXJXYXNNb3ZlZCB8fCAobi5wb2ludGVySXNEb3duICYmIGNsZWFyVGltZW91dChuLnBvaW50ZXJzW3VdLmhvbGQudGltZW91dCksIHZzKHsgaW50ZXJhY3Rpb246IG4sIHBvaW50ZXI6IHIsIGV2ZW50OiBvLCBldmVudFRhcmdldDogaSwgdHlwZTogXCJtb3ZlXCIgfSwgdCkpOyB9LCBcImludGVyYWN0aW9uczpkb3duXCI6IGZ1bmN0aW9uIChlLCB0KSB7ICFmdW5jdGlvbiAoZSwgdCkgeyBmb3IgKHZhciBuID0gZS5pbnRlcmFjdGlvbiwgciA9IGUucG9pbnRlciwgbyA9IGUuZXZlbnQsIGkgPSBlLmV2ZW50VGFyZ2V0LCBhID0gZS5wb2ludGVySW5kZXgsIHUgPSBuLnBvaW50ZXJzW2FdLmhvbGQsIHMgPSBscy5kb20uZ2V0UGF0aChpKSwgbCA9IHsgaW50ZXJhY3Rpb246IG4sIHBvaW50ZXI6IHIsIGV2ZW50OiBvLCBldmVudFRhcmdldDogaSwgdHlwZTogXCJob2xkXCIsIHRhcmdldHM6IFtdLCBwYXRoOiBzLCBub2RlOiBudWxsIH0sIGMgPSAwOyBjIDwgcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgICAgIHZhciBmID0gc1tjXTtcbiAgICAgICAgICAgICAgICBsLm5vZGUgPSBmLCB0LmZpcmUoXCJwb2ludGVyRXZlbnRzOmNvbGxlY3QtdGFyZ2V0c1wiLCBsKTtcbiAgICAgICAgICAgIH0gaWYgKCFsLnRhcmdldHMubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHJldHVybjsgZm9yICh2YXIgcCA9IDEgLyAwLCBkID0gMDsgZCA8IGwudGFyZ2V0cy5sZW5ndGg7IGQrKykge1xuICAgICAgICAgICAgICAgIHZhciB2ID0gbC50YXJnZXRzW2RdLmV2ZW50YWJsZS5vcHRpb25zLmhvbGREdXJhdGlvbjtcbiAgICAgICAgICAgICAgICB2IDwgcCAmJiAocCA9IHYpO1xuICAgICAgICAgICAgfSB1LmR1cmF0aW9uID0gcCwgdS50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHZzKHsgaW50ZXJhY3Rpb246IG4sIGV2ZW50VGFyZ2V0OiBpLCBwb2ludGVyOiByLCBldmVudDogbywgdHlwZTogXCJob2xkXCIgfSwgdCk7IH0sIHApOyB9KGUsIHQpLCB2cyhlLCB0KTsgfSwgXCJpbnRlcmFjdGlvbnM6dXBcIjogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4sIHIsIG8sIGksIGEsIHU7IG1zKGUpLCB2cyhlLCB0KSwgciA9IHQsIG8gPSAobiA9IGUpLmludGVyYWN0aW9uLCBpID0gbi5wb2ludGVyLCBhID0gbi5ldmVudCwgdSA9IG4uZXZlbnRUYXJnZXQsIG8ucG9pbnRlcldhc01vdmVkIHx8IHZzKHsgaW50ZXJhY3Rpb246IG8sIGV2ZW50VGFyZ2V0OiB1LCBwb2ludGVyOiBpLCBldmVudDogYSwgdHlwZTogXCJ0YXBcIiB9LCByKTsgfSwgXCJpbnRlcmFjdGlvbnM6Y2FuY2VsXCI6IGZ1bmN0aW9uIChlLCB0KSB7IG1zKGUpLCB2cyhlLCB0KTsgfSB9LCBQb2ludGVyRXZlbnQ6IGNzLmRlZmF1bHQsIGZpcmU6IHZzLCBjb2xsZWN0RXZlbnRUYXJnZXRzOiB5cywgZGVmYXVsdHM6IHsgaG9sZER1cmF0aW9uOiA2MDAsIGlnbm9yZUZyb206IG51bGwsIGFsbG93RnJvbTogbnVsbCwgb3JpZ2luOiB7IHg6IDAsIHk6IDAgfSB9LCB0eXBlczogW1wiZG93blwiLCBcIm1vdmVcIiwgXCJ1cFwiLCBcImNhbmNlbFwiLCBcInRhcFwiLCBcImRvdWJsZXRhcFwiLCBcImhvbGRcIl0gfTsgZnVuY3Rpb24gdnMoZSwgdCkgeyB2YXIgbiA9IGUuaW50ZXJhY3Rpb24sIHIgPSBlLnBvaW50ZXIsIG8gPSBlLmV2ZW50LCBpID0gZS5ldmVudFRhcmdldCwgYSA9IGUudHlwZSwgdSA9IGUudGFyZ2V0cywgcyA9IHZvaWQgMCA9PT0gdSA/IHlzKGUsIHQpIDogdSwgbCA9IG5ldyBjcy5kZWZhdWx0KGEsIHIsIG8sIGksIG4sIHQubm93KCkpOyB0LmZpcmUoXCJwb2ludGVyRXZlbnRzOm5ld1wiLCB7IHBvaW50ZXJFdmVudDogbCB9KTsgZm9yICh2YXIgYyA9IHsgaW50ZXJhY3Rpb246IG4sIHBvaW50ZXI6IHIsIGV2ZW50OiBvLCBldmVudFRhcmdldDogaSwgdGFyZ2V0czogcywgdHlwZTogYSwgcG9pbnRlckV2ZW50OiBsIH0sIGYgPSAwOyBmIDwgcy5sZW5ndGg7IGYrKykge1xuICAgICAgICB2YXIgcCA9IHNbZl07XG4gICAgICAgIGZvciAodmFyIGQgaW4gcC5wcm9wcyB8fCB7fSlcbiAgICAgICAgICAgIGxbZF0gPSBwLnByb3BzW2RdO1xuICAgICAgICB2YXIgdiA9IGxzLmdldE9yaWdpblhZKHAuZXZlbnRhYmxlLCBwLm5vZGUpO1xuICAgICAgICBpZiAobC5fc3VidHJhY3RPcmlnaW4odiksIGwuZXZlbnRhYmxlID0gcC5ldmVudGFibGUsIGwuY3VycmVudFRhcmdldCA9IHAubm9kZSwgcC5ldmVudGFibGUuZmlyZShsKSwgbC5fYWRkT3JpZ2luKHYpLCBsLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCB8fCBsLnByb3BhZ2F0aW9uU3RvcHBlZCAmJiBmICsgMSA8IHMubGVuZ3RoICYmIHNbZiArIDFdLm5vZGUgIT09IGwuY3VycmVudFRhcmdldClcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH0gaWYgKHQuZmlyZShcInBvaW50ZXJFdmVudHM6ZmlyZWRcIiwgYyksIFwidGFwXCIgPT09IGEpIHtcbiAgICAgICAgdmFyIHkgPSBsLmRvdWJsZSA/IHZzKHsgaW50ZXJhY3Rpb246IG4sIHBvaW50ZXI6IHIsIGV2ZW50OiBvLCBldmVudFRhcmdldDogaSwgdHlwZTogXCJkb3VibGV0YXBcIiB9LCB0KSA6IGw7XG4gICAgICAgIG4ucHJldlRhcCA9IHksIG4udGFwVGltZSA9IHkudGltZVN0YW1wO1xuICAgIH0gcmV0dXJuIGw7IH0gZnVuY3Rpb24geXMoZSwgdCkgeyB2YXIgbiA9IGUuaW50ZXJhY3Rpb24sIHIgPSBlLnBvaW50ZXIsIG8gPSBlLmV2ZW50LCBpID0gZS5ldmVudFRhcmdldCwgYSA9IGUudHlwZSwgdSA9IG4uZ2V0UG9pbnRlckluZGV4KHIpLCBzID0gbi5wb2ludGVyc1t1XTsgaWYgKFwidGFwXCIgPT09IGEgJiYgKG4ucG9pbnRlcldhc01vdmVkIHx8ICFzIHx8IHMuZG93blRhcmdldCAhPT0gaSkpXG4gICAgICAgIHJldHVybiBbXTsgZm9yICh2YXIgbCA9IGxzLmRvbS5nZXRQYXRoKGkpLCBjID0geyBpbnRlcmFjdGlvbjogbiwgcG9pbnRlcjogciwgZXZlbnQ6IG8sIGV2ZW50VGFyZ2V0OiBpLCB0eXBlOiBhLCBwYXRoOiBsLCB0YXJnZXRzOiBbXSwgbm9kZTogbnVsbCB9LCBmID0gMDsgZiA8IGwubGVuZ3RoOyBmKyspIHtcbiAgICAgICAgdmFyIHAgPSBsW2ZdO1xuICAgICAgICBjLm5vZGUgPSBwLCB0LmZpcmUoXCJwb2ludGVyRXZlbnRzOmNvbGxlY3QtdGFyZ2V0c1wiLCBjKTtcbiAgICB9IHJldHVybiBcImhvbGRcIiA9PT0gYSAmJiAoYy50YXJnZXRzID0gYy50YXJnZXRzLmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5ldmVudGFibGUub3B0aW9ucy5ob2xkRHVyYXRpb24gPT09IG4ucG9pbnRlcnNbdV0uaG9sZC5kdXJhdGlvbjsgfSkpLCBjLnRhcmdldHM7IH0gZnVuY3Rpb24gbXMoZSkgeyB2YXIgdCA9IGUuaW50ZXJhY3Rpb24sIG4gPSBlLnBvaW50ZXJJbmRleDsgdC5wb2ludGVyc1tuXS5ob2xkICYmIGNsZWFyVGltZW91dCh0LnBvaW50ZXJzW25dLmhvbGQudGltZW91dCk7IH0gdmFyIGdzID0gZHM7IHVzLmRlZmF1bHQgPSBnczsgdmFyIGhzID0ge307IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShocywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBocy5kZWZhdWx0ID0gdm9pZCAwOyB2YXIgYnMgPSBPcyh1cyk7IGZ1bmN0aW9uIE9zKGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgZGVmYXVsdDogZSB9OyB9IGZ1bmN0aW9uIHdzKGUpIHsgdmFyIHQgPSBlLmludGVyYWN0aW9uOyB0LmhvbGRJbnRlcnZhbEhhbmRsZSAmJiAoY2xlYXJJbnRlcnZhbCh0LmhvbGRJbnRlcnZhbEhhbmRsZSksIHQuaG9sZEludGVydmFsSGFuZGxlID0gbnVsbCk7IH0gdmFyIFBzID0geyBpZDogXCJwb2ludGVyLWV2ZW50cy9ob2xkUmVwZWF0XCIsIGluc3RhbGw6IGZ1bmN0aW9uIChlKSB7IGUudXNlUGx1Z2luKGJzLmRlZmF1bHQpOyB2YXIgdCA9IGUucG9pbnRlckV2ZW50czsgdC5kZWZhdWx0cy5ob2xkUmVwZWF0SW50ZXJ2YWwgPSAwLCB0LnR5cGVzLnB1c2goXCJob2xkcmVwZWF0XCIpOyB9LCBsaXN0ZW5lcnM6IFtcIm1vdmVcIiwgXCJ1cFwiLCBcImNhbmNlbFwiLCBcImVuZGFsbFwiXS5yZWR1Y2UoZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIGVbXCJwb2ludGVyRXZlbnRzOlwiLmNvbmNhdCh0KV0gPSB3cywgZTsgfSwgeyBcInBvaW50ZXJFdmVudHM6bmV3XCI6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5wb2ludGVyRXZlbnQ7IFwiaG9sZFwiID09PSB0LnR5cGUgJiYgKHQuY291bnQgPSAodC5jb3VudCB8fCAwKSArIDEpOyB9LCBcInBvaW50ZXJFdmVudHM6ZmlyZWRcIjogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSBlLmludGVyYWN0aW9uLCByID0gZS5wb2ludGVyRXZlbnQsIG8gPSBlLmV2ZW50VGFyZ2V0LCBpID0gZS50YXJnZXRzOyBpZiAoXCJob2xkXCIgPT09IHIudHlwZSAmJiBpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gaVswXS5ldmVudGFibGUub3B0aW9ucy5ob2xkUmVwZWF0SW50ZXJ2YWw7XG4gICAgICAgICAgICAgICAgYSA8PSAwIHx8IChuLmhvbGRJbnRlcnZhbEhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyB0LnBvaW50ZXJFdmVudHMuZmlyZSh7IGludGVyYWN0aW9uOiBuLCBldmVudFRhcmdldDogbywgdHlwZTogXCJob2xkXCIsIHBvaW50ZXI6IHIsIGV2ZW50OiByIH0sIHQpOyB9LCBhKSk7XG4gICAgICAgICAgICB9IH0gfSkgfTsgaHMuZGVmYXVsdCA9IFBzOyB2YXIgX3MgPSB7fTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9zLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIF9zLmRlZmF1bHQgPSB2b2lkIDA7IHZhciB4cywgU3MgPSAoeHMgPSBtZSkgJiYgeHMuX19lc01vZHVsZSA/IHhzIDogeyBkZWZhdWx0OiB4cyB9OyBmdW5jdGlvbiBqcyhlKSB7IHJldHVybiAoMCwgU3MuZGVmYXVsdCkodGhpcy5ldmVudHMub3B0aW9ucywgZSksIHRoaXM7IH0gdmFyIE1zID0geyBpZDogXCJwb2ludGVyLWV2ZW50cy9pbnRlcmFjdGFibGVUYXJnZXRzXCIsIGluc3RhbGw6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5wb2ludGVyRXZlbnRzLCBuID0gZS5hY3Rpb25zLCByID0gZS5JbnRlcmFjdGFibGU7ICgwLCB1Lm1lcmdlKShuLmV2ZW50VHlwZXMsIHQudHlwZXMpLCByLnByb3RvdHlwZS5wb2ludGVyRXZlbnRzID0ganM7IHZhciBvID0gci5wcm90b3R5cGUuX2JhY2tDb21wYXRPcHRpb247IHIucHJvdG90eXBlLl9iYWNrQ29tcGF0T3B0aW9uID0gZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSBvLmNhbGwodGhpcywgZSwgdCk7IHJldHVybiBuID09PSB0aGlzICYmICh0aGlzLmV2ZW50cy5vcHRpb25zW2VdID0gdCksIG47IH07IH0sIGxpc3RlbmVyczogeyBcInBvaW50ZXJFdmVudHM6Y29sbGVjdC10YXJnZXRzXCI6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciByID0gZS50YXJnZXRzLCBvID0gZS5ub2RlLCBpID0gZS50eXBlLCBhID0gZS5ldmVudFRhcmdldDsgdC5pbnRlcmFjdGFibGVzLmZvckVhY2hNYXRjaChvLCBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuZXZlbnRzLCBuID0gdC5vcHRpb25zOyB0LnR5cGVzW2ldICYmIHQudHlwZXNbaV0ubGVuZ3RoICYmIGUudGVzdElnbm9yZUFsbG93KG4sIG8sIGEpICYmIHIucHVzaCh7IG5vZGU6IG8sIGV2ZW50YWJsZTogdCwgcHJvcHM6IHsgaW50ZXJhY3RhYmxlOiBlIH0gfSk7IH0pOyB9LCBcImludGVyYWN0YWJsZTpuZXdcIjogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLmludGVyYWN0YWJsZTsgdC5ldmVudHMuZ2V0UmVjdCA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0LmdldFJlY3QoZSk7IH07IH0sIFwiaW50ZXJhY3RhYmxlOnNldFwiOiBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IGUuaW50ZXJhY3RhYmxlLCByID0gZS5vcHRpb25zOyAoMCwgU3MuZGVmYXVsdCkobi5ldmVudHMub3B0aW9ucywgdC5wb2ludGVyRXZlbnRzLmRlZmF1bHRzKSwgKDAsIFNzLmRlZmF1bHQpKG4uZXZlbnRzLm9wdGlvbnMsIHIucG9pbnRlckV2ZW50cyB8fCB7fSk7IH0gfSB9OyBfcy5kZWZhdWx0ID0gTXM7IHZhciBFcyA9IHt9OyBmdW5jdGlvbiBrcyhlKSB7IHJldHVybiAoa3MgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdHlwZW9mIGU7IH0gOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBlLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgZSAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgZTsgfSkoZSk7IH0gT2JqZWN0LmRlZmluZVByb3BlcnR5KEVzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIEVzLmluc3RhbGwgPSBmdW5jdGlvbiAoZSkgeyBlLnVzZVBsdWdpbihEcyksIGUudXNlUGx1Z2luKFRzLmRlZmF1bHQpLCBlLnVzZVBsdWdpbihJcy5kZWZhdWx0KTsgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVzLCBcImhvbGRSZXBlYXRcIiwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBUcy5kZWZhdWx0OyB9IH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXMsIFwiaW50ZXJhY3RhYmxlVGFyZ2V0c1wiLCB7IGVudW1lcmFibGU6ICEwLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIElzLmRlZmF1bHQ7IH0gfSksIEVzLnBvaW50ZXJFdmVudHMgPSBFcy5pZCA9IHZvaWQgMDsgdmFyIERzID0gZnVuY3Rpb24gKGUpIHsgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKVxuICAgICAgICByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPT0ga3MoZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKVxuICAgICAgICByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0genMoKTsgaWYgKHQgJiYgdC5oYXMoZSkpXG4gICAgICAgIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7fSwgciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBvIGluIGUpXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykpIHtcbiAgICAgICAgICAgIHZhciBpID0gciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBudWxsO1xuICAgICAgICAgICAgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIG8sIGkpIDogbltvXSA9IGVbb107XG4gICAgICAgIH0gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKTsgcmV0dXJuIG47IH0odXMpOyBFcy5wb2ludGVyRXZlbnRzID0gRHM7IHZhciBUcyA9IEFzKGhzKSwgSXMgPSBBcyhfcyk7IGZ1bmN0aW9uIEFzKGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgZGVmYXVsdDogZSB9OyB9IGZ1bmN0aW9uIHpzKCkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKVxuICAgICAgICByZXR1cm4gbnVsbDsgdmFyIGUgPSBuZXcgV2Vha01hcDsgcmV0dXJuIHpzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZTsgfSwgZTsgfSBFcy5pZCA9IFwicG9pbnRlci1ldmVudHNcIjsgdmFyIENzID0ge307IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDcywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBDcy5pbnN0YWxsID0gV3MsIENzLmRlZmF1bHQgPSB2b2lkIDA7IGcoe30pOyBmdW5jdGlvbiBXcyh0KSB7IGZvciAodmFyIGUgPSB0LmFjdGlvbnMsIG4gPSB0LkludGVyYWN0YWJsZSwgciA9IDA7IHIgPCBlLm5hbWVzLmxlbmd0aDsgcisrKSB7XG4gICAgICAgIHZhciBvID0gZS5uYW1lc1tyXTtcbiAgICAgICAgZS5ldmVudFR5cGVzLnB1c2goXCJcIi5jb25jYXQobywgXCJyZWZsb3dcIikpO1xuICAgIH0gbi5wcm90b3R5cGUucmVmbG93ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGZ1bmN0aW9uICh1LCBzLCBsKSB7IGZ1bmN0aW9uIGUoKSB7IHZhciB0ID0gY1tkXSwgZSA9IHUuZ2V0UmVjdCh0KTsgaWYgKCFlKVxuICAgICAgICByZXR1cm4gXCJicmVha1wiOyB2YXIgbiA9IHB0LmFyci5maW5kKGwuaW50ZXJhY3Rpb25zLmxpc3QsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmludGVyYWN0aW5nKCkgJiYgZS5pbnRlcmFjdGFibGUgPT09IHUgJiYgZS5lbGVtZW50ID09PSB0ICYmIGUucHJlcGFyZWQubmFtZSA9PT0gcy5uYW1lOyB9KSwgciA9IHZvaWQgMDsgaWYgKG4pXG4gICAgICAgIG4ubW92ZSgpLCBwICYmIChyID0gbi5fcmVmbG93UHJvbWlzZSB8fCBuZXcgZihmdW5jdGlvbiAoZSkgeyBuLl9yZWZsb3dSZXNvbHZlID0gZTsgfSkpO1xuICAgIGVsc2Uge1xuICAgICAgICB2YXIgbyA9IHB0LnJlY3QudGxiclRvWHl3aChlKSwgaSA9IHsgcGFnZTogeyB4OiBvLngsIHk6IG8ueSB9LCBjbGllbnQ6IHsgeDogby54LCB5OiBvLnkgfSwgdGltZVN0YW1wOiBsLm5vdygpIH0sIGEgPSBwdC5wb2ludGVyLmNvb3Jkc1RvRXZlbnQoaSk7XG4gICAgICAgIHIgPSBmdW5jdGlvbiAoZSwgdCwgbiwgciwgbykgeyB2YXIgaSA9IGUuaW50ZXJhY3Rpb25zLm5ldyh7IHBvaW50ZXJUeXBlOiBcInJlZmxvd1wiIH0pLCBhID0geyBpbnRlcmFjdGlvbjogaSwgZXZlbnQ6IG8sIHBvaW50ZXI6IG8sIGV2ZW50VGFyZ2V0OiBuLCBwaGFzZTogVG4uRXZlbnRQaGFzZS5SZWZsb3cgfTsgaS5pbnRlcmFjdGFibGUgPSB0LCBpLmVsZW1lbnQgPSBuLCBpLnByZXBhcmVkID0gKDAsIHB0LmV4dGVuZCkoe30sIHIpLCBpLnByZXZFdmVudCA9IG8sIGkudXBkYXRlUG9pbnRlcihvLCBvLCBuLCAhMCksIGkuX2RvUGhhc2UoYSk7IHZhciB1ID0gcHQud2luLndpbmRvdy5Qcm9taXNlID8gbmV3IHB0Lndpbi53aW5kb3cuUHJvbWlzZShmdW5jdGlvbiAoZSkgeyBpLl9yZWZsb3dSZXNvbHZlID0gZTsgfSkgOiBudWxsOyBpLl9yZWZsb3dQcm9taXNlID0gdSwgaS5zdGFydChyLCB0LCBuKSwgaS5faW50ZXJhY3RpbmcgPyAoaS5tb3ZlKGEpLCBpLmVuZChvKSkgOiBpLnN0b3AoKTsgcmV0dXJuIGkucmVtb3ZlUG9pbnRlcihvLCBvKSwgaS5wb2ludGVySXNEb3duID0gITEsIHU7IH0obCwgdSwgdCwgcywgYSk7XG4gICAgfSBwICYmIHAucHVzaChyKTsgfSBmb3IgKHZhciBjID0gcHQuaXMuc3RyaW5nKHUudGFyZ2V0KSA/IHB0LmFyci5mcm9tKHUuX2NvbnRleHQucXVlcnlTZWxlY3RvckFsbCh1LnRhcmdldCkpIDogW3UudGFyZ2V0XSwgZiA9IHB0Lndpbi53aW5kb3cuUHJvbWlzZSwgcCA9IGYgPyBbXSA6IG51bGwsIGQgPSAwOyBkIDwgYy5sZW5ndGg7IGQrKykge1xuICAgICAgICBpZiAoXCJicmVha1wiID09PSBlKCkpXG4gICAgICAgICAgICBicmVhaztcbiAgICB9IHJldHVybiBwICYmIGYuYWxsKHApLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gdTsgfSk7IH0odGhpcywgZSwgdCk7IH07IH0gdmFyIFhzID0geyBpZDogVG4uRXZlbnRQaGFzZS5SZWZsb3cgPSBcInJlZmxvd1wiLCBpbnN0YWxsOiBXcywgbGlzdGVuZXJzOiB7IFwiaW50ZXJhY3Rpb25zOnN0b3BcIjogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSBlLmludGVyYWN0aW9uOyBuLnBvaW50ZXJUeXBlID09PSBUbi5FdmVudFBoYXNlLlJlZmxvdyAmJiAobi5fcmVmbG93UmVzb2x2ZSAmJiBuLl9yZWZsb3dSZXNvbHZlKCksIHB0LmFyci5yZW1vdmUodC5pbnRlcmFjdGlvbnMubGlzdCwgbikpOyB9IH0gfTsgQ3MuZGVmYXVsdCA9IFhzOyB2YXIgTnMgPSB7fTsgZnVuY3Rpb24gWXMoZSkgeyByZXR1cm4gKFlzID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHR5cGVvZiBlOyB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7IH0pKGUpOyB9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOcywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBOcy5kZWZhdWx0ID0gTnMuc2NvcGUgPSBOcy5pbnRlcmFjdCA9IHZvaWQgMDsgdmFyIEZzID0gTyh7fSksIExzID0gVXMoaiksIHFzID0gVXMoRGUpLCBWcyA9IGZ1bmN0aW9uIChlKSB7IGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICAgICAgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT09IFlzKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IEdzKCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbik7IHJldHVybiBuOyB9KHB0KTsgZnVuY3Rpb24gR3MoKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApXG4gICAgICAgIHJldHVybiBudWxsOyB2YXIgZSA9IG5ldyBXZWFrTWFwOyByZXR1cm4gR3MgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBlOyB9LCBlOyB9IGZ1bmN0aW9uIFVzKGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgZGVmYXVsdDogZSB9OyB9IHZhciBCcyA9IHt9LCBIcyA9IG5ldyBGcy5TY29wZTsgTnMuc2NvcGUgPSBIczsgZnVuY3Rpb24gS3MoZSwgdCkgeyB2YXIgbiA9IEhzLmludGVyYWN0YWJsZXMuZ2V0KGUsIHQpOyByZXR1cm4gbiB8fCAoKG4gPSBIcy5pbnRlcmFjdGFibGVzLm5ldyhlLCB0KSkuZXZlbnRzLmdsb2JhbCA9IEJzKSwgbjsgfSAoTnMuaW50ZXJhY3QgPSBLcykudXNlID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIEhzLnVzZVBsdWdpbihlLCB0KSwgS3M7IH0sIEtzLmlzU2V0ID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuICEhSHMuaW50ZXJhY3RhYmxlcy5nZXQoZSwgdCAmJiB0LmNvbnRleHQpOyB9LCBLcy5vbiA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IFZzLmlzLnN0cmluZyhlKSAmJiAtMSAhPT0gZS5zZWFyY2goXCIgXCIpICYmIChlID0gZS50cmltKCkuc3BsaXQoLyArLykpOyBpZiAoVnMuaXMuYXJyYXkoZSkpIHtcbiAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCBlLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICB2YXIgbztcbiAgICAgICAgICAgIG8gPSBlW3JdLCBLcy5vbihvLCB0LCBuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gS3M7XG4gICAgfSBpZiAoVnMuaXMub2JqZWN0KGUpKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gZSlcbiAgICAgICAgICAgIEtzLm9uKGksIGVbaV0sIHQpO1xuICAgICAgICByZXR1cm4gS3M7XG4gICAgfSBWcy5hcnIuY29udGFpbnMoSHMuYWN0aW9ucy5ldmVudFR5cGVzLCBlKSA/IEJzW2VdID8gQnNbZV0ucHVzaCh0KSA6IEJzW2VdID0gW3RdIDogcXMuZGVmYXVsdC5hZGQoSHMuZG9jdW1lbnQsIGUsIHQsIHsgb3B0aW9uczogbiB9KTsgcmV0dXJuIEtzOyB9LCBLcy5vZmYgPSBmdW5jdGlvbiAoZSwgdCwgbikgeyBWcy5pcy5zdHJpbmcoZSkgJiYgLTEgIT09IGUuc2VhcmNoKFwiIFwiKSAmJiAoZSA9IGUudHJpbSgpLnNwbGl0KC8gKy8pKTsgaWYgKFZzLmlzLmFycmF5KGUpKSB7XG4gICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgZS5sZW5ndGg7IHIrKykge1xuICAgICAgICAgICAgdmFyIG87XG4gICAgICAgICAgICBvID0gZVtyXSwgS3Mub2ZmKG8sIHQsIG4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBLcztcbiAgICB9IGlmIChWcy5pcy5vYmplY3QoZSkpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBlKVxuICAgICAgICAgICAgS3Mub2ZmKGksIGVbaV0sIHQpO1xuICAgICAgICByZXR1cm4gS3M7XG4gICAgfSB2YXIgYTsgVnMuYXJyLmNvbnRhaW5zKEhzLmFjdGlvbnMuZXZlbnRUeXBlcywgZSkgPyBlIGluIEJzICYmIC0xICE9PSAoYSA9IEJzW2VdLmluZGV4T2YodCkpICYmIEJzW2VdLnNwbGljZShhLCAxKSA6IHFzLmRlZmF1bHQucmVtb3ZlKEhzLmRvY3VtZW50LCBlLCB0LCBuKTsgcmV0dXJuIEtzOyB9LCBLcy5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEhzOyB9LCBLcy5nZXRQb2ludGVyQXZlcmFnZSA9IFZzLnBvaW50ZXIucG9pbnRlckF2ZXJhZ2UsIEtzLmdldFRvdWNoQkJveCA9IFZzLnBvaW50ZXIudG91Y2hCQm94LCBLcy5nZXRUb3VjaERpc3RhbmNlID0gVnMucG9pbnRlci50b3VjaERpc3RhbmNlLCBLcy5nZXRUb3VjaEFuZ2xlID0gVnMucG9pbnRlci50b3VjaEFuZ2xlLCBLcy5nZXRFbGVtZW50UmVjdCA9IFZzLmRvbS5nZXRFbGVtZW50UmVjdCwgS3MuZ2V0RWxlbWVudENsaWVudFJlY3QgPSBWcy5kb20uZ2V0RWxlbWVudENsaWVudFJlY3QsIEtzLm1hdGNoZXNTZWxlY3RvciA9IFZzLmRvbS5tYXRjaGVzU2VsZWN0b3IsIEtzLmNsb3Nlc3QgPSBWcy5kb20uY2xvc2VzdCwgS3Muc3VwcG9ydHNUb3VjaCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIExzLmRlZmF1bHQuc3VwcG9ydHNUb3VjaDsgfSwgS3Muc3VwcG9ydHNQb2ludGVyRXZlbnQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBMcy5kZWZhdWx0LnN1cHBvcnRzUG9pbnRlckV2ZW50OyB9LCBLcy5zdG9wID0gZnVuY3Rpb24gKCkgeyBmb3IgKHZhciBlID0gMDsgZSA8IEhzLmludGVyYWN0aW9ucy5saXN0Lmxlbmd0aDsgZSsrKSB7XG4gICAgICAgIEhzLmludGVyYWN0aW9ucy5saXN0W2VdLnN0b3AoKTtcbiAgICB9IHJldHVybiBLczsgfSwgS3MucG9pbnRlck1vdmVUb2xlcmFuY2UgPSBmdW5jdGlvbiAoZSkgeyBpZiAoVnMuaXMubnVtYmVyKGUpKVxuICAgICAgICByZXR1cm4gSHMuaW50ZXJhY3Rpb25zLnBvaW50ZXJNb3ZlVG9sZXJhbmNlID0gZSwgS3M7IHJldHVybiBIcy5pbnRlcmFjdGlvbnMucG9pbnRlck1vdmVUb2xlcmFuY2U7IH0sIEhzLmFkZExpc3RlbmVycyh7IFwiaW50ZXJhY3RhYmxlOnVuc2V0XCI6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5pbnRlcmFjdGFibGU7IEhzLmludGVyYWN0YWJsZXMubGlzdC5zcGxpY2UoSHMuaW50ZXJhY3RhYmxlcy5saXN0LmluZGV4T2YodCksIDEpOyBmb3IgKHZhciBuID0gMDsgbiA8IEhzLmludGVyYWN0aW9ucy5saXN0Lmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICB2YXIgciA9IEhzLmludGVyYWN0aW9ucy5saXN0W25dO1xuICAgICAgICAgICAgci5pbnRlcmFjdGFibGUgPT09IHQgJiYgci5pbnRlcmFjdGluZygpICYmICFyLl9lbmRpbmcgJiYgci5zdG9wKCk7XG4gICAgICAgIH0gfSB9KSwgS3MuYWRkRG9jdW1lbnQgPSBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gSHMuYWRkRG9jdW1lbnQoZSwgdCk7IH0sIEtzLnJlbW92ZURvY3VtZW50ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIEhzLnJlbW92ZURvY3VtZW50KGUpOyB9OyB2YXIgJHMgPSBIcy5pbnRlcmFjdCA9IEtzOyBOcy5kZWZhdWx0ID0gJHM7IHZhciBRcyA9IHt9OyBmdW5jdGlvbiBacyhlKSB7IHJldHVybiAoWnMgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdHlwZW9mIGU7IH0gOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBlLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgZSAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgZTsgfSkoZSk7IH0gT2JqZWN0LmRlZmluZVByb3BlcnR5KFFzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIFFzLmluaXQgPSBmdW5jdGlvbiAoZSkgeyBmb3IgKHZhciB0IGluIHNsLnNjb3BlLmluaXQoZSksIHNsLmRlZmF1bHQudXNlKG5sLmRlZmF1bHQpLCBzbC5kZWZhdWx0LnVzZShhbCksIHNsLmRlZmF1bHQudXNlKHJsLmRlZmF1bHQpLCBzbC5kZWZhdWx0LnVzZShvbC5kZWZhdWx0KSwgc2wuZGVmYXVsdC51c2UodGwpLCBzbC5kZWZhdWx0LnVzZShKcyksIGlsKSB7XG4gICAgICAgIHZhciBuID0gaWxbdF0sIHIgPSBuLl9kZWZhdWx0cywgbyA9IG4uX21ldGhvZHM7XG4gICAgICAgIHIuX21ldGhvZHMgPSBvLCBzbC5zY29wZS5kZWZhdWx0cy5wZXJBY3Rpb25bdF0gPSByO1xuICAgIH0gc2wuZGVmYXVsdC51c2UoZWwuZGVmYXVsdCksIHNsLmRlZmF1bHQudXNlKHVsLmRlZmF1bHQpLCAwOyByZXR1cm4gc2wuZGVmYXVsdDsgfSwgUXMuZGVmYXVsdCA9IHZvaWQgMDsgdmFyIEpzID0gZmwodm8pLCBlbCA9IGxsKE9vKSwgdGwgPSBmbChkaSksIG5sID0gbGwoaGkpLCBybCA9IChsbChhYSkpLCBvbCA9IGxsKEZpKSwgaWwgPSBmbChUdSksIGFsID0gZmwoRXMpLCB1bCA9IGxsKENzKSwgc2wgPSBmbChOcyk7IGZ1bmN0aW9uIGxsKGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgZGVmYXVsdDogZSB9OyB9IGZ1bmN0aW9uIGNsKCkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKVxuICAgICAgICByZXR1cm4gbnVsbDsgdmFyIGUgPSBuZXcgV2Vha01hcDsgcmV0dXJuIGNsID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZTsgfSwgZTsgfSBmdW5jdGlvbiBmbChlKSB7IGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICAgICAgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT09IFpzKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IGNsKCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IHJldHVybiBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pLCBuOyB9IHNsLmRlZmF1bHQudmVyc2lvbiA9IFwiMS44LjRcIjsgdmFyIHBsID0gc2wuZGVmYXVsdDsgUXMuZGVmYXVsdCA9IHBsOyB2YXIgZGwgPSB7fTsgZnVuY3Rpb24gdmwoZSwgdCkgeyByZXR1cm4gZnVuY3Rpb24gKGUpIHsgaWYgKEFycmF5LmlzQXJyYXkoZSkpXG4gICAgICAgIHJldHVybiBlOyB9KGUpIHx8IGZ1bmN0aW9uIChlLCB0KSB7IGlmICghKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoZSkgfHwgXCJbb2JqZWN0IEFyZ3VtZW50c11cIiA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpKSlcbiAgICAgICAgcmV0dXJuOyB2YXIgbiA9IFtdLCByID0gITAsIG8gPSAhMSwgaSA9IHZvaWQgMDsgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgYSwgdSA9IGVbU3ltYm9sLml0ZXJhdG9yXSgpOyAhKHIgPSAoYSA9IHUubmV4dCgpKS5kb25lKSAmJiAobi5wdXNoKGEudmFsdWUpLCAhdCB8fCBuLmxlbmd0aCAhPT0gdCk7IHIgPSAhMClcbiAgICAgICAgICAgIDtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgbyA9ICEwLCBpID0gZTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByIHx8IG51bGwgPT0gdS5yZXR1cm4gfHwgdS5yZXR1cm4oKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChvKVxuICAgICAgICAgICAgICAgIHRocm93IGk7XG4gICAgICAgIH1cbiAgICB9IHJldHVybiBuOyB9KGUsIHQpIHx8IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0oKTsgfSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGwsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgZGwuZGVmYXVsdCA9IHZvaWQgMDsgZnVuY3Rpb24geWwodikgeyBmdW5jdGlvbiBlKGUsIHQpIHsgZm9yICh2YXIgbiA9IHYucmFuZ2UsIHIgPSB2LmxpbWl0cywgbyA9IHZvaWQgMCA9PT0gciA/IHsgbGVmdDogLTEgLyAwLCByaWdodDogMSAvIDAsIHRvcDogLTEgLyAwLCBib3R0b206IDEgLyAwIH0gOiByLCBpID0gdi5vZmZzZXQsIGEgPSB2b2lkIDAgPT09IGkgPyB7IHg6IDAsIHk6IDAgfSA6IGksIHUgPSB7IHJhbmdlOiBuLCBncmlkOiB2LCB4OiBudWxsLCB5OiBudWxsIH0sIHMgPSAwOyBzIDwgeS5sZW5ndGg7IHMrKykge1xuICAgICAgICB2YXIgbCA9IHZsKHlbc10sIDIpLCBjID0gbFswXSwgZiA9IGxbMV0sIHAgPSBNYXRoLnJvdW5kKChlIC0gYS54KSAvIHZbY10pLCBkID0gTWF0aC5yb3VuZCgodCAtIGEueSkgLyB2W2ZdKTtcbiAgICAgICAgdVtjXSA9IE1hdGgubWF4KG8ubGVmdCwgTWF0aC5taW4oby5yaWdodCwgcCAqIHZbY10gKyBhLngpKSwgdVtmXSA9IE1hdGgubWF4KG8udG9wLCBNYXRoLm1pbihvLmJvdHRvbSwgZCAqIHZbZl0gKyBhLnkpKTtcbiAgICB9IHJldHVybiB1OyB9IHZhciB5ID0gW1tcInhcIiwgXCJ5XCJdLCBbXCJsZWZ0XCIsIFwidG9wXCJdLCBbXCJyaWdodFwiLCBcImJvdHRvbVwiXSwgW1wid2lkdGhcIiwgXCJoZWlnaHRcIl1dLmZpbHRlcihmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IHZsKGUsIDIpLCBuID0gdFswXSwgciA9IHRbMV07IHJldHVybiBuIGluIHYgfHwgciBpbiB2OyB9KTsgcmV0dXJuIGUuZ3JpZCA9IHYsIGUuY29vcmRGaWVsZHMgPSB5LCBlOyB9IGRsLmRlZmF1bHQgPSB5bDsgdmFyIG1sID0ge307IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtbCwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobWwsIFwiZ3JpZFwiLCB7IGVudW1lcmFibGU6ICEwLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhsLmRlZmF1bHQ7IH0gfSk7IHZhciBnbCwgaGwgPSAoZ2wgPSBkbCkgJiYgZ2wuX19lc01vZHVsZSA/IGdsIDogeyBkZWZhdWx0OiBnbCB9OyB2YXIgYmwgPSB7fTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGJsLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIGJsLmluaXQgPSBFbCwgYmwuZGVmYXVsdCA9IHZvaWQgMDsgdmFyIE9sLCB3bCA9IGpsKFFzKSwgUGwgPSBqbChUdSksIF9sID0gKE9sID0gbWUpICYmIE9sLl9fZXNNb2R1bGUgPyBPbCA6IHsgZGVmYXVsdDogT2wgfSwgeGwgPSBqbChtbCk7IGZ1bmN0aW9uIFNsKCkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKVxuICAgICAgICByZXR1cm4gbnVsbDsgdmFyIGUgPSBuZXcgV2Vha01hcDsgcmV0dXJuIFNsID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZTsgfSwgZTsgfSBmdW5jdGlvbiBqbChlKSB7IGlmIChlICYmIGUuX19lc01vZHVsZSlcbiAgICAgICAgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT09IE1sKGUpICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSlcbiAgICAgICAgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IFNsKCk7IGlmICh0ICYmIHQuaGFzKGUpKVxuICAgICAgICByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0ge30sIHIgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgbyBpbiBlKVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHIgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogbnVsbDtcbiAgICAgICAgICAgIGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBvLCBpKSA6IG5bb10gPSBlW29dO1xuICAgICAgICB9IHJldHVybiBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pLCBuOyB9IGZ1bmN0aW9uIE1sKGUpIHsgcmV0dXJuIChNbCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0eXBlb2YgZTsgfSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIGUuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBlICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBlOyB9KShlKTsgfSBmdW5jdGlvbiBFbChlKSB7IHJldHVybiAoMCwgd2wuaW5pdCkoZSksIHdsLmRlZmF1bHQudXNlKHsgaWQ6IFwiaW50ZXJhY3Rqc1wiLCBpbnN0YWxsOiBmdW5jdGlvbiAoKSB7IHdsLmRlZmF1bHQubW9kaWZpZXJzID0gKDAsIF9sLmRlZmF1bHQpKHt9LCBQbCksIHdsLmRlZmF1bHQuc25hcHBlcnMgPSB4bCwgd2wuZGVmYXVsdC5jcmVhdGVTbmFwR3JpZCA9IHdsLmRlZmF1bHQuc25hcHBlcnMuZ3JpZDsgfSB9KTsgfSBcIm9iamVjdFwiID09PSAoXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2Ygd2luZG93ID8gXCJ1bmRlZmluZWRcIiA6IE1sKHdpbmRvdykpICYmIHdpbmRvdyAmJiBFbCh3aW5kb3cpOyB2YXIga2wgPSB3bC5kZWZhdWx0OyBibC5kZWZhdWx0ID0ga2w7IHZhciBEbCA9IHsgZXhwb3J0czoge30gfTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KERsLmV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KTsgdmFyIFRsID0ge307IERsLmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDsgdmFyIElsID0gZnVuY3Rpb24gKGUpIHsgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKVxuICAgICAgICByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPT0gemwoZSkgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKVxuICAgICAgICByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gQWwoKTsgaWYgKHQgJiYgdC5oYXMoZSkpXG4gICAgICAgIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7fSwgciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBvIGluIGUpXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykpIHtcbiAgICAgICAgICAgIHZhciBpID0gciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBudWxsO1xuICAgICAgICAgICAgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIG8sIGkpIDogbltvXSA9IGVbb107XG4gICAgICAgIH0gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKTsgcmV0dXJuIG47IH0oYmwpOyBmdW5jdGlvbiBBbCgpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcClcbiAgICAgICAgcmV0dXJuIG51bGw7IHZhciBlID0gbmV3IFdlYWtNYXA7IHJldHVybiBBbCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGU7IH0sIGU7IH0gZnVuY3Rpb24gemwoZSkgeyByZXR1cm4gKHpsID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHR5cGVvZiBlOyB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIGU7IH0pKGUpOyB9IGlmIChPYmplY3Qua2V5cyhJbCkuZm9yRWFjaChmdW5jdGlvbiAoZSkgeyBcImRlZmF1bHRcIiAhPT0gZSAmJiBcIl9fZXNNb2R1bGVcIiAhPT0gZSAmJiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFRsLCBlKSB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGwuZXhwb3J0cywgZSwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBJbFtlXTsgfSB9KSk7IH0pLCBcIm9iamVjdFwiID09PSB6bChEbCkgJiYgRGwpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBEbC5leHBvcnRzID0gSWwuZGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9IElsLmRlZmF1bHQuZGVmYXVsdCA9IElsLmRlZmF1bHQsIElsLmRlZmF1bHQuaW5pdCA9IElsLmluaXQ7IHZhciBDbCA9IElsLmRlZmF1bHQ7IHJldHVybiBEbC5leHBvcnRzLmRlZmF1bHQgPSBDbCwgRGwgPSBEbC5leHBvcnRzOyB9KTtcbn0pO1xudmFyIGludGVyYWN0ID0gdW53cmFwRXhwb3J0cyhpbnRlcmFjdF9taW4pO1xudmFyIFZpZXdwb3J0RGF0YUNvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWaWV3cG9ydERhdGFDb21wb25lbnQoaG9zdFJlZikge1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIH1cbiAgICBWaWV3cG9ydERhdGFDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxMb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpbnRlcmFjdCgnLmRhdGEtaGVhZGVyLWNlbGwnKS5yZXNpemFibGUoe1xuICAgICAgICAgICAgZWRnZXM6IHsgYm90dG9tOiBmYWxzZSwgcmlnaHQ6IHRydWUgfSxcbiAgICAgICAgICAgIG9uZW5kOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2I7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQoZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb2wnKSwgMTApO1xuICAgICAgICAgICAgICAgIHNldERpbWVuc2lvblNpemUoKF9iID0ge30sIF9iW2luZGV4XSA9IGV2ZW50LnJlY3Qud2lkdGgsIF9iKSwgJ2NvbCcpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5zdHlsZS53aWR0aCA9IGV2ZW50LnJlY3Qud2lkdGggKyBcInB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgVmlld3BvcnREYXRhQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjZWxscyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gY29sc1N0b3JlJDEuZ2V0KCdpdGVtcycpOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xuICAgICAgICAgICAgdmFyIGNvbCA9IF9jW19iXTtcbiAgICAgICAgICAgIGNlbGxzLnB1c2goaChcImRpdlwiLCB7IGNsYXNzOiAnZGF0YS1oZWFkZXItY2VsbCcsIFwiZGF0YS1jb2xcIjogY29sLml0ZW1JbmRleCwgc3R5bGU6IHsgd2lkdGg6IGNvbC5zaXplICsgXCJweFwiLCB0cmFuc2Zvcm06IFwidHJhbnNsYXRlWChcIiArIGNvbC5zdGFydCArIFwicHgpXCIgfSB9LCBkYXRhU3RvcmUucHJvdmlkZXIuaGVhZGVyKGNvbC5pdGVtSW5kZXgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNlbGxzO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpZXdwb3J0RGF0YUNvbXBvbmVudC5wcm90b3R5cGUsIFwiZWxlbWVudFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFZpZXdwb3J0RGF0YUNvbXBvbmVudDtcbn0oKSk7XG52YXIgUmV2b2dyVmlld3BvcnRTY3JvbGxhYmxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNsYXNzXzIoaG9zdFJlZikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgICAgICB0aGlzLnNjcm9sbFNpemUgPSAwO1xuICAgICAgICB0aGlzLnByZXZlbnRBcnRpZmljaWFsU2Nyb2xsID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2Nyb2xsVmlydFkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJldmVudEFydGlmaWNpYWxTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcmV2ZW50QXJ0aWZpY2lhbFNjcm9sbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBfdGhpcy52ZXJ0aWNhbFZpcnRTY3JvbGw7XG4gICAgICAgICAgICB2YXIgdG9wID0gKHRhcmdldCA9PT0gbnVsbCB8fCB0YXJnZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRhcmdldC5zY3JvbGxUb3ApIHx8IDA7XG4gICAgICAgICAgICBzZXRWaWV3UG9ydENvb3JkaW5hdGUodG9wLCAncm93Jyk7XG4gICAgICAgICAgICBpZiAoX3RoaXMudmVydGljYWxTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcmV2ZW50QXJ0aWZpY2lhbFNjcm9sbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMudmVydGljYWxTY3JvbGwuc2Nyb2xsVG9wID0gdG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjbGFzc18yLnByb3RvdHlwZS5zY3JvbGxYID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgICAgIGlmICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG9yaXpvbnRhbFNjcm9sbC5zY3JvbGxMZWZ0ID0geDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2V0Vmlld1BvcnRDb29yZGluYXRlKHggfHwgKChfYSA9IHRoaXMuaG9yaXpvbnRhbFNjcm9sbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNjcm9sbExlZnQpIHx8IDAsICdjb2wnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjbGFzc18yLnByb3RvdHlwZS5zY3JvbGxZID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hLCB0b3A7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJldmVudEFydGlmaWNpYWxTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2ZW50QXJ0aWZpY2lhbFNjcm9sbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRvcCA9IHkgfHwgKChfYSA9IHRoaXMudmVydGljYWxTY3JvbGwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zY3JvbGxUb3ApIHx8IDA7XG4gICAgICAgICAgICAgICAgc2V0Vmlld1BvcnRDb29yZGluYXRlKHRvcCwgJ3JvdycpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZlcnRpY2FsVmlydFNjcm9sbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZlbnRBcnRpZmljaWFsU2Nyb2xsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbFZpcnRTY3JvbGwuc2Nyb2xsVG9wID0gdG9wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjbGFzc18yLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zY3JvbGxTaXplID0gZ2V0U2Nyb2xsYmFyV2lkdGgoZG9jdW1lbnQpO1xuICAgICAgICB2YXIgb2xkVmFsWSA9IHJvd3NTdG9yZS5nZXQoJ3JlYWxTaXplJyk7XG4gICAgICAgIHZhciBvbGRWYWxYID0gY29sc1N0b3JlLmdldCgncmVhbFNpemUnKTtcbiAgICAgICAgdGhpcy5zY3JvbGxYKCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsWSgpO1xuICAgICAgICByb3dzU3RvcmUub25DaGFuZ2UoJ3JlYWxTaXplJywgZnVuY3Rpb24gKG5ld1ZhbCkge1xuICAgICAgICAgICAgaWYgKG5ld1ZhbCA8IG9sZFZhbFkpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy52ZXJ0aWNhbFNjcm9sbC5zY3JvbGxMZWZ0ICs9IG5ld1ZhbCAtIG9sZFZhbFk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvbGRWYWxZID0gbmV3VmFsO1xuICAgICAgICB9KTtcbiAgICAgICAgY29sc1N0b3JlLm9uQ2hhbmdlKCdyZWFsU2l6ZScsIGZ1bmN0aW9uIChuZXdWYWwpIHtcbiAgICAgICAgICAgIGlmIChuZXdWYWwgPCBvbGRWYWxYKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaG9yaXpvbnRhbFNjcm9sbC5zY3JvbGxMZWZ0ICs9IG5ld1ZhbCAtIG9sZFZhbFg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvbGRWYWxYID0gbmV3VmFsO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNsYXNzXzIucHJvdG90eXBlLmNvbXBvbmVudERpZFJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gaGFzIHZlcnRpY2FsIHNjcm9sbFxuICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbFZpcnRTY3JvbGwuc2Nyb2xsSGVpZ2h0ID4gdGhpcy52ZXJ0aWNhbFZpcnRTY3JvbGwuY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsU2l6ZSA9IHRoaXMuc2Nyb2xsU2l6ZSB8fCAyMDtcbiAgICAgICAgICAgIHRoaXMudmVydGljYWxWaXJ0U2Nyb2xsLnN0eWxlLnRvcCA9IHRoaXMuaGVhZGVyLmNsaWVudEhlaWdodCArIFwicHhcIjtcbiAgICAgICAgICAgIHRoaXMudmVydGljYWxWaXJ0U2Nyb2xsLnN0eWxlLndpZHRoID0gc2Nyb2xsU2l6ZSArIFwicHhcIjtcbiAgICAgICAgICAgIHRoaXMudmVydGljYWxTY3JvbGwuc3R5bGUubWFyZ2luUmlnaHQgPSBzY3JvbGxTaXplICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbFZpcnRTY3JvbGwuc3R5bGUud2lkdGggPSAnMCc7XG4gICAgICAgICAgICB0aGlzLnZlcnRpY2FsU2Nyb2xsLnN0eWxlLm1hcmdpblJpZ2h0ID0gJzAnO1xuICAgICAgICB9XG4gICAgICAgIC8vIGhhcyBob3Jpem9udGFsIHNjcm9sbFxuICAgICAgICBpZiAodGhpcy5ob3Jpem9udGFsU2Nyb2xsLnNjcm9sbFdpZHRoID4gdGhpcy5ob3Jpem9udGFsU2Nyb2xsLmNsaWVudFdpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLnZlcnRpY2FsVmlydFNjcm9sbC5zdHlsZS5ib3R0b20gPSB0aGlzLnNjcm9sbFNpemUgKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZlcnRpY2FsVmlydFNjcm9sbC5zdHlsZS5ib3R0b20gPSAnMCc7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNsYXNzXzIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGgoXCJkaXZcIiwgeyBjbGFzczogJ3ZlcnRpY2FsLXNjcm9sbCcsIHJlZjogZnVuY3Rpb24gKGVsKSB7IF90aGlzLnZlcnRpY2FsVmlydFNjcm9sbCA9IGVsOyB9LCBvblNjcm9sbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2Nyb2xsVmlydFkoKTsgfSB9LCBoKFwiZGl2XCIsIHsgc3R5bGU6IHsgaGVpZ2h0OiByb3dzU3RvcmUuZ2V0KCdyZWFsU2l6ZScpICsgXCJweFwiIH0gfSkpLFxuICAgICAgICAgICAgaChcImRpdlwiLCB7IGNsYXNzOiAnaG9yaXpvbnRhbC13cmFwcGVyJywgcmVmOiBmdW5jdGlvbiAoZWwpIHsgX3RoaXMuaG9yaXpvbnRhbFNjcm9sbCA9IGVsOyB9LCBvblNjcm9sbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2Nyb2xsWCgpOyB9IH0sIGgoXCJkaXZcIiwgeyBjbGFzczogJ2lubmVyLWNvbnRlbnQtdGFibGUnIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogJ2hlYWRlci13cmFwcGVyJywgcmVmOiBmdW5jdGlvbiAoZWwpIHsgX3RoaXMuaGVhZGVyID0gZWw7IH0gfSwgaChcInNsb3RcIiwgeyBuYW1lOiAnaGVhZGVyJyB9KSksIGgoXCJkaXZcIiwgeyBjbGFzczogJ3ZlcnRpY2FsLXdyYXBwZXInIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogJ3ZlcnRpY2FsLWlubmVyJywgcmVmOiBmdW5jdGlvbiAoZWwpIHsgX3RoaXMudmVydGljYWxTY3JvbGwgPSBlbDsgfSwgb25TY3JvbGw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNjcm9sbFkoKTsgfSB9LCBoKFwiZGl2XCIsIHsgc3R5bGU6IHsgaGVpZ2h0OiByb3dzU3RvcmUuZ2V0KCdyZWFsU2l6ZScpICsgXCJweFwiLCB3aWR0aDogY29sc1N0b3JlLmdldCgncmVhbFNpemUnKSArIFwicHhcIiB9IH0sIGgoXCJzbG90XCIsIHsgbmFtZTogJ2NvbnRlbnQnIH0pKSkpKSlcbiAgICAgICAgXTtcbiAgICB9O1xuICAgIHJldHVybiBjbGFzc18yO1xufSgpKTtcbmV4cG9ydCB7IFJldm9HcmlkIGFzIHJldm9fZ3JpZCwgUmV2b2dyRGF0YSBhcyByZXZvZ3JfZGF0YSwgVmlld3BvcnREYXRhQ29tcG9uZW50IGFzIHJldm9ncl9oZWFkZXIsIFJldm9nclZpZXdwb3J0U2Nyb2xsYWJsZSBhcyByZXZvZ3Jfdmlld3BvcnRfc2Nyb2xsYWJsZSB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==