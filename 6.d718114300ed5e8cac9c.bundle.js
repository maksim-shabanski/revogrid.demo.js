(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{428:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ResizeObserver",(function(){return ResizeObserver})),__webpack_require__.d(__webpack_exports__,"ResizeObserverEntry",(function(){return ResizeObserverEntry}));var ResizeObserverBoxOptions,resizeObservers=[],msg="ResizeObserver loop completed with undelivered notifications.";!function(ResizeObserverBoxOptions){ResizeObserverBoxOptions.BORDER_BOX="border-box",ResizeObserverBoxOptions.CONTENT_BOX="content-box",ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX="device-pixel-content-box"}(ResizeObserverBoxOptions||(ResizeObserverBoxOptions={}));var trigger,DOMRectReadOnly=function(){function DOMRectReadOnly(x,y,width,height){return this.x=x,this.y=y,this.width=width,this.height=height,this.top=this.y,this.left=this.x,this.bottom=this.top+this.height,this.right=this.left+this.width,Object.freeze(this)}return DOMRectReadOnly.prototype.toJSON=function(){var _a=this;return{x:_a.x,y:_a.y,top:_a.top,right:_a.right,bottom:_a.bottom,left:_a.left,width:_a.width,height:_a.height}},DOMRectReadOnly.fromRect=function(rectangle){return new DOMRectReadOnly(rectangle.x,rectangle.y,rectangle.width,rectangle.height)},DOMRectReadOnly}(),isSVG=function(target){return target instanceof SVGElement&&"getBBox"in target},isHidden=function(target){if(isSVG(target)){var _a=target.getBBox(),width=_a.width,height=_a.height;return!width&&!height}var _b=target,offsetWidth=_b.offsetWidth,offsetHeight=_b.offsetHeight;return!(offsetWidth||offsetHeight||target.getClientRects().length)},isElement=function(obj){var _a,_b,scope=null===(_b=null===(_a=obj)||void 0===_a?void 0:_a.ownerDocument)||void 0===_b?void 0:_b.defaultView;return!!(scope&&obj instanceof scope.Element)},global="undefined"!=typeof window?window:{},cache=new Map,scrollRegexp=/auto|scroll/,verticalRegexp=/^tb|vertical/,IE=/msie|trident/i.test(global.navigator&&global.navigator.userAgent),parseDimension=function(pixel){return parseFloat(pixel||"0")},size=function(inlineSize,blockSize,switchSizes){return void 0===inlineSize&&(inlineSize=0),void 0===blockSize&&(blockSize=0),void 0===switchSizes&&(switchSizes=!1),Object.freeze({inlineSize:(switchSizes?blockSize:inlineSize)||0,blockSize:(switchSizes?inlineSize:blockSize)||0})},zeroBoxes=Object.freeze({devicePixelContentBoxSize:size(),borderBoxSize:size(),contentBoxSize:size(),contentRect:new DOMRectReadOnly(0,0,0,0)}),calculateBoxSizes=function(target){if(cache.has(target))return cache.get(target);if(isHidden(target))return cache.set(target,zeroBoxes),zeroBoxes;var cs=getComputedStyle(target),svg=isSVG(target)&&target.ownerSVGElement&&target.getBBox(),removePadding=!IE&&"border-box"===cs.boxSizing,switchSizes=verticalRegexp.test(cs.writingMode||""),canScrollVertically=!svg&&scrollRegexp.test(cs.overflowY||""),canScrollHorizontally=!svg&&scrollRegexp.test(cs.overflowX||""),paddingTop=svg?0:parseDimension(cs.paddingTop),paddingRight=svg?0:parseDimension(cs.paddingRight),paddingBottom=svg?0:parseDimension(cs.paddingBottom),paddingLeft=svg?0:parseDimension(cs.paddingLeft),borderTop=svg?0:parseDimension(cs.borderTopWidth),borderRight=svg?0:parseDimension(cs.borderRightWidth),borderBottom=svg?0:parseDimension(cs.borderBottomWidth),horizontalPadding=paddingLeft+paddingRight,verticalPadding=paddingTop+paddingBottom,horizontalBorderArea=(svg?0:parseDimension(cs.borderLeftWidth))+borderRight,verticalBorderArea=borderTop+borderBottom,horizontalScrollbarThickness=canScrollHorizontally?target.offsetHeight-verticalBorderArea-target.clientHeight:0,verticalScrollbarThickness=canScrollVertically?target.offsetWidth-horizontalBorderArea-target.clientWidth:0,widthReduction=removePadding?horizontalPadding+horizontalBorderArea:0,heightReduction=removePadding?verticalPadding+verticalBorderArea:0,contentWidth=svg?svg.width:parseDimension(cs.width)-widthReduction-verticalScrollbarThickness,contentHeight=svg?svg.height:parseDimension(cs.height)-heightReduction-horizontalScrollbarThickness,borderBoxWidth=contentWidth+horizontalPadding+verticalScrollbarThickness+horizontalBorderArea,borderBoxHeight=contentHeight+verticalPadding+horizontalScrollbarThickness+verticalBorderArea,boxes=Object.freeze({devicePixelContentBoxSize:size(Math.round(contentWidth*devicePixelRatio),Math.round(contentHeight*devicePixelRatio),switchSizes),borderBoxSize:size(borderBoxWidth,borderBoxHeight,switchSizes),contentBoxSize:size(contentWidth,contentHeight,switchSizes),contentRect:new DOMRectReadOnly(paddingLeft,paddingTop,contentWidth,contentHeight)});return cache.set(target,boxes),boxes},calculateBoxSize=function(target,observedBox){var _a=calculateBoxSizes(target),borderBoxSize=_a.borderBoxSize,contentBoxSize=_a.contentBoxSize,devicePixelContentBoxSize=_a.devicePixelContentBoxSize;switch(observedBox){case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:return devicePixelContentBoxSize;case ResizeObserverBoxOptions.BORDER_BOX:return borderBoxSize;default:return contentBoxSize}},ResizeObserverEntry=function ResizeObserverEntry(target){var boxes=calculateBoxSizes(target);this.target=target,this.contentRect=boxes.contentRect,this.borderBoxSize=[boxes.borderBoxSize],this.contentBoxSize=[boxes.contentBoxSize],this.devicePixelContentBoxSize=[boxes.devicePixelContentBoxSize]},calculateDepthForNode=function(node){if(isHidden(node))return 1/0;for(var depth=0,parent=node.parentNode;parent;)depth+=1,parent=parent.parentNode;return depth},broadcastActiveObservations=function(){var shallowestDepth=1/0,callbacks=[];resizeObservers.forEach((function processObserver(ro){if(0!==ro.activeTargets.length){var entries=[];ro.activeTargets.forEach((function processTarget(ot){var entry=new ResizeObserverEntry(ot.target),targetDepth=calculateDepthForNode(ot.target);entries.push(entry),ot.lastReportedSize=calculateBoxSize(ot.target,ot.observedBox),targetDepth<shallowestDepth&&(shallowestDepth=targetDepth)})),callbacks.push((function resizeObserverCallback(){ro.callback.call(ro.observer,entries,ro.observer)})),ro.activeTargets.splice(0,ro.activeTargets.length)}}));for(var _i=0,callbacks_1=callbacks;_i<callbacks_1.length;_i++){(0,callbacks_1[_i])()}return shallowestDepth},gatherActiveObservationsAtDepth=function(depth){cache.clear(),resizeObservers.forEach((function processObserver(ro){ro.activeTargets.splice(0,ro.activeTargets.length),ro.skippedTargets.splice(0,ro.skippedTargets.length),ro.observationTargets.forEach((function processTarget(ot){ot.isActive()&&(calculateDepthForNode(ot.target)>depth?ro.activeTargets.push(ot):ro.skippedTargets.push(ot))}))}))},process=function(){var event,depth=0;for(gatherActiveObservationsAtDepth(depth);resizeObservers.some((function(ro){return ro.activeTargets.length>0}));)depth=broadcastActiveObservations(),gatherActiveObservationsAtDepth(depth);return resizeObservers.some((function(ro){return ro.skippedTargets.length>0}))&&("function"==typeof ErrorEvent?event=new ErrorEvent("error",{message:msg}):((event=document.createEvent("Event")).initEvent("error",!1,!1),event.message=msg),window.dispatchEvent(event)),depth>0},callbacks=[],queueMicroTask=function(callback){if(!trigger){var el_1=document.createTextNode("");new MutationObserver((function(){return callbacks.splice(0).forEach((function(cb){return cb()}))})).observe(el_1,{characterData:!0}),trigger=function(){el_1.textContent=""}}callbacks.push(callback),trigger()},watching=0,observerConfig={attributes:!0,characterData:!0,childList:!0,subtree:!0},events=["resize","load","transitionend","animationend","animationstart","animationiteration","keyup","keydown","mouseup","mousedown","mouseover","mouseout","blur","focus"],scheduled=!1,scheduler=new(function(){function Scheduler(){var _this=this;this.stopped=!0,this.listener=function(){return _this.schedule()}}return Scheduler.prototype.run=function(frames){var cb,_this=this;scheduled||(scheduled=!0,cb=function(){var elementsHaveResized=!1;try{elementsHaveResized=process()}finally{if(scheduled=!1,!watching)return;elementsHaveResized?_this.run(60):frames?_this.run(frames-1):_this.start()}},queueMicroTask((function ResizeObserver(){requestAnimationFrame(cb)})))},Scheduler.prototype.schedule=function(){this.stop(),this.run(12)},Scheduler.prototype.observe=function(){var _this=this,cb=function(){return _this.observer&&_this.observer.observe(document.body,observerConfig)};document.body?cb():global.addEventListener("DOMContentLoaded",cb)},Scheduler.prototype.start=function(){var _this=this;this.stopped&&(this.stopped=!1,this.observer=new MutationObserver(this.listener),this.observe(),events.forEach((function(name){return global.addEventListener(name,_this.listener,!0)})))},Scheduler.prototype.stop=function(){var _this=this;this.stopped||(this.observer&&this.observer.disconnect(),events.forEach((function(name){return global.removeEventListener(name,_this.listener,!0)})),this.stopped=!0)},Scheduler}()),updateCount=function(n){!watching&&n>0&&scheduler.start(),!(watching+=n)&&scheduler.stop()},ResizeObservation=function(){function ResizeObservation(target,observedBox){this.target=target,this.observedBox=observedBox||ResizeObserverBoxOptions.CONTENT_BOX,this.lastReportedSize={inlineSize:0,blockSize:0}}return ResizeObservation.prototype.isActive=function(){var target,size=calculateBoxSize(this.target,this.observedBox);return target=this.target,isSVG(target)||function(target){switch(target.tagName){case"INPUT":if("image"!==target.type)break;case"VIDEO":case"AUDIO":case"EMBED":case"OBJECT":case"CANVAS":case"IFRAME":case"IMG":return!0}return!1}(target)||"inline"!==getComputedStyle(target).display||(this.lastReportedSize=size),this.lastReportedSize.inlineSize!==size.inlineSize||this.lastReportedSize.blockSize!==size.blockSize},ResizeObservation}(),ResizeObserverDetail=function ResizeObserverDetail(resizeObserver,callback){this.activeTargets=[],this.skippedTargets=[],this.observationTargets=[],this.observer=resizeObserver,this.callback=callback},observerMap=new Map,getObservationIndex=function(observationTargets,target){for(var i=0;i<observationTargets.length;i+=1)if(observationTargets[i].target===target)return i;return-1},ResizeObserverController=function(){function ResizeObserverController(){}return ResizeObserverController.connect=function(resizeObserver,callback){var detail=new ResizeObserverDetail(resizeObserver,callback);resizeObservers.push(detail),observerMap.set(resizeObserver,detail)},ResizeObserverController.observe=function(resizeObserver,target,options){if(observerMap.has(resizeObserver)){var detail=observerMap.get(resizeObserver);getObservationIndex(detail.observationTargets,target)<0&&(detail.observationTargets.push(new ResizeObservation(target,options&&options.box)),updateCount(1),scheduler.schedule())}},ResizeObserverController.unobserve=function(resizeObserver,target){if(observerMap.has(resizeObserver)){var detail=observerMap.get(resizeObserver),index=getObservationIndex(detail.observationTargets,target);index>=0&&(detail.observationTargets.splice(index,1),updateCount(-1))}},ResizeObserverController.disconnect=function(resizeObserver){if(observerMap.has(resizeObserver)){var detail=observerMap.get(resizeObserver);resizeObservers.splice(resizeObservers.indexOf(detail),1),observerMap.delete(resizeObserver),updateCount(-detail.observationTargets.length)}},ResizeObserverController}(),ResizeObserver=function(){function ResizeObserver(callback){if(0===arguments.length)throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");if("function"!=typeof callback)throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");ResizeObserverController.connect(this,callback)}return ResizeObserver.prototype.observe=function(target,options){if(0===arguments.length)throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");if(!isElement(target))throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");ResizeObserverController.observe(this,target,options)},ResizeObserver.prototype.unobserve=function(target){if(0===arguments.length)throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");if(!isElement(target))throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");ResizeObserverController.unobserve(this,target)},ResizeObserver.prototype.disconnect=function(){ResizeObserverController.disconnect(this)},ResizeObserver.toString=function(){return"function ResizeObserver () { [polyfill code] }"},ResizeObserver}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,